
START_MARKER

test_do(add_constant("H",Protocols.HTTP))

test_eq(H.HTTP_OK, 200)
test_eq(H.response_codes[200], "200 OK")

test_do([[
class A {
  inherit H.Query;

  string _server;
  int _port;
  string _query;
  mapping|string _headers;
  string _data;

  int ok = 1;

  this_program sync_request(string server, int port, string query, void|mapping|string headers, void|string data) {

    _server = server;
    _port = port;
    _query = query;
    _headers = headers;
    _data = data;
    return this;
  }

  array params() { return ({ _server, _port, _query, _headers, _data }); }
};
add_constant("CON",A);
]])

dnl do_proxied_method


test_any([[
  object o = H.do_method("GET","http://x",0,0,CON());
  if( o->_server != "x" ) return 1;
  if( o->_port != 80 ) return 2;
  if( o->_query != "GET / HTTP/1.0" ) return 3;
  mapping h = o->_headers;
  if( !h || sizeof(h) != 2 ) return 4;
  if( h->host != "x" ) return 5;
  if( !has_prefix(h["user-agent"], "Mozilla/5.0 (compatible; MSIE 6.0; Pike HTTP client) Pike/") ) return 6;
  if( o->_data != 0 ) return 7;
  return 0;
]], 0)
test_any([[
  object o = H.do_method("GET","https://x",0,0,CON());
  if( o->_server != "x" ) return 1;
  if( o->_port != 443 ) return 2;
  if( o->https != 1 ) return 3;
  return 0;
]], 0)
test_any([[
  object o = H.do_method("GET","http://x:81",0,0,CON());
  if( o->_port != 81 ) return 1;
  return 0;
]], 0)
test_any([[
  object o = H.do_method("GET","https://x:80",0,0,CON());
  if( o->_port != 80 ) return 2;
  if( o->https != 1 ) return 3;
  return 0;
]], 0)

test_any([[
  object o = H.do_method("GET","http://a@x",0,0,CON());
  return o->_headers->authorization;
]], "Basic YTo=")
test_any([[
  object o = H.do_method("GET","http://a:b@x",0,0,CON());
  return o->_headers->authorization;
]], "Basic YTpi")
test_any([[
  object o = H.do_method("GET","http://:b@x",0,0,CON());
  return o->_headers->authorization;
]], "Basic OmI=")

test_any_equal([[
  object o = H.do_method("GET","http://x",0,([]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":"x"]))
test_any_equal([[
  object o = H.do_method("GET","http://x",0,(["host":"y"]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":"y"]))
test_any_equal([[
  object o = H.do_method("GET","http://x",0,(["user-agent":"a"]),CON());
  mapping h = o->_headers;
  return h;
]], (["host":"x","user-agent":"a"]))
test_any_equal([[
  object o = H.do_method("GET","http://a:b@x",0,(["authorization":"z"]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":"x","authorization":"z"]))
test_any_equal([[
  object o = H.do_method("GET","http://x",0,(["a":"b"]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":"x","a":"b"]))
test_any_equal([[
  object o = H.do_method("GET","http://x",0,(["Host":0]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":0]))
test_any_equal([[
  object o = H.do_method("GET","http://x",0,(["a":({"1","2"})]),CON());
  mapping h = o->_headers;
  m_delete(h, "user-agent");
  return h;
]], (["host":"x","a":({"1","2"})]))

test_any_equal([[
  object o = H.do_method("GET","http://x/?a=b&c=d",0,0,CON());
  return o->_query;
]], "GET /?a=b&c=d HTTP/1.0")
test_any_equal([[
  object o = H.do_method("GET","http://x/?a=b&c=d",(["x":"y"]),0,CON());
  return o->_query;
]], "GET /?a=b&c=d&x=y HTTP/1.0")
test_any_equal([[
  object o = H.do_method("GET","http://x/",(["x":"y"]),0,CON());
  return o->_query;
]], "GET /?x=y HTTP/1.0")

test_any_equal([[
  object o = H.do_method("GET","http://x",0,0,CON());
  return o->_query;
]], "GET / HTTP/1.0")

test_eval_error([[
  CON c = CON();
  c->ok = 0;
  c->errno = 1;
  object o = H.do_method("GET","http://x/",(["x":"y"]),0,c);
]])



dnl do_async_method
dnl do_async_proxied_method
dnl get_url
dnl put_url
dnl delete_url
dnl get_url_nice
dnl get_url_data
dnl post_url
dnl post_url_nice
dnl post_url_data

dnl http_encode_query
test_any([[
  string s = H.http_encode_query((["a":"b","c":"d"]));
  return (< "a=b&c=d", "c=d&a=b" >)[s];
]], 1)
test_any([[
  string s = H.http_encode_query((["a":"b","a":"d"]));
  return (< "a=b", "a=d" >)[s];
]], 1)
test_any([[
  string s = H.http_encode_query((["a":0,"c":"d"]));
  return (< "a&c=d", "c=d&a" >)[s];
]], 1)
test_any([[
  string s = H.http_encode_query((["a":({"b","c"})]));
  return (< "a=b&a=c", "a=c&a=b" >)[s];
]], 1)
test_eq(H.http_encode_query((["&amp;":"?"])), "%26amp%3B=%3F")
test_eq([[H.http_encode_query((["'=\"":"\0\0\0"]))]], "%27%3D%22=%00%00%00")

test_eq(H.percent_encode("AZaz09-._~"), "AZaz09-._~")
test_eq(H.percent_encode(":!\1 \x80\xff"), "%3A%21%01%20%80%FF")
test_eq(H.percent_encode("a\u0100a"), "a\u0100a")

test_eq(H.percent_decode("%00x%3bbbb%3B"), "\0x;bbb;")
test_eq(H.percent_decode(""), "")
test_eval_error(H.percent_decode("%"), "\0")
test_eval_error(H.percent_decode("%1"), "\0")

test_eq(H.uri_encode(":/a\u0100a+"), "%3A%2Fa%C4%80a%2B")
test_eq(H.uri_encode_invalids(":/a\u0100a+"), ":/a%C4%80a+")

test_eq(H.uri_decode("%3A%2Fa%C4%80a%2B"), ":/a\u0100a+")

test_eq(H.iri_encode(":+<\00\x80\u0100"), "%3A%2B%3C%00\x80\u0100")

dnl quoted_string_encode
dnl quoted_string_decode

test_do(add_constant("H"))
test_do(add_constant("CON"))

test_do(add_constant("A", Protocols.HTTP.Authentication))

test_equal(A.split_header(""), ([]))
test_equal(A.split_header("a=1,b=,c=\"\",d=\"a\",e=b,f=\",\""),
  (["a":"1","b":"","c":"","d":"a", "e":"b","f":","]))
test_equal(A.split_header("realm=\"a@b.com\", qop=\"auth\",nonce=\"123\", algorithm=MD5"), ([ "realm":"a@b.com", "qop":"auth", "nonce":"123", "algorithm":"MD5" ]))
test_equal(A.split_header("a=1,a=2"), ([ "a":"2" ]))

dnl From RFC 2617 section 2
test_any([[
  object c = A.make_authenticator("Basic realm=\"WallyWorld\"", "Aladdin", "open sesame");
  return c->auth("GET","/");
]], "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")

test_any_equal([[
  object c = A.make_authenticator("Digest realm=\"testrealm@host.com\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\"", "Mufasa", "Circle Of Life");
  string r = c->auth("GET","/dir/index.html","0a4f113b");
  sscanf(r, "Digest %s", r);
  return A.split_header(r);
]], ([ "username":"Mufasa",
       "algorithm":"MD5",
       "realm":"testrealm@host.com",
       "nonce":"dcd98b7102dd2f0e8b11d0f600bfb0c093",
       "uri":"/dir/index.html",
       "response":"670fd8c2df070c60b045671b8b24ff02",
       ]))

dnl From RFC 2617 section 3.5
test_any_equal([[
  object c = A.make_authenticator("Digest realm=\"testrealm@host.com\", qop=\"auth\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"", "Mufasa", "Circle Of Life");
  string r = c->auth("GET","/dir/index.html","0a4f113b");
  sscanf(r, "Digest %s", r);
  return A.split_header(r);
]], ([ "username":"Mufasa",
       "algorithm":"MD5",
       "realm":"testrealm@host.com",
       "nonce":"dcd98b7102dd2f0e8b11d0f600bfb0c093",
       "uri":"/dir/index.html",
       "qop":"auth",
       "nc":"00000001",
       "cnonce":"0a4f113b",
       "response":"6629fae49393a05397450978507c4ef1",
       "opaque":"5ccc069c403ebaf9f0171e9517f40e41"
       ]))

dnl RFC 7616 section 3.9.1
test_any_equal([[
  object c = A.make_authenticator("Digest realm=\"http-auth@example.org\", qop=\"auth\", algorithm=MD5, nonce=\"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v\", opaque=\"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS\"", "Mufasa", "Circle of Life");
  string r = c->auth("GET","/dir/index.html","f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ");
  sscanf(r, "Digest %s", r);
  return A.split_header(r);
]], ([ "username":"Mufasa",
       "algorithm":"MD5",
       "realm":"http-auth@example.org",
       "nonce":"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
       "uri":"/dir/index.html",
       "qop":"auth",
       "nc":"00000001",
       "cnonce":"f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ",
       "response":"8ca523f5e9506fed4657c9700eebdbec",
       "opaque":"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"
       ]))

dnl RFC 7616 section 3.9.1
test_any_equal([[
  object c = A.make_authenticator("Digest realm=\"http-auth@example.org\", qop=\"auth\", algorithm=SHA-256, nonce=\"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v\", opaque=\"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS\"", "Mufasa", "Circle of Life");
  string r = c->auth("GET","/dir/index.html","f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ");
  sscanf(r, "Digest %s", r);
  return A.split_header(r);
]], ([ "username":"Mufasa",
       "algorithm":"SHA-256",
       "realm":"http-auth@example.org",
       "nonce":"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
       "uri":"/dir/index.html",
       "qop":"auth",
       "nc":"00000001",
       "cnonce":"f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ",
       "response":"753927fa0e85d155564e2e272a28d1802ca10daf4496794697cf8db5856cb6c1",
       "opaque":"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"
       ]))

test_any_equal([[
  object c = A.make_authenticator("Digest realm=\"api@example.org\", qop=\"auth\", algorithm=SHA-512-256, nonce=\"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC/RVvkK\", opaque=\"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS\", charset=UTF-8, userhash=true", "J\u00e4s\u00f8n Doe", "Secret, or not?");
  string r = c->auth("GET","/doe.json","NTg6RKcb9boFIAS3KrFK9BGeh+iDa/sm6jUMp2wds69v");
  sscanf(r, "Digest %s", r);
  return A.split_header(r);
]], ([ "username":"488869477bf257147b804c45308cd62ac4e25eb717b12b298c79e62dcea254ec",
       "algorithm":"SHA-512-256",
       "realm":"api@example.org",
       "nonce":"5TsQWLVdgBdmrQ0XsxbDODV+57QdFR34I9HAbC/RVvkK",
       "uri":"/doe.json",
       "qop":"auth",
       "nc":"00000001",
       "cnonce":"NTg6RKcb9boFIAS3KrFK9BGeh+iDa/sm6jUMp2wds69v",
       "response":"ae66e67d6b427bd3f120414a82e4acff38e8ecd9101d6c861229025f607a79dd",
       "opaque":"HRPCssKJSGjCrkzDg8OhwpzCiGPChXYjwrI2QmXDnsOS",
       "userhash":"true",
       ]))


test_do(add_constant("A"))

END_MARKER
