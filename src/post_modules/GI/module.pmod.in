#pike __REAL_VERSION__

inherit @module@ : GI;

#if constant(@module@.Repository)

class DynamicImporter {
  protected Repository repository = get_default_repository();

  class IntrospectionModule {

    protected string namespace;

    class Function(protected FunctionInfo info)
    {
      protected mixed `()(mixed ... args)
      {
        return info->invoke(@args);
      }

      protected string _sprintf(int mode)
      {
        return mode == 'O' && sprintf("%O.%s",
                                      IntrospectionModule::this,
                                      info->get_name());
      }
    }

    class Object
    {
      protected ObjectInfo info;
      protected mapping(string:mixed) attrs = ([]);

      class Method
      {
        inherit Function;

        class BoundMethod(protected object obj)
        {
          protected mixed `()(mixed ... args) {
            return Function::`()(obj, @args);
          }
          protected string _sprintf(int mode) {
            return mode == 'O' && sprintf("%O->%s", obj, info->get_name());
          }
        }

        protected string _sprintf(int mode)
        {
          return mode == 'O' && sprintf("%O.%s", Object::this,
                                        info->get_name());
        }
      }

      class Instance {
        inherit GObject;

        protected private string _sprintf(int mode)
        {
          return mode == 'O' && sprintf("%O()", Object::this);
        }
        
        protected private mixed bind(mixed value)
        {
          if (objectp(value) && object_program(value) == Method)
            return value->BoundMethod(this);
        }

        protected array(string) _indices() { return Object::_indices(); }
        protected array(mixed) _values() { return Object::_values(); }
        protected mixed `[](string index) { return bind(Object::`[](index)); }
        protected mixed `->(string index, object|void o, int|void n) {
          if (o != Instance::this) {
            mixed real_value = ::`->(index, this);
            if(real_value != UNDEFINED) return real_value;
          }
          return bind(Object::`->(index));
        }

        protected void create(mapping(string:mixed)|void properties)
        {
          ::create(info, properties);
        }
      };

      protected string _sprintf(int mode)
      {
        return mode == 'O' && sprintf("%O.%s",
                                      IntrospectionModule::this,
                                      info->get_name());
      }

      protected void create(ObjectInfo oi)
      {
        info = oi;
        while (oi) {
          array(ObjectInfo) methods = oi->get_methods();
          attrs = mkmapping(methods->get_name(), map(methods, Method))
            + attrs;
          oi = oi->get_parent();
        }
        foreach(info->get_interfaces(); ; InterfaceInfo ii) {
          array(ObjectInfo) methods = ii->get_methods();
          attrs += mkmapping(methods->get_name(), map(methods, Method));
        }
      }

      protected array(string) _indices() { return indices(attrs); }
      protected array(mixed) _values() { return values(attrs); }
      protected mixed `[](string index) { return attrs[index]; }
      protected mixed `->(string index) { return attrs[index]; }
      protected program cast(string type) { return type=="program" && Instance; }

      protected Instance `()(mapping(string:mixed)|void properties)
      {
        return Instance(properties);
      }
    }

    class Struct
    {
      protected StructInfo info;
      protected mapping(string:FieldInfo) fields = ([]);
      protected mapping(string:Method) methods = ([]);

      protected string _sprintf(int mode)
      {
        return mode == 'O' && sprintf("%O.%s",
                                      IntrospectionModule::this,
                                      info->get_name());
      }

      class Method
      {
        inherit Function;

        class BoundMethod(protected object box)
        {
          protected mixed `()(mixed ... args) {
            return Function::`()(box, @args);
          }
          protected string _sprintf(int mode) {
            return mode == 'O' && sprintf("%O->%s", box, info->get_name());
          }
        }

        protected string _sprintf(int mode)
        {
          return mode == 'O' && sprintf("%O.%s", Struct::this,
                                        info->get_name());
        }
      }

      class Instance {
        inherit GBoxed;

        protected private string format_fields()
        {
          string s = 0;
          foreach(fields; string name; FieldInfo info)
            s = s? sprintf("%s, %s=%O", s, name, info->get_field(this)) :
              sprintf("%s=%O", name, info->get_field(this));
          return s || "";
        }

        protected private string _sprintf(int mode)
        {
          return mode == 'O' && sprintf("%O(%s)", Struct::this, format_fields());
        }

        protected private mixed bind(mixed value)
        {
          if (objectp(value) && object_program(value) == FieldInfo)
            return value->get_field(this);
          if (objectp(value) && object_program(value) == Method)
            return value->BoundMethod(this);
        }

        protected array(string) _indices() { return indices(fields)+Struct::_indices(); }
        protected array(mixed) _values() { return values(fields)->get_field(this)+Struct::_values(); }
        protected mixed `[](string index) { return bind(fields[index] || Struct::`[](index)); }
        protected mixed `->(string index, object|void o, int|void n) {
          if (o != Instance::this) {
            mixed real_value = ::`->(index, this);
            if(real_value != UNDEFINED) return real_value;
          }
          return bind(fields[index] || Struct::`[](index));
        }
        protected void `->=(string index, mixed value, object|void o, int|void n) {
          if(fields[index])
            fields[index]->set_field(this, value);
          else
            ::`->=(index, value);
        }
        protected mixed `[]=(string index, mixed value) {
          if(fields[index])
            fields[index]->set_field(this, value);
        }

        protected void create(mapping(string:mixed)|void properties)
        {
          ::create(info, properties);
        }
      }

      protected array(string) _indices() { return indices(methods); }
      protected array(mixed) _values() { return values(methods); }
      protected mixed `[](string index) { return methods[index]; }
      protected mixed `->(string index) { return methods[index]; }
      protected program cast(string type) { return type=="program" && Instance; }

      protected void create(StructInfo si)
      {
        info = si;
        array(FieldInfo) fs = si->get_fields();
        array(FunctionInfo) ms = si->get_methods();
        fields = mkmapping(fs->get_name(), fs);
        methods = mkmapping(ms->get_name(), map(ms, Method));
      }

      protected Instance `()(mapping(string:mixed)|void properties)
      {
        return Instance(properties);
      }
    }

    class Enum
    {
      protected EnumInfo info;
      protected mapping(string:int) map;

      protected string _sprintf(int mode)
      {
        return mode == 'O' && sprintf("%O.%s",
                                      IntrospectionModule::this,
                                      info->get_name());
      }

      protected void create(EnumInfo ei)
      {
        info = ei;
        array(ObjectInfo) vals = info->get_values();
        map = mkmapping(upper_case(vals->get_name()[*]), vals->get_value());
      }

      protected array(string) _indices() { return indices(map); }
      protected array(int) _values() { return values(map); }
      protected mixed `[](string index) { return map[index]; }
      protected mixed `->(string index) { return map[index]; }
    }

    protected void create(string namespace_, string|void version)
    {
      namespace = namespace_;
      repository->require(namespace, version);
    }

    protected string _sprintf(int mode)
    {
      return mode == 'O' && sprintf("%O.%s", DynamicImporter::this, namespace);
    }

    protected mixed wrap(BaseInfo info)
    {
      if (object_program(info) == ObjectInfo)
        return Object([object(ObjectInfo)]info);
      else if (object_program(info) == FunctionInfo)
        return Function([object(FunctionInfo)]info);
      else if (object_program(info) == EnumInfo)
        return Enum([object(EnumInfo)]info);
      else if (object_program(info) == StructInfo)
        return Struct([object(StructInfo)]info);
      else if (object_program(info) == ConstantInfo)
        return ([object(ConstantInfo)]info)->get();
      /* FIXME */
      return info;
    }

    protected mixed `[](string name)
    {
      BaseInfo info = repository->find_by_name(namespace, name);
      if (!info) return UNDEFINED;
      return wrap(info);
    }

    protected array(string) _indices()
    {
      return Array.uniq(repository->get_infos(namespace)->get_name());
    }

    protected array(mixed) _values()
    {
      return rows(this, _indices());
    }
  };

  protected mapping(string:mixed) cache = ([]);

  protected mixed `[](string namespace)
  {
    if (cache[namespace])
      return cache[namespace];
    if (!repository->enumerate_versions(namespace))
      return UNDEFINED;
    IntrospectionModule m = IntrospectionModule(namespace);
    if (m)
      cache[namespace] = m;
    return m;
  }

  protected array(string) _indices() { return indices(cache); }
  protected array(mixed) _values() { return values(cache); }
}

DynamicImporter repository = DynamicImporter();

#endif
