/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "global.h"
#include "stralloc.h"
#include "pike_macros.h"
#include "interpret.h"
#include "threads.h"
#include "program.h"
#include "program_id.h"
#include "object.h"
#include "operators.h"
#include "cyclic.h"
#include "fdlib.h"
#include "fd_control.h"
#include "backend.h"
#include "module_support.h"
#include "array.h"
#include "multiset.h"
#include "builtin_functions.h"
#include "bignum.h"

#include "shuffler.h"
#include "sources.h"

#ifdef HAVE_SYS_UIO_H
#include <sys/uio.h>
#endif /* HAVE_SYS_UIO_H */

DECLARATIONS

#if 0
#define SHUFFLE_DEBUG1(fmt, arg1)			fprintf(stderr,"Shuffle[%p]:" fmt, arg1)
#define SHUFFLE_DEBUG2(fmt, arg1, arg2)			fprintf(stderr,"Shuffle[%p]:" fmt, arg1, arg2)
#define SHUFFLE_DEBUG3(fmt, arg1, arg2, arg3)		fprintf(stderr,"Shuffle[%p]:" fmt, arg1, arg2, arg3)
#define SHUFFLE_DEBUG4(fmt, arg1, arg2, arg3, arg4)	fprintf(stderr,"Shuffle[%p]:" fmt, arg1, arg2, arg3, arg4)
#else
#define SHUFFLE_DEBUG1(fmt, arg1)
#define SHUFFLE_DEBUG2(fmt, arg1, arg2)
#define SHUFFLE_DEBUG3(fmt, arg1, arg2, arg3)
#define SHUFFLE_DEBUG4(fmt, arg1, arg2, arg3, arg4)
#endif
#define BLOCK (64*1024)

static void free_source(struct source *s) {
  free_svalue(&s->wrap_callback);
  free_svalue(&s->wrap_array);
  s->free_source(s);
}

/*! @module Shuffler
 *!
 *! Module implementing sending to and from nonblocking streams and other sources.
 *!
 *! Most useful when implementing sending of data from strings, files and
 *! other sources to a network connection. The module also supports
 *! generic bandwidth throttling.
 *!
 *! Multiple @[Shuffler] object can be created, each optionally with
 *! their own backend.
 *!
 *! This makes it easier to use more than one CPU for pure data
 *! transmission, just have multiple backends each in their own
 *! thread, with their own shuffle object.
 *!
 */

/*! @class Throttler
 *!
 *! @note
 *!  This is an interface that all @[Throttler]s must implement.
 *!  It's not an actual class in this module.
 *!
 *! @decl void request( Shuffle shuffle, int amount, function(int:void) callback )
 *! This function is called when the @[Shuffle] wants to send some
 *! data to a client.
 *!
 *! When data can be sent, the @[callback] function should be called
 *! with the amount of data that can be sent as the argument.
 *!
 *! @decl void give_back( Shuffle shuffle, int amount )
 *!
 *! This function will be called by the @[Shuffle] object to report
 *! that some data assigned to it by this throttler was unused, and
 *! can be given to another @[Shuffle] object instead.
 */
/*! @endclass
 */

/*! @class Shuffle
 *! This class contains the state for one ongoing data
 *! shuffling operation. To create a @[Shuffle] instance, use the
 *! @[Shuffler()->shuffle] method.
 *!
 */

PIKECLASS Shuffle
{
  PIKEVAR object shuffler;
  /*! @decl Shuffler shuffler;
   *! The @[Shuffler] that owns this @[Shuffle] object
   *!
  */
  PIKEVAR object throttler;
  /*! @decl Throttler throttler;
   *! The @[Throttler] that is associated with this @[Shuffle] object,
   *! if any.
   *!
  */

  PIKEVAR function(object, int:array(string(8bit))) done_callback;

  PIKEVAR mixed request_arg;

  CVAR struct fd_callback_box box;
  CVAR int oldbulkmode;
  CVAR INT64 skip, left;

  CVAR struct object *self;   /* points to this shuffler object */
  CVAR struct source *current_source;
  CVAR struct source *last_source;
  CVAR struct object *file_obj;
  CVAR int callback;
  CVAR int write_callback;

  CVAR int sent;
  CVAR int autopause;
  CVAR ShuffleState state;

  CVAR struct iovec *iov;
  CVAR int iovalloc;
  CVAR int iovamount;
  CVAR int iovfilled;

  static void set_fdstate(struct Shuffle_struct*s) {
    if (s->box.fd >= 0 && s->oldbulkmode != -1)
      s->oldbulkmode = bulkmode_start(s->box.fd);
  }

  static void restore_fdstate(struct Shuffle_struct*s) {
    if (s->box.fd >= 0 && s->oldbulkmode != -1)
      bulkmode_restore(s->box.fd, s->oldbulkmode);
  }

  static void take_fd(struct Shuffle_struct*s) {
    if (s->box.fd >= 0) {
      fd_close(s->box.fd);
      unhook_fd_callback_box(&s->box);
      s->box.fd = -1;
    }
  }

  static void cur_remove_callbacks(struct source *cursource) {
    if (cursource && cursource->remove_callbacks)
      cursource->remove_callbacks(cursource);
  }

  static void cur_setup_callbacks(struct source *cursource) {
    if (cursource && cursource->setup_callbacks)
      cursource->setup_callbacks(cursource);
  }

  static void _send_more( struct Shuffle_struct *t );
  static void __set_callbacks( struct Shuffle_struct *t )
  {
    SHUFFLE_DEBUG2("__set_calllbacks(%s)\n", t,(t->box.fd>0?"C":"Pike") );
    if( t->box.fd >= 0 )
      set_fd_callback_events(&t->box, PIKE_BIT_FD_WRITE, 0);
    else if( t->file_obj && t->file_obj->prog )
    {
      ref_push_function( t->box.ref_obj, t->write_callback );
      safe_apply( t->file_obj, "set_write_callback", 1 );
      pop_stack();
    }
    else {
      SHUFFLE_DEBUG1("EEP: No destination! Cannot set callbacks\n",t);
    }
  }

  static void __remove_callbacks( struct Shuffle_struct *t )
  {
    SHUFFLE_DEBUG2("__remove_calllbacks(%s)\n", t, (t->box.fd>=0?"C":"Pike") );
    if( t->box.fd >= 0 )
      set_fd_callback_events(&t->box, 0, 0);
    else if( t->file_obj && t->file_obj->prog )
    {
      push_int(0);
      safe_apply( t->file_obj, "set_write_callback", 1 );
      pop_stack();
    }
    else {
      SHUFFLE_DEBUG1("EEP: No destination! Cannot remove callbacks\n",t);
    }
  }

  static int got_shuffler_event(struct fd_callback_box*box, int DEBUGUSED(event)) {
#ifdef PIKE_DEBUG
    if (event != PIKE_FD_WRITE)
      Pike_fatal ("Got unexpected event %d.\n", event);
#endif
    _send_more((struct Shuffle_struct*)
     ((char*)box-offsetof(struct Shuffle_struct,box)));

    return 0; // Everything OK.
  }

  PIKEFUN void set_throttler( object t )
  /*! @decl void set_throttler(Throttler t)
   *! Calling this function overrides the @[Shuffler] global throttler.
   *!
  */
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG2("set_throttler(%p)\n", THIS, t );
    if( THIS->throttler )
      free_object( THIS->throttler );
    if( (THIS->throttler = t) ) {
      debug_malloc_touch(THIS->throttler);
      Pike_sp--;
    }
  }

  PIKEFUN int sent_data()
  /*! @decl int sent_data()
   *! Returns the amount of data that has been sent so far.
   *!
  */
    optflags OPT_TRY_OPTIMIZE;
  {
    SHUFFLE_DEBUG2("sent_data() --> %d\n", THIS, THIS->sent );
    RETURN THIS->sent;
  }

  PIKEFUN int state()
  /*! @decl int state()
   *! Returns the current state of the shuffler.
   *! This is one of the following:
   *!   @[INITIAL],
   *!   @[RUNNING],
   *!   @[PAUSED],
   *!   @[DONE],
   *!   @[WRITE_ERROR],
   *!   @[READ_ERROR] and
   *!   @[USER_ABORT]
   *!
  */
    optflags OPT_TRY_OPTIMIZE;
  {
    SHUFFLE_DEBUG2("state() --> %d\n", THIS, THIS->state );
    RETURN THIS->state;
  }

  static void _free_all_sources( struct Shuffle_struct *t, int dataref ) {
    struct source *sp = t->current_source;
    while (sp && (!dataref || (sp->eof && (sp->dataref == dataref)))) {
      struct source *n = sp->next;
      free_source( sp );
      sp = n;
    }
    t->current_source = sp;
  }

  INIT
  {
    THIS->shuffler = 0;
    THIS->throttler = 0;
    THIS->sent = 0;
    THIS->autopause = 0;
    SET_SVAL(THIS->done_callback, PIKE_T_INT, NUMBER_NUMBER, integer, 0);
    SET_SVAL(THIS->request_arg, PIKE_T_INT, NUMBER_NUMBER, integer, 0);
    THIS->current_source = NULL;
    THIS->file_obj = NULL;
    THIS->state = INITIAL;
    THIS->self = Pike_fp->current_object;
    THIS->iov = 0;
    THIS->iovfilled = 0;
    THIS->callback =
      find_identifier("send_more_callback",Pike_fp->current_object->prog);

    THIS->write_callback =
      find_identifier("write_callback",Pike_fp->current_object->prog);
    INIT_FD_CALLBACK_BOX(&THIS->box, NULL, Pike_fp->current_object, -1,
			 0, got_shuffler_event, 0);
    debug_malloc_touch(THIS->box.ref_obj);

    SHUFFLE_DEBUG1("init()\n", THIS );
  }

  EXIT
  {
    SHUFFLE_DEBUG1("exit()\n", THIS );

    restore_fdstate(THIS);
    take_fd(THIS);

    if (THIS->iov) {
      debug_malloc_touch(THIS->iov);
      free(THIS->iov);
    }
    if (THIS->file_obj) {
      debug_malloc_touch(THIS->file_obj);
      free_object(THIS->file_obj);
      THIS->file_obj = 0;
    }
    _free_all_sources(THIS, 0);
  }

  static void __send_more_callback( struct Shuffle_struct *t, int amount );
  static void _request( struct Shuffle_struct *t, int amount)
  {
    SHUFFLE_DEBUG3("_request(%d) from %p\n", t, amount, t->throttler );
    if( t->throttler && t->throttler->prog )
    {
      __remove_callbacks( t );
      debug_malloc_touch( t->throttler );
      debug_malloc_touch( t->box.ref_obj );
      ref_push_object( t->box.ref_obj );
      push_int( amount );
      ref_push_function( t->box.ref_obj, t->callback );
      push_svalue( &t->request_arg );
      safe_apply( t->throttler, "request", 4 );
      pop_stack();
    }
    else /* bypass the pike function calling for the case
  	* when no throttling is done
  	*/
      __send_more_callback( t, amount );
  }

  static void _send_more( struct Shuffle_struct *t )
  {
    int l = BLOCK;
    SHUFFLE_DEBUG2("_send_more(%d)\n", t, t->box.fd );
    _request( t, l );
  }

  static struct source *_lastactive_source(struct source* current_source)
  {
    struct source *n = current_source;
    while (n && n->eof) {
      current_source = n;
      n = n->next;
    }
    return current_source;
  }

  static struct source *_nextactive_source(struct source* current_source)
  {
    current_source = _lastactive_source(current_source);
    return current_source && current_source->eof
           ? current_source->next : current_source;
  }

  static void _set_callbacks(struct object *shuffle)
  {
    struct Shuffle_struct *t = (struct Shuffle_struct *)shuffle->storage;
    SHUFFLE_DEBUG1("_set_callbacks()\n", t );
    cur_setup_callbacks(_nextactive_source(t->current_source));
    __set_callbacks( t );
  }

  static void _remove_callbacks( struct Shuffle_struct *t )
  {
    SHUFFLE_DEBUG1("_remove_callbacks()\n",t );
    cur_remove_callbacks(_nextactive_source(t->current_source));
    __remove_callbacks( t );
  }

  static void zero_svalue(struct svalue *s) {
    free_svalue(s);
    SET_SVAL(*s, PIKE_T_INT, NUMBER_NUMBER, integer, 0);
  }

  static void call_done_callback(struct Shuffle_struct *t, int reason) {
    if (TYPEOF(t->done_callback) == PIKE_T_FUNCTION) {
      if (t->done_callback.u.object->prog) {	/* not destructed? */
        SHUFFLE_DEBUG3("_all_done(%d): Calling done callback: %p\n", t,
          	    reason, t->done_callback.u.object);
        push_svalue( &t->done_callback );
      
        if (t->state != PAUSED)
          /* Ensure us only calling the callback once. */
          zero_svalue(&t->done_callback);
      
        ref_push_object(t->box.ref_obj);
        push_int(reason);
      
        apply_svalue(Pike_sp-3, 2);
        pop_stack();
        pop_stack();
      }
    } else
      zero_svalue(&t->done_callback);
  }

  static void _all_done( struct Shuffle_struct *t, int reason )
  {
    SHUFFLE_DEBUG2("_all_done(%d)\n", t,reason );

    restore_fdstate(t);

    /* Remove our callbacks. */
    _remove_callbacks( t );

    /* We should set the reason for being done first of all */
    switch( reason )
    {
      case 0:
        if (t->autopause) {
          t->state = PAUSED;
          call_done_callback(t, reason);
          return;
        }
        t->state = DONE;
        break;
      case 1: t->state = WRITE_ERROR; break;
      case 2: t->state = USER_ABORT; break;
      case 3: t->state = READ_ERROR; break;
    }

    take_fd(t);

    /* It might have been destroyed. */
    if (t->shuffler && t->shuffler->prog) {
      debug_malloc_touch(t->box.ref_obj);
      ref_push_object(t->box.ref_obj);
      debug_malloc_touch(t->shuffler);
      safe_apply(t->shuffler, "___remove_shuffle", 1);
      pop_stack();
    }

    /* Destroy all our sources. */
    _free_all_sources(t, 0);

    /* If a callback exists, we call it at the end, because done_callback might
     * explicitly destruct this object. This happened in one of the testcases.
     * Calling done_callback at the end essentially reverts commit
     * 95865471b36a441ad345cd7f23fe7d3260578c2f.
     *	/arne
     */
    call_done_callback(t, reason);

    /* Destroy file_obj if any. */
    if (t->file_obj) {
      debug_malloc_touch(t->file_obj);
      free_object (t->file_obj);
      t->file_obj = 0;
    }
  }

  PIKEFUN void set_done_callback( function(object, int:void)|zero cb )
   /*! @decl void set_done_callback( function(Shuffle,int:void) cb )
    *! Sets the done callback. This function will be called when all
    *! sources have been processed, or if an error occurs.
    *!
    */
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG2("set_done_callback(%p)\n", THIS, cb?cb->u.object:NULL  );
    if (!cb) {
      push_undefined();
      cb = Pike_sp-1;
    }
    assign_svalue( &THIS->done_callback,cb);
  }

  PIKEFUN void set_request_arg( mixed arg )
   /*! @decl void set_request_arg( mixed arg )
    *!
    *! Sets the extra argument sent to @[Throttler()->request()] and
    *! @[Throttler()->give_back].
    *!
    */
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG2("set_request_arg(%p)\n", THIS, arg->u.object );
    assign_svalue( &THIS->request_arg, arg );
  }

  static void _give_back( struct Shuffle_struct *t, int amount )
  {
    SHUFFLE_DEBUG2("_give_back(%d)\n", t, amount );
    if( t->throttler && t->throttler->prog )
    {
      ref_push_object( t->box.ref_obj );
      debug_malloc_touch( t->box.ref_obj );
      debug_malloc_touch( t->throttler );
      push_int( amount );
      push_svalue( &t->request_arg );
      safe_apply( t->throttler, "give_back", 3 );
      pop_stack();
    }
  }

  static void allocmore_iov(struct Shuffle_struct*t) {
    if (t->iovfilled >= t->iovalloc) {
      t->iov = xrealloc(t->iov, (t->iovalloc <<= 1) * sizeof(*t->iov));
      debug_malloc_touch(t->iov);
    }
  }

  static int
   add_to_iov(struct Shuffle_struct*t, char*ptr, int len, int amount) {
    int reslen;
    struct iovec *iov;
    allocmore_iov(t);
    iov = t->iov;
    if (amount)
      t->iovamount = t->iovfilled;
    else
      amount = len;
    reslen = MINIMUM(len, amount);
    iov[t->iovfilled].iov_base = ptr;
    amount -= iov[t->iovfilled].iov_len = reslen;
    t->iovfilled++;
    len -= reslen;
    if (len)
      return add_to_iov(t, ptr + reslen, len, 0);
    return amount;
  }

  static struct pike_string *get_wrapstring(struct source *s, int index) {
    struct svalue *wrap_ar = &s->wrap_array;
    struct pike_string *res = 0;
    struct array *v;

    if (TYPEOF(*wrap_ar) == PIKE_T_ARRAY
     && index < (v = wrap_ar->u.array)->size) {
      struct svalue *sv = ITEM(v) + index;
      if (TYPEOF (*sv) == T_STRING) {
        res = sv->u.string;
        if (res->size_shift || !res->len)
          res = 0;
      }
    }
    return res;
  }

  static void __send_more_callback( struct Shuffle_struct *t, int amount )
  {
    struct source *cursource = t->current_source;
    int reason = -2;
    SHUFFLE_DEBUG2("__send_more_callback(%d)\n", t, amount );
    do {		/* Outer loop, start over as long as amount > 0 */
      int sent, amntleft = amount;
      struct iovec *iov;

      t->iovamount = -1;
      for (;;) {		/* Inner loop source collection */
        struct data leftovers;
        if (amntleft) {
          if (t->iovamount + 1 < t->iovfilled) {
            int iova = ++t->iovamount;
            int len;
            amntleft -= t->iov[iova].iov_len;
            if (amntleft >= 0)
              continue;
            allocmore_iov(t);
            memmove(t->iov + iova + 2, t->iov + iova + 1,
                    (t->iovfilled++ - iova - 1) * sizeof(*t->iov));
            len = t->iov[iova].iov_len += amntleft;
            t->iov[iova + 1].iov_base = ((char *)t->iov[iova].iov_base) + len;
            t->iov[iova + 1].iov_len = -amntleft;
            {
              struct source *sp;
              iova++;
              /* Adjust dataref entries to account for moved iov part */
              for (sp = cursource; sp; sp = sp->next)
                if (iova >= sp->dataref)
                  sp->dataref++;
            }
            break;
          }
        } else
          break;
      
        cursource = _lastactive_source(cursource);

        if (cursource && cursource->eof) {
          cursource = cursource->next;
          cur_setup_callbacks(cursource);	  // FIXME setup too often?
        }
      
        if (t->iovfilled && cursource && cursource->dataref == t->iovfilled)
          break;			/* Still working on the current source */
      
        if (!cursource) {
          SHUFFLE_DEBUG1("__send_more_callback(): no sources\n", t );
          break;
        }
      
        /* The length argument to get_data is a guideline, the callee can
         * ignore it if so desired and return more data.
         */
        leftovers = cursource->get_data(cursource, amntleft);
      
        if (cursource->eof) {
          cur_remove_callbacks(cursource);  // FIXME removed too often?
          if (leftovers.len == -2)
            leftovers.len = 0;	/* force eof recognition */
        }
        if (leftovers.len == -2) {
          /* come back later (nonblocking source without more data to read) */
          SHUFFLE_DEBUG1("__send_more_callback(): read pending\n", t );
          __remove_callbacks( t );
          cursource->set_callback(cursource,
          				(void *)_set_callbacks,
                        /* Shuffler */    t->self);
          reason = -1;
          break;
        } else if (leftovers.len < 0) {
          SHUFFLE_DEBUG1("__send_more_callback(): read error\n", t );
          /* read error */
          reason = 3;
          break;
        }
      
        if (t->skip >= leftovers.len) {
          t->skip -= leftovers.len;
          continue;
        }
        leftovers.data += t->skip;
        leftovers.len -= t->skip;
        t->skip = 0;
        if (t->left >= 0) {
          if (!t->left) {
            reason = 1;
            break;
          }
          if (t->left < leftovers.len)
            leftovers.len = t->left;
          t->left -= leftovers.len;
        }
        if (TYPEOF(cursource->wrap_callback) == PIKE_T_FUNCTION) {
          SHUFFLE_DEBUG2("_wrap: Calling wrap callback: %p\n", t,
                         cursource->wrap_callback.u.object);
          ref_push_object(t->box.ref_obj);
          push_int(leftovers.len);
          apply_svalue(&cursource->wrap_callback, 2);
          assign_svalue(&cursource->wrap_array, Pike_sp - 1);
          pop_stack();
        }
        {
          struct pike_string *wrap;
          SHUFFLE_DEBUG2("__send_more_callback(): sending(%d)\n", t, amntleft);
      
          if ((wrap = get_wrapstring(cursource, 0)))
            amntleft = add_to_iov(t, wrap->str, wrap->len, amntleft);
          amntleft = add_to_iov(t, leftovers.data, leftovers.len, amntleft);
          cursource->dataref = t->iovfilled;
          if ((wrap = get_wrapstring(cursource, 1))) {
            amntleft = add_to_iov(t, wrap->str, wrap->len, amntleft);
            cursource->dataref = t->iovfilled;
          }
        }
      }
      
      /* Now it's time to actually send the data. */
      if (++t->iovamount) {
        iov = t->iov;
        sent = -1;
        if (t->box.fd >= 0) {
          THREADS_ALLOW();
          sent = fd_writev(t->box.fd, iov, t->iovamount);
          THREADS_DISALLOW();
          if (sent < 0 && (errno == EAGAIN || errno == EINTR))
            break;
        } else if (t->file_obj) {
          int i;
          for (i = 0; i < t->iovamount; i++) {
            int wret, len;
            struct pike_string *s =
             make_shared_binary_string(iov[i].iov_base, len = iov[i].iov_len);
            push_string(s);
            apply (t->file_obj, "write", 1);
            if (TYPEOF(Pike_sp[-1]) == PIKE_T_INT)
              wret = Pike_sp[-1].u.integer;
            else {
              SHUFFLE_DEBUG2(
                       "Oops: write returned object of type %d, not integer\n",
              	       t, TYPEOF(Pike_sp[-1]) );
              wret = len;
            }
            pop_stack();
            SHUFFLE_DEBUG3("__send_more_callback(): sending(%d): sent %d\n", t,
            	       MINIMUM(leftovers.len,amount),sent );
            if (wret < 0)
              break;
            if (sent < 0)
              sent = 0;
            sent += wret;
            if (wret < len)
              break;
          }
        }
        if (sent < 0) {
          reason = 1;
          break;
        } else if (sent) {
          int i;
          amount -= sent;
          for (i = 0; i < t->iovamount; ) {
            int n = iov[i].iov_len;
            if (sent < n)
              n = sent;
            sent -= n;
            if (!sent) {
              iov[i].iov_len -= n;
              iov[i].iov_base = ((char *)iov[i].iov_base) + n;
              break;
            }
            _free_all_sources(t, ++i);
          }
          if (!iov[i].iov_len)
            _free_all_sources(t, ++i);
          memmove(iov, iov + i, (t->iovfilled - i) * sizeof(*iov));
          t->iovfilled -= i;
          {
            struct source *sp;
            for (sp = t->current_source; sp; sp = sp->next)
              sp->dataref -= i;
          }
        }
      } else if (!cursource && !(cursource = _nextactive_source(t->current_source)))
        reason = 0;
    } while (reason < -1 && amount);
      
    if (amount)
      _give_back( t, amount );
    if (reason >= 0)
      _all_done( t, reason );
  }

  /* internal use.. */
  PIKEFUN void send_more_callback( int amount )
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG2("send_more_callback(%d)\n", THIS,amount );
    if( THIS->state == RUNNING )
    {
      __set_callbacks( THIS );
      __send_more_callback( THIS, amount );
    }
    else
      _give_back( THIS, amount );
  }

  /* internal use.. */
  PIKEFUN void write_callback( mixed|void x )
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG1("write_callback()\n", THIS );
    _send_more( THIS );
  }

  /*! @decl void create(object fd, object shuffler, mixed throttler,@
   *!                   mixed backend, void|int start, void|int length)
   *!
   *! This object is normally not created directly, instead use
   *! @[Shuffler()->shuffle]
   */
  PIKEFUN void create( object fd,
		       object shuffler,
		       mixed throttler,
		       mixed backend,
                       void|int|object start,
                       void|int|object length )
    flags ID_PROTECTED;
  {
    struct Backend_struct *be = default_backend;

    if( args < 4 || args > 6
     || !shuffler || !get_storage( shuffler, Shuffler_program ) )
      Pike_error("This class cannot be instantiated directly\n");

    THIS->file_obj = fd;
    add_ref(THIS->file_obj);

    THIS->shuffler = shuffler;
    add_ref(THIS->shuffler);

    if( TYPEOF(*throttler) == PIKE_T_OBJECT )
    {
      THIS->throttler = throttler->u.object;
      add_ref(THIS->throttler);
    }

    THIS->iov = xalloc((THIS->iovalloc = 16) * sizeof(*THIS->iov));
    debug_malloc_touch(THIS->iov);

    if (start) {
      if (TYPEOF(*start) == PIKE_T_OBJECT)
	int64_from_bignum( &THIS->skip, start->u.object );
      else if (TYPEOF(*start) == PIKE_T_INT && !SUBTYPEOF(*start))
        THIS->skip = start->u.integer;
    } else
      THIS->skip = 0;
    if (length) {
      if (TYPEOF(*length) == PIKE_T_OBJECT )
	int64_from_bignum( &THIS->left, length->u.object );
      else if (TYPEOF(*length) == PIKE_T_INT && !SUBTYPEOF(*length))
        THIS->left = length->u.integer;
    } else
      THIS->left = -1;

    if (find_identifier("query_fd", fd->prog) < 0)
      change_fd_for_box(&THIS->box, -1);
    else {
      int dupedfd;
      safe_apply( fd, "query_fd", 0 );
      args++;
      if(TYPEOF(*backend) == PIKE_T_OBJECT && backend->u.object) {
        be = get_storage(backend->u.object, Backend_program);
	if (!be) {
          SIMPLE_ARG_TYPE_ERROR("Shuffle->create", 4,
                                "object(Pike.__Backend)");
	}
      }
      dupedfd = fd_dup(Pike_sp[-1].u.integer);
      if (dupedfd < 0)
        Pike_error("Out of filedescriptors.");
      change_fd_for_box(&THIS->box, dupedfd);
    }

    if( THIS->box.fd >= 0 )
    {
      set_nonblocking( THIS->box.fd, 1 );
      if(THIS->box.backend) {
	/* FIXME: Ought to change backend to be here. */
        set_fd_callback_events(&THIS->box, 0, 0);
      } else
        INIT_FD_CALLBACK_BOX(&THIS->box, be, THIS->box.ref_obj,
         THIS->box.fd, 0, got_shuffler_event, 0);
    }
    else
    {
      safe_apply( THIS->file_obj, "set_nonblocking_keep_callbacks", 0 );
      args++;
    }
    pop_n_elems(args);
  }

  PIKEFUN void start(void|int autopause, void|int freerun)
   /*! @decl void start(void|int autopause, void|int freerun);
    *! Start sending data from the sources.
    *!
    *! @param autopause
    *! If true, automatically pause the shuffler when all sources
    *! have been consumed.  Everytime this happens, the @[done_callback]
    *! will ben called.
    *!
    *! @param freerun
    *! If true, do not attempt to coalesce output by using bulkmode.
    */
    optflags OPT_SIDE_EFFECT;
  {
    if( !THIS->file_obj )
      Pike_error("Cannot start, no destination.\n");
    THIS->autopause = autopause && autopause->u.integer;
    THIS->oldbulkmode = freerun && freerun->u.integer ? -1 : 0;
    THIS->state = RUNNING;
    SHUFFLE_DEBUG1("start()\n", THIS );
    set_fdstate(THIS);
    _set_callbacks(THIS->self);  /* Shuffle */
  }

  PIKEFUN void pause()
   /*! @decl void pause();
    *! Temporarily pause all data transmission
    *!
    */
    optflags OPT_SIDE_EFFECT;
  {
    THIS->state = PAUSED;
    SHUFFLE_DEBUG1("pause()\n", THIS );
    _remove_callbacks( THIS );
  }

  PIKEFUN void stop()
   /*! @decl void stop();
    *! Stop all data transmission, and then call the done callback
    *!
    */
    optflags OPT_SIDE_EFFECT;
  {
    SHUFFLE_DEBUG1("stop()\n", THIS );
    _all_done( THIS, 2 );
  }

  static void low_add_source(struct Shuffle_struct *this,
    struct svalue *source, struct svalue *wrap_cb, INT64 rstart, INT64 rlength)
  {
    if (TYPEOF(*source) == PIKE_T_ARRAY) {
      struct array *argp = source->u.array;
      INT_TYPE i;
      DECLARE_CYCLIC();

      if (BEGIN_CYCLIC(this, argp))
        Pike_error("Attempt to add a cyclic array to a shuffler.\n");

      for(i=0; i < argp->size; i++ )
        low_add_source(this, argp->item+i, wrap_cb, 0, -1);

      END_CYCLIC();
    } else {
      struct source *res;

      debug_malloc_touch( source );

      res = source_make( source, rstart, rlength );

      if( !res )
        Pike_error("Failed to convert argument to a source\n");

      mark_free_svalue(&res->wrap_callback);
      mark_free_svalue(&res->wrap_array);

      debug_malloc_touch( res );

      SHUFFLE_DEBUG4("add_source(XX,%d,%d) --> %p\n", this,
          	  (int)rstart, (int)rlength, res );
      if (wrap_cb)
        assign_svalue(&res->wrap_callback, wrap_cb);

      res->next = NULL;
      if( this->current_source )
      {
        this->last_source->next = res;
        this->last_source = res;
      }
      else
        this->current_source = this->last_source = res;
    }
  }

  PIKEFUN void add_source(mixed source,
			  int|object|function(object, int:array(string)|zero)|
			  void start, int|object|void length)
   /*! @decl void add_source( mixed source, int|void start, int|void length );
    *! @decl void add_source( mixed source, @
    *!                        function(Shuffle, int:array(string)|zero) wrap_cb );
    *! @decl void add_source( array source);
    *! @decl void add_source( array source, @
    *!                        function(Shuffle, int:array(string)|zero) wrap_cb );
    *! Add a new source to the list of data sources.
    *! The data from the sources will be sent in order.
    *!
    *! If start and length are not specified, the whole source will be
    *! sent, if start but not length is specified, the whole source,
    *! excluding the first @[start] bytes will be sent.
    *!
    *! Currently supported sources
    *! @dl
    *!   @item int
    *!     An ordinary 8-bit wide byte.
    *!   @item string
    *!     An ordinary 8-bit wide pike string.
    *!   @item System.Memory
    *!     An initialized instance of the System.Memory class.
    *!   @item Stdio.Buffer
    *!     A Stdio.Buffer object which will be called once
    *!     with read_buffer() to acquire the data.
    *!   @item Stdio.File
    *!     Stdio.File instance pointing to a normal file.
    *!   @item Stdio.Stream
    *!     Stdio.File instance pointing to a stream of some kind
    *!     (network socket, named pipe, stdin etc). Blocking or nonblocking.
    *!   @item Stdio.NonblockingStream|Stdio.Stream
    *!     An object implementing the callback based reading
    *!     (set_read_callback and set_close_callback).
    *!   @item array
    *!     An array of any of the supported sources.  Note that neither
    *!     @[start] nor @[length] can be specified then.
    *! @enddl
    */
    optflags OPT_SIDE_EFFECT;
  {
    INT64 rstart = 0, rlength = -1;
    struct svalue *wrap_cb = 0;

    if( !THIS->file_obj )
      Pike_error("Cannot add source, no destination.\n");

    if (start)
      switch (TYPEOF(*start)) {
        case PIKE_T_FUNCTION:
          wrap_cb = start;
          break;
        case PIKE_T_OBJECT:
	  int64_from_bignum(&rstart, start->u.object);
          break;
        case PIKE_T_INT:
          if (!SUBTYPEOF(*start))
            rstart = start->u.integer;
          break;
      }
    if (length) {
      switch (TYPEOF(*length)) {
        case PIKE_T_OBJECT:
	  int64_from_bignum( &rlength, length->u.object );
          break;
        case PIKE_T_INT:
          if (!SUBTYPEOF(*length))
            rlength = length->u.integer;
          break;
      }

      if (!rlength)
        return;
    }

    if (TYPEOF(*source) == PIKE_T_ARRAY && ((start && !wrap_cb) || length))
      Pike_error(
       "An array source does not support start or length arguments.\n");

    low_add_source(THIS, source, wrap_cb, rstart, rlength);
  }
}

/*! @endclass
 */

/*! @class Shuffler
 *!
 *! A data shuffler. An instance of this class handles a list of
 *! @[Shuffle] objects. Each @[Shuffle] object can send data from one
 *! or more sources to a destination in the background.
 *!
 */

PIKECLASS Shuffler
{
  PIKEVAR object backend;
  PIKEVAR object throttler;

  PIKEVAR multiset shuffles;

  PIKEFUN void set_backend( object b )
    /*! @decl void set_backend( Pike.Backend b );
     *! Set the backend that will be used by all @[Shuffle] objects created
     *! from this shuffler.
     *!
     */
  {
    if( THIS->backend )
      free_object( THIS->backend );
    THIS->backend = b;
    debug_malloc_touch( THIS->backend );
    Pike_sp--;
  }

  PIKEFUN void set_throttler( object|void t )
    /*! @decl void set_throttler( Throttler t );
     *! Set the throttler that will be used in all @[Shuffle] objects
     *! created from this shuffler, unless overridden in the
     *! @[Shuffle] objects.
     *!
     */
  {
    if( THIS->throttler )
      free_object( THIS->throttler );
    debug_malloc_pass( THIS->throttler = t );
    Pike_sp--;
  }

  PIKEFUN void pause()
    /*! @decl void pause();
     *! Pause all @[Shuffle] objects associated with this @[Shuffler]
     *!
     */
  {
    ptrdiff_t p = multiset_first(THIS->shuffles);
    for (; p >= 0; p = multiset_next(THIS->shuffles, p)) {
      struct svalue shuf;
      struct Shuffle_struct *s;
      use_multiset_index(THIS->shuffles, p, shuf);
      s = (struct Shuffle_struct *)shuf.u.object->storage;
      if( s->state == RUNNING )
	_remove_callbacks(s);
    }
  }

  PIKEFUN void start()
    /*! @decl void start();
     *! Unpause all @[Shuffle] objects associated with this @[Shuffler]
     *!
     */
  {
    ptrdiff_t p = multiset_first(THIS->shuffles);
    for (; p >= 0; p = multiset_next(THIS->shuffles, p)) {
      struct svalue shuf;
      struct Shuffle_struct *s;
      use_multiset_index(THIS->shuffles, p, shuf);
      s = (struct Shuffle_struct *)shuf.u.object->storage;
      if( s->state == RUNNING )
	_set_callbacks(s->self);   /* Shuffle */
    }
  }

  PIKEFUN void ___remove_shuffle( object so )
  {
    multiset_delete(THIS->shuffles, Pike_sp - 1);
    pop_stack();
  }

  PIKEFUN object
    shuffle(object destination, int|object|void start, int|object|void length)
    /*! @decl Shuffle shuffle(Stdio.NonblockingStream destination, @
     *!                       int|void start, int|void length);
     *! Create a new @[Shuffle] object.
     *!
     *! The destination has to support nonblocking I/O
     *! through @[set_nonblocking_keep_callbacks] and @[set_write_callback]
     *! member functions.
     *!
     *! @note
     *!  For destinations that connect directly to a kernel-filedescriptor
     *!  please note that the filedescriptor will be dup()ed for the duration
     *!  of the shuffle.  This means that if the original destination object
     *!  is kept, we temporarily use two filedescriptors for it.
     */
  {
    struct svalue cstart, clength;
    switch (args) {
      case 3:
        clength = *--Pike_sp;
        /* FALL THROUGH */
      case 2:
        cstart = *--Pike_sp;
        /* FALL THROUGH */
    }
    ref_push_object( Pike_fp->current_object ); /* shuffler */
    if( THIS->throttler )
      ref_push_object( THIS->throttler );
    else
      push_int( 0 );
    if( THIS->backend )
      ref_push_object( THIS->backend );
    else
      push_int( 0 );
    switch (args) {
      case 3:
        *Pike_sp++ = cstart;
        *Pike_sp++ = clength;
        break;
      case 2:
        *Pike_sp++ = cstart;
        /* FALL THROUGH */
    }
    push_object(clone_object(Shuffle_program, 3 + args));
    multiset_insert(THIS->shuffles, Pike_sp - 1);
  }

  INIT
  {
    THIS->shuffles = allocate_multiset (0, 0, NULL);
  }
}

/*! @endclass
 */

/*! @decl constant INITIAL;
 *! @decl constant RUNNING;
 *! @decl constant PAUSED;
 *! @decl constant DONE;
 *! @decl constant WRITE_ERROR;
 *! @decl constant READ_ERROR;
 *! @decl constant USER_ABORT;
 *!  The state of an individual @[Shuffle] object.
 */

/*! @endmodule
 */

PIKE_MODULE_INIT
{
  INIT;
  sources_init();
  add_integer_constant( "INITIAL", INITIAL, 0 );
  add_integer_constant( "RUNNING", RUNNING, 0 );
  add_integer_constant( "PAUSED", PAUSED, 0 );
  add_integer_constant( "DONE", DONE, 0 );
  add_integer_constant( "WRITE_ERROR", WRITE_ERROR, 0 );
  add_integer_constant( "READ_ERROR", READ_ERROR, 0 );
  add_integer_constant( "USER_ABORT", USER_ABORT, 0 );
}

PIKE_MODULE_EXIT
{
  EXIT;
  sources_exit();
}
