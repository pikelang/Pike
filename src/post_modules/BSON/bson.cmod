/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#define _GNU_SOURCE

#include "bson_config.h"

#include "global.h"

#if HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif /* HAVE_ARPA_INET_H */

#if HAVE_WINSOCK2_H
#include <Winsock2.h>
#endif /* HAVE_WINSOCK2_H */

/* Standard Pike include files. */
#include "bignum.h"
#include "array.h"
#include "builtin_functions.h"
#include "constants.h"
#include "interpret.h"
#include "mapping.h"
#include "module_support.h"
#include "bitvector.h"
#include "object.h"
#include "pike_macros.h"
#include "pike_types.h"
#include "program.h"
#include "stralloc.h"
#include "svalue.h"
#include "version.h"
#include "operators.h"
#include "sscanf.h"

#include "modules/_Stdio/buffer.h"

#define DEFAULT_CMOD_STORAGE static

/*! @module Standards
 */

/*! @module _BSON
 */

#define TYPE_BSON_DOUBLE    0x01
#define TYPE_BSON_STRING    0x02
#define TYPE_BSON_DOCUMENT  0x03
#define TYPE_BSON_ARRAY     0x04
#define TYPE_BSON_BINARY    0x05
#define TYPE_BSON_UNDEFINED 0x06 /* deprecated */
#define TYPE_BSON_OBJECTID  0x07
#define TYPE_BSON_BOOLEAN   0x08
#define TYPE_BSON_SECOND    0x09
#define TYPE_BSON_NULL      0x0a
#define TYPE_BSON_REGEX     0x0b
#define TYPE_BSON_DBPTR     0x0c /* deprecated */
#define TYPE_BSON_JS        0x0d
#define TYPE_BSON_SYMBOL    0x0e /* deprecated */
#define TYPE_BSON_JS_W_C    0x0f
#define TYPE_BSON_INTEGER   0x10
#define TYPE_BSON_TIMESTAMP 0x11
#define TYPE_BSON_INTEGER64 0x12
#define TYPE_BSON_DECIMAL128 0x13 /* not supported */

#define TYPE_BSON_MINKEY 0xff
#define TYPE_BSON_MAXKEY 0x7f

struct object * True;
struct object * False;
struct object * Null;
struct object * MinKey;
struct object * MaxKey;

struct program * Javascript;
struct svalue * Second;
struct program * ObjectId;
struct program * Binary;
struct program * Symbol;
struct program * Regex;
struct program * Timestamp;

struct svalue low_Second;

const char *decode_next_value(const char *, const char *, struct mapping *);

struct object * lookup_object(const char * obj)
{
  struct object * p;
  push_text(obj);
  SAFE_APPLY_MASTER("resolv", 1 );
  if(TYPEOF(Pike_sp[-1]) != T_OBJECT)
  {
    Pike_error("Unable to load object.\n");
  }

  p = Pike_sp[-1].u.object;
  add_ref(p);
  pop_stack();
  return p;
}

struct program * lookup_program(const char * prog)
{
  struct program * p;
  push_text(prog);
  SAFE_APPLY_MASTER("resolv", 1 );
  if(TYPEOF(Pike_sp[-1]) != T_PROGRAM)
  {
    Pike_error("Unable to load class %s.\n", prog);
  }

  p = Pike_sp[-1].u.program;
  add_ref(p);
  pop_stack();
  return p;
}

struct svalue * lookup_svalue(const char * prog)
{
  push_text(prog);
  SAFE_APPLY_MASTER("resolv", 1 );
  if(TYPEOF(Pike_sp[-1]) == PIKE_T_INT)
  {
    Pike_error("Unable to load class %s.\n", prog);
  }

  assign_svalue(&low_Second, Pike_sp-1);
  pop_stack();
  return &low_Second;
}

DECLARATIONS

#define CHECK_LENGTH(N) do {                    \
    size_t n = (size_t)(N);                     \
    size_t left = (size_t)(src_end - src);      \
    if (n > INT_MAX || left < n)                \
      goto BAD_LENGTH;                          \
} while(0)

const char *decode_document(const char *src, const char *src_end)
{
  INT32 len;
  const char * end;
  struct mapping * list;

  check_c_stack (8);

  CHECK_LENGTH(4);

  len = get_unaligned_le32(src);
  CHECK_LENGTH(len);
  end = src + (len - 1);
  src += 4;

  if((char)*end != 0x0)
    Pike_error("invalid BSON, last byte of document must be NULL.\n");

  list = allocate_mapping(2);
  push_mapping(list);

  while(src < end)
    src = decode_next_value(src, end, list);

  return end + 1;
  BAD_LENGTH:
  Pike_error("Invalid BSON: Not enought data.\n");
}

const char * decode_next_value(const char * src, const char * src_end, struct mapping * list)
{
  unsigned INT8 type;
  const char * cname;
  INT32 name_len;

  CHECK_LENGTH(1);
  type = src[0];
  src++;

  /* guaranteed by spec to be a null terminated string. 
   * And we know that there is a null at the end of our document
   * which means we can safely call strlen here. */
  cname = src;
  name_len = strlen(cname);

  CHECK_LENGTH(name_len + 1);
  src += name_len + 1;

  switch(type)
  {
    case TYPE_BSON_DOUBLE:
    {
      struct pike_string * fstr;
      struct array * a;
      CHECK_LENGTH(8);
      fstr = make_shared_binary_string(src, 8);
      push_string(fstr);
      push_static_text("%-8F");
      f_sscanf(2);
      if(TYPEOF(Pike_sp[-1]) != PIKE_T_ARRAY)
        Pike_error("Unable to parse float.\n");
      a = Pike_sp[-1].u.array;
      push_svalue(ITEM(a));
      stack_swap();
      pop_stack();
      src+=8;
      break;
    }

    case TYPE_BSON_STRING:
    {
      INT32 bump;

      CHECK_LENGTH(4);

      bump = get_unaligned_le32(src);
      src+=4;

      if (bump == 0)
        Pike_error("Invalid BSON: string length zero.\n");
      CHECK_LENGTH(bump);
      push_string( make_shared_binary_string(src, bump-1) ); /* length includes null. */
      src += (bump);
      f_utf8_to_string(1);
      break;
    }

    case TYPE_BSON_BINARY:
    {
      INT32 bump;
      unsigned INT8 subtype;

      CHECK_LENGTH(5);

      bump = get_unaligned_le32(src);
      src+=4;
      subtype = *(unsigned INT8*)src;
      src++;

      CHECK_LENGTH(bump);

      if (!Binary)
	Binary = lookup_program("Standards.BSON.Binary");

      ref_push_program(Binary);
      push_string( make_shared_binary_string(src, bump) );
      push_int(subtype);
      apply_svalue(Pike_sp - 3, 2);
      stack_swap();
      pop_stack();

      src += (bump);

      break;
    }

    case TYPE_BSON_INTEGER:
    {
      CHECK_LENGTH(4);
      push_int( (INT32)get_unaligned_le32(src) );
      src+=4;
      break;
    }

    case TYPE_BSON_INTEGER64:
    {
      CHECK_LENGTH(8);
      push_int64( (INT64)get_unaligned_le64(src) );
      src+=8;
      break;
    }

    case TYPE_BSON_BOOLEAN:
    {
      INT8 t;
      CHECK_LENGTH(1);
      t = src[0];
      src++;
      if(t == 1) /* true */
      {
        if(!True)
          True = lookup_object("Val.true");
        ref_push_object(True);
      }
      else if(t ==0) /* false */
      {
        if(!False)
          False = lookup_object("Val.false");
        ref_push_object(False);
      }
      else
      {
        Pike_error("Invalid value of boolean field.\n");
      }
      break;
    }

    case TYPE_BSON_MINKEY:
    {
      if(!MinKey)
        MinKey = lookup_object("Standards.BSON.MinKey");
      ref_push_object(MinKey);
      break;
    }

    case TYPE_BSON_MAXKEY:
    {
      if(!MaxKey)
        MaxKey = lookup_object("Standards.BSON.MaxKey");
      ref_push_object(MaxKey);
      break;
    }

    case TYPE_BSON_NULL:
    {
      if(!Null)
        Null = lookup_object("Val.null");
      ref_push_object(Null);
      break;
    }

    case TYPE_BSON_OBJECTID:
    {
      struct pike_string * str;

      CHECK_LENGTH(12);
      str = make_shared_binary_string(src, 12);
      src+=12;
      if(!ObjectId)
        ObjectId = lookup_program("Standards.BSON.ObjectId");
      ref_push_program(ObjectId);
      push_string(str);
      apply_svalue( Pike_sp-2, 1 );
      stack_swap();
      pop_stack();
      break;
    }

    case TYPE_BSON_TIMESTAMP:
    {
      CHECK_LENGTH(8);
      if(!Timestamp)
	Timestamp = lookup_program("Standards.BSON.Timestamp");
      ref_push_program(Timestamp);
      /* counter */
      push_int64( get_unaligned_le32(src) );
      src+=4;
      /* timestamp */
      push_int64( get_unaligned_le32(src) );
      src+=4;

     apply_svalue( Pike_sp-3, 2);
     stack_swap();
     pop_stack();
     break;
    }

    case TYPE_BSON_SECOND:
    {
      INT64 sec;
      CHECK_LENGTH(8);
      if(!Second)
        Second = lookup_svalue("Calendar.Second");
      push_static_text("unix");
      sec = get_unaligned_le64(src);
      push_int64(sec/1000);
      src+=8;
      apply_svalue(Second, 2);
      break;
    }

    case TYPE_BSON_ARRAY:
    {
      struct array * arr;
      INT_TYPE asize;
      /* used by NEW_MAPPING_LOOP */
      const struct keypair *k=0;
      const struct mapping_data *md;
      INT32 e;

      src = decode_document(src, src_end);

      /*
       * arrays are encoded as mappings with indices containing
       * string representations of the index number.
       */

      asize = m_sizeof(Pike_sp[-1].u.mapping);
      arr = allocate_array(asize);
      md = Pike_sp[-1].u.mapping->data;

      push_array(arr);
      stack_swap();

      NEW_MAPPING_LOOP(md)
      {
        INT_TYPE i;
        push_svalue(&k->ind);
        o_cast_to_int();
        i = Pike_sp[-1].u.integer;
        if (i < 0 || i >= asize)
            Pike_error("Invalid BSON. Array index out of bounds.\n");
        pop_stack();
	assign_svalue(ITEM(arr) + i, &k->val);
      }

      /* pop the document off the stack */
      pop_stack();
      break;
    }

    case TYPE_BSON_DOCUMENT:
    {
      src = decode_document(src, src_end);
      break;
    }

    case TYPE_BSON_REGEX:
    {
      const char * reg;
      const char * opt;

      reg = (src);
      CHECK_LENGTH(strlen(reg) + 1);
      src += strlen(reg) + 1;

      opt = (src);
      CHECK_LENGTH(strlen(opt) + 1);
      src += strlen(opt) + 1;

      if(!Regex)
        Regex = lookup_program("Standards.BSON.Regex");

      ref_push_program(Regex);
      push_text(reg);
      push_text(opt);

      apply_svalue( Pike_sp-3, 2);
      stack_swap();
      pop_stack();

      break;
    }

    case TYPE_BSON_JS:
    {
      struct pike_string * val;
      INT32 bump;
      CHECK_LENGTH(4);
      bump = get_unaligned_le32(src);
      src+=4;
      if (bump <= 0)
        Pike_error("Invalid BSON: javascript length zero.\n");
      CHECK_LENGTH(bump);
      val = make_shared_binary_string(src, bump-1); /* length includes null. */
      src += (bump);

      if(!Javascript)
        Javascript = lookup_program("Standards.BSON.Javascript");

      ref_push_program(Javascript);
      push_string(val);
      f_utf8_to_string(1);

      apply_svalue( Pike_sp-2, 1);
      stack_swap();
      pop_stack();

      break;
    }

    case TYPE_BSON_JS_W_C:
    {
      struct pike_string * val;
      INT32 len, jslen;
      const char * internal_src_end;

      CHECK_LENGTH(4);

      len = get_unaligned_le32(src);
      CHECK_LENGTH(len);
      internal_src_end = src + len;
      src += 4;
      CHECK_LENGTH(4);
      jslen = get_unaligned_le32(src);
      src += 4;
      if( len<0 || jslen<1 || jslen > len-8 )
        Pike_error("Invalid BSON. Not enough data 2.\n");

      val = make_shared_binary_string(src, jslen-1); /* length includes null. */
      src += jslen;

      if(!Javascript)
        Javascript = lookup_program("Standards.BSON.Javascript");

      ref_push_program(Javascript);
      push_string(val);
      f_utf8_to_string(1);

      decode_document(src, internal_src_end);
      src = internal_src_end;

      apply_svalue( Pike_sp-3, 2);
      stack_swap();
      pop_stack();

      break;
    }

    default:
      Pike_error("Unknown field type 0x%02x.\n", type);
  }

  push_string( make_shared_binary_string(cname, name_len) );

  f_utf8_to_string(1);
  mapping_insert(list, Pike_sp-1, Pike_sp-2);
  pop_stack();
  pop_stack();

  return src;
  BAD_LENGTH:
  Pike_error("Invalid BSON: Not enough data.\n");
}

#undef CHECK_LENGTH

/*! @decl mapping decode(string(8bit) document)
 */
PIKEFUN mapping decode(string(8bit) document)
{
  const char *src = document->str;
  const char *src_end = src + document->len;

  if(document->size_shift)
    Pike_error("wide strings are not allowed.\n");

  decode_document(src, src_end);
}

/*! @decl mapping decode(Stdio.Buffer document)
 */
PIKEFUN mapping decode(Stdio.Buffer document)
  rawtype tFunc(tObjIs_STDIO_BUFFER, tMapping);
{
  Buffer *io = io_buffer_from_object(document);
  const char *src, *src_end;
  if (!io) SIMPLE_ARG_TYPE_ERROR("decode_from", 1, "object(Stdio.Buffer)");
  src = (const char*)io_read_pointer(io);
  src_end = decode_document(src, src + io_len(io));
  io_consume(io, src_end - src);
}

PIKE_MODULE_INIT
{
  INIT;

  // We could initialize these to their real values for some minimal
  // runtime performance gain.
  True = NULL;
  False = NULL;
  Null = NULL;
  MinKey = NULL;
  MaxKey = NULL;
  Javascript = NULL;
  Second = NULL;
  ObjectId = NULL;
  Binary = NULL;
  Symbol = NULL;
  Regex = NULL;
  Timestamp = NULL;
}

PIKE_MODULE_EXIT
{
  if( True ) free_object(True);
  if( False ) free_object(False);
  if( Null ) free_object(Null);
  if( MinKey ) free_object(MinKey);
  if( MaxKey ) free_object(MaxKey);
  if( Javascript ) free_program(Javascript);
  if( Second ) free_svalue(Second);
  if( ObjectId ) free_program(ObjectId);
  if( Binary ) free_program(Binary);
  if( Symbol ) free_program(Symbol);
  if( Regex ) free_program(Regex);
  if( Timestamp ) free_program(Timestamp);
  EXIT;
}

/*! @endmodule _BSON
 */

/*! @endmodule Standards
 */
