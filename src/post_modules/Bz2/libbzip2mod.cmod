/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "global.h"
#include "interpret.h"
#include "svalue.h"
#include "stralloc.h"
#include "array.h"
#include "pike_macros.h"
#include "program.h"
#include "object.h"
#include "pike_types.h"
#include "threads.h"
#include "buffer.h"
#include "module_support.h"
#include "builtin_functions.h"
#include "libbzip2mod_config.h"

#ifdef HAVE_BZLIB_H
#include <bzlib.h>
#endif

DECLARATIONS

/* These constants are the default values that
   are sent to a Bz2 stream when it is initialized */
#define DEFAULT_COMPRESSION_RATE 9
#define DEFAULT_WORK_FACTOR 30

/* Constants used when keeping track of
   the open mode of a file. They are added
   only to make the code more easy to read */
#define NO_FILE_MODE 0
#define READ_MODE 1
#define WRITE_MODE 2


/* The initial amount of bytes that are allocated
   as for deflate/inflate when memory is needed */
#define DEFL_BUF_SIZE 500000
#define INFL_BUF_SIZE 500000


/* Why use double prefixes? */
#ifdef HAVE_BZ2_BZCOMPRESSINIT
#define bzCompressInit		BZ2_bzCompressInit
#define bzCompress		BZ2_bzCompress
#define bzCompressEnd		BZ2_bzCompressEnd
#define bzDecompressInit	BZ2_bzDecompressInit
#define bzDecompress		BZ2_bzDecompress
#define bzDecompressEnd		BZ2_bzDecompressEnd
#define bzReadOpen		BZ2_bzReadOpen
#define bzReadClose		BZ2_bzReadClose
#define bzRead			BZ2_bzRead
#define bzWriteOpen		BZ2_bzWriteOpen
#define bzWrite			BZ2_bzWrite
#define bzWriteClose		BZ2_bzWriteClose

#endif

#ifdef HAVE_BZ_STREAM_TOTAL_OUT
#define TOTAL_OUT(S) ((S)->total_out)
#else
/* use 64 bit counting struct */
#define TOTAL_OUT(S) \
    ((S)->total_out_lo32 + (((INT64)(S)->total_out_hi32) << 32))
#endif

/*! @module Bz2
 *!
 *! The Bz2 module contains functions to compress and uncompress
 *! strings using the same algorithm as the program @tt{bzip2@}.
 *! Compressing and decompressing can be done in streaming mode
 *! feeding the compress and decompress objects with arbitrarily large
 *! pieces of data.
 *!
 *! The Bz2 module consists of three classes; @[Bz2.Deflate],
 *! @[Bz2.Inflate] and @[Bz2.File]. @[Bz2.Deflate] is used to compress
 *! data and @[Bz2.Inflate] is used to uncompress data. @[Bz2.File] is
 *! used to handle Bzip2 files.
 *!
 *! @note
 *!   Note that this module is only available if libbzip2 was
 *!   available when Pike was compiled.
 *!
 *!   Note that although the functions in @[Inflate] and @[Deflate]
 *!   use the same @i{algorithm@} as @tt{bzip2@}, they do not use the
 *!   exact same format, so you can not directly zip files or unzip
 *!   zip-files using those functions. That is why there exists a
 *!   third class for files.
 */

/*! @class Deflate
 *!
 *! Bz2.Deflate is a builtin program written in C. It interfaces the
 *! packing routines in the bzlib library.
 *!
 *! @note
 *! This program is only available if libz was available and found
 *! when Pike was compiled.
 *!
 *! @seealso
 *! @[Bz2.Inflate()]
 */

/*! @decl void create(int(1..9)|void block_size)
 *!
 *! If given, @[block_size] should be a number from 1 to 9 indicating
 *! the block size used when doing compression. The actual block size
 *! will be a 100000 times this number. Low numbers are considered
 *! 'fast', higher numbers are considered 'slow' but give better
 *! packing. The parameter is set to 9 if it is omitted.
 *!
 *! This function can also be used to re-initialize a Bz2.Deflate
 *! object so it can be re-used.
 */

#ifdef HAVE_BZ2LIB
#ifdef HAVE_BZLIB_H
PIKECLASS Deflate
{
  CVAR struct byte_buffer buffer;
  CVAR bz_stream strm;
  CVAR int total_out_previous_flush;
  CVAR int total_out_previous_buf;
  CVAR int compression_rate;
  CVAR int work_factor;

  PIKEFUN void create(int|void compression, int|void work){
    int compression_rate = DEFAULT_COMPRESSION_RATE;
    int work_factor = DEFAULT_WORK_FACTOR;
    int retval;
    bz_stream *s;

    if (work) {
      work_factor = work->u.integer;
      if(work_factor < 1 || work_factor > 250)
        Pike_error("Work factor out of range for Bz2.Deflate().\n");
    }

    if (compression) {
      compression_rate = compression->u.integer;
      if(compression_rate < 1 || compression_rate > 9)
        Pike_error("Compression rate out of range for Bz2.Deflate().\n");
    }

    s = &THIS->strm;
    if(buffer_length(&THIS->buffer)){
      bzCompressEnd(s);
    }

    buffer_clear(&THIS->buffer);

    s->bzalloc = NULL;
    s->bzfree = NULL;
    s->opaque = NULL;
    s->next_in = NULL;
    s->next_out = NULL;
    s->avail_in = 0;
    s->avail_out = 0;

    THIS->total_out_previous_flush = 0;
    THIS->total_out_previous_buf = 0;
    THIS->compression_rate = compression_rate;
    THIS->work_factor = work_factor;

    retval = bzCompressInit(s,compression_rate,0,work_factor);

    switch(retval){
    case BZ_PARAM_ERROR:
      Pike_error("Parameter error when initializing Bz2.Deflate object.\n");
      break;
    case BZ_MEM_ERROR:
      Pike_error("Memory error when initialing Bz2.Deflate object.\n");
      break;
    case BZ_OK:
      break;
    default:
      Pike_error("Failed to initialize Bz2.Deflate object.\n");
    }
  }

  /*! @decl void feed(string data)
   *!
   *! This function feeds the data to the internal buffers of the
   *! Deflate object. All data is buffered until a read or a finish is
   *! done.
   *!
   *! @seealso
   *! @[Bz2.Deflate->read()]
   *! @[Bz2.Deflate->finish()]
   */

  PIKEFUN void feed(string data)
  {
    int retval = 0;
    int i = 1;
    bz_stream *s;
    char* tmp = NULL;

    s = &THIS->strm;
    s->next_in = data->str;
    s->avail_in = data->len;

    while(1){
      /* need to have a loop here in
	 case the output-buffer is filled*/
      /* allocate out buffer */
      tmp = xcalloc(i, DEFL_BUF_SIZE);
      s->next_out = tmp;
      s->avail_out = i * DEFL_BUF_SIZE;

      retval = bzCompress(s, BZ_RUN);
      if (retval != BZ_RUN_OK){
	bzCompressEnd(s);
	free(tmp);
	Pike_error("Error when compressing in Bz2.feed().\n");
      }

      if(TOTAL_OUT(s) - THIS->total_out_previous_buf > 0){
	/*if something was written to the outbuffer, then buffer it internally*/
	buffer_memcpy(&THIS->buffer, tmp, TOTAL_OUT(s) - THIS->total_out_previous_buf);
	THIS->total_out_previous_buf = TOTAL_OUT(s);
      }
      /*free the outbuffer*/
      free(tmp);
      if (s->avail_out > 0 || s->avail_in == 0){
	break;
      }
      i = 2 * i;
    }
  }

  void do_deflate(struct pike_string *data, struct byte_buffer *retbuf,
		  int mode){
    char *tmp = NULL;
    int retval;
    int total_out_old = 0;
    int i = 1;

    bz_stream *s = &THIS->strm;

    s->next_in = data->str;
    s->avail_in = data->len;
    s->next_out = buffer_ptr(retbuf);
    s->avail_out = DEFL_BUF_SIZE;

    while(1){
      retval = bzCompress(s, mode);

      if(tmp != NULL){
	buffer_memcpy(retbuf, tmp, TOTAL_OUT(s)-total_out_old);
	free(tmp);
      }
      if(retval < 0){
	bzCompressEnd(s);
	Pike_error("Error when compressing data.\n");
      }
      /* If all data has been finished or flushed then end this loop*/
      if(retval == BZ_STREAM_END || ((retval == BZ_RUN_OK)&&(s->avail_in == 0))){
	break;
      }
      /* If the output buffer is full, then allocate more space
	 and go on compressing*/
      if (s->avail_out == 0){
	i = 2 * i;
	tmp = xcalloc(i, DEFL_BUF_SIZE);
	s->next_out = tmp;
	s->avail_out = i * DEFL_BUF_SIZE;
	total_out_old = TOTAL_OUT(s);
      }
    }
  }

  /*! @decl string read(string data)
   *!
   *! This function feeds the data to the internal buffers of the
   *! Deflate object. Then it compresses all buffered data and returns
   *! the compressed data as a string
   *!
   *! @seealso
   *! @[Bz2.Deflate->feed()]
   *! @[Bz2.Deflate->finish()]
   */

  PIKEFUN string read(string data){
    struct pike_string *retstr;
    struct byte_buffer retbuf;
    bz_stream *s = &THIS->strm;
    ONERROR err;

    buffer_init(&retbuf);
    buffer_set_flags(&retbuf, BUFFER_GROW_EXACT);

    SET_ONERROR(err, buffer_free, &retbuf);

    buffer_ensure_space(&retbuf, DEFL_BUF_SIZE);
    buffer_advance(&retbuf, DEFL_BUF_SIZE);
    do_deflate(data, &retbuf, BZ_FLUSH);

    if(TOTAL_OUT(s) - THIS->total_out_previous_flush > 0){
      if(THIS->total_out_previous_buf > THIS->total_out_previous_flush){
	buffer_memcpy(&THIS->buffer, buffer_ptr(&retbuf), TOTAL_OUT(s) - THIS->total_out_previous_buf);
	retstr =
	  make_shared_binary_string(buffer_ptr(&THIS->buffer),
				    TOTAL_OUT(s) - THIS->total_out_previous_flush);
      }
      else{
	retstr =
	  make_shared_binary_string(buffer_ptr(&retbuf),
				    TOTAL_OUT(s)-THIS->total_out_previous_flush);
      }
      buffer_clear(&THIS->buffer);
      THIS->total_out_previous_flush = TOTAL_OUT(s);
      THIS->total_out_previous_buf = TOTAL_OUT(s);
    }
    else{
      retstr = make_shared_binary_string("",0);
    }

    CALL_AND_UNSET_ONERROR(err);

    RETURN(retstr);
  }


  /*! @decl string finish(string data)
   *!
   *! This method feeds the data to the internal buffers of the
   *! Deflate object. Then it compresses all buffered data adds a end
   *! of data marker ot it, returns the compressed data as a string,
   *! and reinitializes the deflate object.
   *!
   *! @seealso
   *! @[Bz2.Deflate->feed()]
   *! @[Bz2.Deflate->read()]
   */

  PIKEFUN string finish(string data){
    struct pike_string *retstr;
    int retval = 0;
    struct byte_buffer retbuf;
    ONERROR err;
    bz_stream *s = &THIS->strm;

    buffer_init(&retbuf);
    buffer_set_flags(&retbuf, BUFFER_GROW_EXACT);

    SET_ONERROR(err, buffer_free, &retbuf);

    buffer_ensure_space(&retbuf, DEFL_BUF_SIZE);
    buffer_advance(&retbuf, DEFL_BUF_SIZE);

    do_deflate(data, &retbuf, BZ_FINISH);

    /*use perhaps a better check?*/
    if(TOTAL_OUT(s) - THIS->total_out_previous_flush > 0){
      if(THIS->total_out_previous_buf > THIS->total_out_previous_flush){
	buffer_memcpy(&THIS->buffer, buffer_ptr(&retbuf), TOTAL_OUT(s) - THIS->total_out_previous_buf);
	retstr =
	  make_shared_binary_string(buffer_ptr(&THIS->buffer),
				    TOTAL_OUT(s) - THIS->total_out_previous_flush);
      }
      else{
	retstr =
	  make_shared_binary_string(buffer_ptr(&retbuf),
				    TOTAL_OUT(s) - THIS->total_out_previous_flush);
      }
      buffer_clear(&THIS->buffer);
      THIS->total_out_previous_flush = TOTAL_OUT(s);
      THIS->total_out_previous_buf = TOTAL_OUT(s);
    }
    else{
      /* something went wrong*/
      retstr = NULL;
    }

    CALL_AND_UNSET_ONERROR(err);

    bzCompressEnd(s);

    s->bzalloc = NULL;
    s->bzfree = NULL;
    s->opaque = NULL;
    s->next_in = NULL;
    s->next_out = NULL;
    s->avail_in = 0;
    s->avail_out = 0;

    THIS->total_out_previous_flush = 0;
    THIS->total_out_previous_buf = 0;

    retval = bzCompressInit(s,THIS->compression_rate,0,THIS->work_factor);
    if(retval < 0){
      Pike_error("Failed to reinitialize stream.\n");
    }

    if(retstr != NULL){
      RETURN(retstr);
    }
    else{
      RETURN(0);
    }
  }

  /*! @decl string deflate(string data, int(0..2)|void flush_mode)
   *!
   *! This function performs bzip2 style compression on a string
   *! @[data] and returns the packed data. Streaming can be done by
   *! calling this function several times and concatenating the
   *! returned data.
   *!
   *! The optional argument @[flush_mode] should be one of the
   *! following:
   *! @int
   *!   @value Bz2.BZ_RUN
   *!     Runs Bz2.Deflate->feed()
   *!   @value Bz2.BZ_FLUSH
   *!     Runs Bz2.Deflate->read()
   *!   @value Bz2.BZ_FINISH
   *!     Runs Bz2.Deflate->finish()
   *! @endint
   *!
   *! @seealso
   *! @[Bz2.Inflate->inflate()]
   */

  PIKEFUN string deflate(string data, int|void mode)
  {
    int flush_mode = BZ_FLUSH;

    if(mode)
    {
      flush_mode = mode->u.integer;
      pop_stack();
    }

    switch (flush_mode){
    case BZ_FLUSH:
      f_Bz2_Deflate_read(1);
      break;
    case BZ_FINISH:
      f_Bz2_Deflate_finish(1);
      break;
    case BZ_RUN:
      f_Bz2_Deflate_feed(1);
      push_empty_string();
      break;
    }
  }

  INIT
    {
#ifdef PIKE_NULL_IS_SPECIAL
      bz_stream *s;
      s = &THIS->strm;
      s->bzalloc = NULL;
      s->bzfree = NULL;
      s->opaque = NULL;
      s->next_in = NULL;
      s->next_out = NULL;
      s->avail_in = 0;
      s->avail_out = 0;
#endif

      buffer_init(&THIS->buffer);
    }

  EXIT
    gc_trivial;
    {
      bzCompressEnd(&THIS->strm);
      buffer_free(&THIS->buffer);
    }
}


/*! @endclass
 */


/*! @class Inflate
 *!
 *! Bz2.Inflate is a builtin program written in C. It interfaces the
 *! unpacking routines in the libz library.
 *!
 *! @note
 *! This program is only available if bzlib was available and found
 *! when Pike was compiled.
 *!
 *! @seealso
 *!   @[Deflate]
 */



PIKECLASS Inflate
{
  CVAR struct byte_buffer buffer;
  CVAR bz_stream strm;
  CVAR int total_out_previous_flush;
  CVAR int total_out_previous_buf;

  /*! @decl void create()
   */
  PIKEFUN void create()
  {
    int retval;
    bz_stream *s = &THIS->strm;

    if(buffer_content_length(&THIS->buffer))
      bzDecompressEnd(s);

    buffer_clear(&THIS->buffer);

    s->bzalloc = NULL;
    s->bzfree = NULL;
    s->opaque = NULL;

    retval = bzDecompressInit(s, 0, 0);

    /* make more detailed*/
    if(retval != BZ_OK){
      Pike_error("Unexpected error in Bz2.Inflate().\n");
    }

    s->next_in = NULL;
    s->next_out = NULL;
    s->avail_in = 0;
    s->avail_out = 0;

    /*reset the counted bytes*/
    THIS->total_out_previous_flush = 0;
  }

  /*! @decl string inflate(string data)
   *!
   *! This function performs bzip2 style decompression. It can do
   *! decompression with arbitrarily large pieces of data. When fed
   *! with data, it decompresses as much as it can and buffers the
   *! rest.
   *!
   *! @example
   *! while(..){
   *!   foo = compressed_data[i..i+9];
   *!   uncompressed_concatenated_data += inflate_object->inflate(foo);
   *!   i = i+10;
   *! }
   *!
   *! @seealso
   *! @[Bz2.Deflate->deflate()]
   */

  PIKEFUN string inflate(string data){
    struct pike_string *retstr;
    int i = 1;
    int retval=0;
    int total_out_old = 0;
    char *tmp = NULL;
    char *tmp_internbuf = NULL;
    struct byte_buffer ret_buffer;
    struct byte_buffer *retbuf = &ret_buffer;
    bz_stream *s = &THIS->strm;

    /*the incoming string has to be appended to the input buffer*/

    if (s->avail_in > 0){
      tmp_internbuf = xalloc(s->avail_in);
      memcpy (tmp_internbuf, s->next_in, s->avail_in);
    }
    /* free buf space*/
    buffer_clear(&THIS->buffer);

    if(tmp_internbuf != NULL){
      /*copying data that could not be unpacked in previous call*/
      buffer_memcpy(&THIS->buffer, tmp_internbuf,s->avail_in);
      free(tmp_internbuf);
    }
    /*appending the new data*/
    buffer_memcpy(&THIS->buffer, data->str,data->len);

    s->next_in = buffer_ptr(&THIS->buffer);
    s->avail_in += data->len;

    /* the input buffer is now provided, provide an output buffer*/

    buffer_init(retbuf);
    buffer_set_flags(retbuf, BUFFER_GROW_EXACT);
    s->next_out = buffer_alloc(retbuf, INFL_BUF_SIZE);
    s->avail_out = INFL_BUF_SIZE;

    while(1){
      /* This Loop runs bzDecompress and stores the result in retbuf,
	 if retbuf is filled it makes retbuf bigger and calls
	 decompress again until the whole input data string has been
	 unpacked*/
      retval = bzDecompress(s); /* updates next_in, avail_in, total_in, next_out, avail_out, total_out*/

      if(tmp != NULL){
	buffer_memcpy(&ret_buffer, tmp,TOTAL_OUT(s)-total_out_old);
	free(tmp);
      }
      /* errorcheck*/
      if(retval == BZ_STREAM_END && s->avail_in > 0){
	bzDecompressEnd(s);
	buffer_free(&ret_buffer);
	Pike_error("No data may follow after end of stream.\n");
      }
      if((retval != BZ_STREAM_END) && (retval != BZ_OK)){
	bzDecompressEnd(s);
	buffer_free(&ret_buffer);
	Pike_error("Error when decompressing, probably because inflate "
		   "is fed with invalid data.\n");
      }

      /* If outputbuffer is not full, or input buffer is empty, or end
	 of stream has been detected then compression has been done as
	 far as possible*/
      if((s->avail_out > 0) || (s->avail_in == 0) || (retval == BZ_STREAM_END)){
	break;
      }
      /* If output buffer is full then allocate more output space and call
	 bzDecompress again*/
      if (s->avail_out == 0){
	i = i*2;
	tmp = calloc(i, INFL_BUF_SIZE);
	if(tmp == NULL){
	  buffer_free(&ret_buffer);
          SIMPLE_OUT_OF_MEMORY_ERROR("inflate", i*INFL_BUF_SIZE);
	}
	s->next_out = tmp;
	s->avail_out = i * INFL_BUF_SIZE;
	total_out_old = TOTAL_OUT(s);
      }
    }

    /* NB: On exit from the loop retval is either BZ_STREAM_END or BZ_OK. */

    /*return the bytes decompressed since the last time bytes were
      returned from this stream, in other words, return a block*/
    if(TOTAL_OUT(s) - THIS->total_out_previous_flush > 0){
      retstr = make_shared_binary_string(buffer_ptr(&ret_buffer),TOTAL_OUT(s)-THIS->total_out_previous_flush);
    }
    else{
      retstr = make_shared_binary_string("",0);
    }
    THIS->total_out_previous_flush = TOTAL_OUT(s);
    if(retval == BZ_STREAM_END){
      bzDecompressEnd(s);
      buffer_clear(&THIS->buffer);

      s->bzalloc = NULL;
      s->bzfree = NULL;
      s->opaque = NULL;

      retval = bzDecompressInit(s, 0, 0);

      /* make more detailed*/
      if(retval != BZ_OK){
	Pike_error("Unexpected error in Bz2.Inflate().\n");
      }

      s->next_in = NULL;
      s->next_out = NULL;
      s->avail_in = 0;
      s->avail_out = 0;

      /*reset the counted bytes*/
      THIS->total_out_previous_flush = 0;
    }
    buffer_free(&ret_buffer);
    RETURN(retstr);
  }

  INIT
    {
#ifdef PIKE_NULL_IS_SPECIAL
      bz_stream *s;
      s = &THIS->strm;
      s->bzalloc = NULL;
      s->bzfree = NULL;
      s->opaque = NULL;
      s->next_in = NULL;
      s->next_out = NULL;
      s->avail_in = 0;
      s->avail_out = 0;
#endif

      buffer_init(&THIS->buffer);
    }

  EXIT
    gc_trivial;
    {
      bzDecompressEnd(&THIS->strm);
      buffer_free(&THIS->buffer);
    }
}
/*! @endclass
*/

#ifndef __NT__
/* We currently have to disable this on Windows since we typically
 * have a different CRT in the bz2 lib than in pike. That makes it
 * impossible to pass fd's between them. */

/*! @class File
 *! Low-level implementation of read/write support for Bzip2 files
 *!
 *! @note
 *! This class is currently not available on Windows.
 */


PIKECLASS File
{
  CVAR BZFILE *file;
  CVAR FILE *fp;
  CVAR int mode;
  CVAR int small;
  CVAR int bzerror;

  /*! @decl int(0..1) close()
   *! closes the file
   */

  PIKEFUN int close()
  {
    if (!THIS->fp || !THIS->file) RETURN (1);
    switch(THIS->mode){
    case READ_MODE:
      bzReadClose(&THIS->bzerror,THIS->file);
      break;
    case WRITE_MODE:
      bzWriteClose (&THIS->bzerror, THIS->file,0,NULL,NULL);
      break;
    default:
      Pike_error("This error can never occur.\n");
    }

    fclose(THIS->fp);

    THIS->fp = NULL;
    THIS->file = NULL;
    THIS->mode = NO_FILE_MODE;
    THIS->small = 0;

    if((THIS->bzerror)==BZ_OK)
      RETURN(1);

    RETURN(0);
  }

  /*! @decl int(0..1) read_open(string file)
   *! Opens a file for reading.
   *! @param file
   *! The name of the file to be opened
   */

  PIKEFUN int read_open(string file_name){
    FILE *tmp = NULL;

    if( THIS->mode == NO_FILE_MODE){
      tmp = fopen(file_name->str,"rb");
    }
    if(tmp != NULL){
      THIS->fp = tmp;
      THIS->file = bzReadOpen(&THIS->bzerror,tmp,0,0,NULL,0);
      THIS->mode = READ_MODE;

      switch(THIS->bzerror){
      case BZ_OK:
	break;
      case BZ_MEM_ERROR:
	if(THIS->small == 0){
	  bzReadClose(&THIS->bzerror,THIS->file);
	  THIS->small = 1;
          THIS->file = bzReadOpen(&THIS->bzerror, tmp, 1, 0, NULL, 0);
	  if(THIS->bzerror != BZ_OK){
            bzReadClose(&THIS->bzerror, THIS->file);
            THIS->file = NULL;
	    Pike_error("Bz2.File->read_open() failed.\n");
	  }
	}
	else{
	  Pike_error("Bz2.File->read_open() out of memory.\n");
	}
	break;
      default:
	Pike_error("Error in Bz2.File()->read_open.\n");
      }
    }

    if(tmp==NULL)
      RETURN(0);

    RETURN(1);
  }

  /*! @decl int(0..1) write_open(string file)
   *! Opens a file for writing.
   *! @param file
   *! The name of the file to be opened
   */

  PIKEFUN int write_open(string file_name, int|void compression, int|void work){
    int work_factor = DEFAULT_WORK_FACTOR;
    int compression_rate = DEFAULT_COMPRESSION_RATE;
    FILE *tmp = NULL;

    if(compression)
    {
	compression_rate = compression->u.integer;
        if(compression_rate < 1 || compression_rate > 9){
          Pike_error("Compression rate %d is out of range for "
                     "Bz2.File()->write_open().\n", compression_rate);
        }
    }

    if(work)
    {
	work_factor = work->u.integer;
        if(work_factor < 1 || work_factor > 250){
          Pike_error("Work factor %d is out of range for "
                     "Bz2.File()->write_open().\n", work_factor);
        }
    }

    if (THIS->mode == NO_FILE_MODE)
      tmp = fopen(file_name->str,"wb");

    if(tmp != NULL){
      THIS->file = bzWriteOpen(&THIS->bzerror,tmp,compression_rate,0,work_factor);

      switch(THIS->bzerror){
      case BZ_OK:
	break;
      default:
	fclose(tmp);
	Pike_error("Error in Bz2.File()->write_open(): %d\n", THIS->bzerror);
      }
      THIS->fp = tmp;
      THIS->mode = WRITE_MODE;
    }

    if(tmp == NULL)
      RETURN(0);

    RETURN(1);
  }

  /*! @decl int(0..1) open(string file, void|string mode)
   *! Opens a file for I/O.
   *! @param file
   *! The name of the file to be opened
   *! @param mode
   *! Mode for the file operations. Can be either "r" (read)
   *! or "w". Read is default.
   */

  PIKEFUN int open(string filename, string|void mode)
  {
    if (!mode)
    {
      f_Bz2_File_read_open(1);
      return;
    }

    if (mode->len==1)
    {
      if (mode->str[0]=='w')
      {
	pop_stack();
	f_Bz2_File_write_open(1);
        return;
      }
      if (mode->str[0]=='r')
      {
	pop_stack();
	f_Bz2_File_read_open(1);
        return;
      }
    }

    Pike_error("Unknown open mode for file, "
               "should be either 'w' or 'r'.\n");
  }


  /*! @decl void create()
   *! @decl void create(string filename, void|string mode)
   *! Creates a Bz2.File object
   */

  PIKEFUN void create(void|string file, void|string mode){
    if(THIS->file != NULL){
      f_Bz2_File_close(0);
    }
    THIS->small = 0;
    THIS->bzerror = 0;
    THIS->mode = NO_FILE_MODE;
    THIS->file = NULL;
    THIS->fp = NULL;

    if(args != 0){
      f_Bz2_File_open(args);
    }
  }

  /*! @decl int write(string data)
   *! Writes the data to the file.
   *! @returns
   *!  the number of bytes written to the file.
   */

  PIKEFUN int write(string data){
    int len =  data->len;

    bzWrite(&THIS->bzerror, THIS->file, data->str,len);
    switch(THIS->bzerror){
    case BZ_OK:
      break;
    default:
      Pike_error("Error in Bz2.File()->write().\n");
    }

    RETURN(len);
  }

  /*! @decl string read(int len)
   *! Reads len (uncompressed) bytes from the file.
   *! If len is omitted the whole file is read.
   *! If read is unsuccessful, 0 is returned.
   */

  PIKEFUN string read(int|void bytes){
    void *buf = NULL;
    struct string_builder retstr;
    int to_be_read = INFL_BUF_SIZE;
    int was_read;

    if( THIS->bzerror == BZ_STREAM_END )
    {
      pop_n_elems(args);
      push_empty_string();
      return;
    }

    if (bytes)
      to_be_read = bytes->u.integer;

    init_string_builder(&retstr, 0);
    buf = xalloc(to_be_read);

    while( to_be_read>0 && THIS->bzerror == BZ_OK )
    {
      was_read = bzRead( &THIS->bzerror, THIS->file, buf, to_be_read );
      string_builder_binary_strcat0( &retstr, buf, was_read );
      if( args != 0 )
        to_be_read -= was_read;

      switch(THIS->bzerror){
      case BZ_OK:
      case BZ_STREAM_END:
	break;
      default:
	free(buf);
	Pike_error("Error in Bz2.File()->read().\n");
      }
    }

    free(buf);
    RETURN finish_string_builder(&retstr);
  }


  /*! @decl int(0..1) eof()
   *! @returns
   *!  1 if EOF has been reached,
   *!  0 otherwise
   */

  PIKEFUN int(0..1)eof()
  {
    if(THIS->bzerror == BZ_STREAM_END)
      RETURN(1);
    RETURN(0);
  }

#ifdef PIKE_NULL_IS_SPECIAL
  INIT
    {
      THIS->small = 0;
      THIS->file = NULL;
      THIS->bzerror = 0;
      THIS->mode = NO_FILE_MODE;
      THIS->file = NULL;
    }
#endif

  EXIT
    gc_trivial;
    {
      if (THIS->file) {
	switch(THIS->mode){
	case READ_MODE:
	  bzReadClose(&THIS->bzerror,THIS->file);
	  break;
	case WRITE_MODE:
	  bzWriteClose (&THIS->bzerror, THIS->file,0,NULL,NULL);
	  break;
	case NO_FILE_MODE:
	  break;
#ifdef PIKE_DEBUG
	default:
	  Pike_error("This error can never occur.\n");
#endif
	}
      }
      if(THIS->fp) {
	fclose(THIS->fp);
      }
    }
}

#endif	/* !__NT__ */

#endif
#endif  /* end HAVE_LIBLIBZIP2 */

/*! @endclass
 */

/*! @endmodule
 */

PIKE_MODULE_INIT
{
#ifdef HAVE_BZ2LIB
#ifdef HAVE_BZLIB_H
  add_integer_constant("BZ_RUN", BZ_RUN, 0);
  add_integer_constant("BZ_FLUSH", BZ_FLUSH, 0);
  add_integer_constant("BZ_FINISH", BZ_FINISH, 0);
  INIT
#endif
#endif
}

PIKE_MODULE_EXIT
{
#ifdef HAVE_BZ2LIB
#ifdef HAVE_BZLIB_H
  EXIT
#endif
#endif
}
