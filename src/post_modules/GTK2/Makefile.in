# This line is needed on some machines.
@make_variables@
VPATH=@srcdir@
MODNAME=GTK2
DEST=@prefix@/lib/pike/modules/
OBJS=dummy.o
MODULE_LDFLAGS=@LDFLAGS@ @PGTK_LIBS@ @GTK_LIBS@
MODULE_CFLAGS=@PGTK_CFLAGS@
MODULE_CLEAN_EXTRA=p*.c
#MODULE_INSTALL=pre_install

# WITH_GTK == 2
#   override -> compile2 -> compile1 -> [SET OBJS] -> all
#
# WITH_GTK == 1
#   override -> compile1 -> [SET OBJS] -> all
#
# WITH_GTK == 0
#   override -> compile0 -> all
#

# Do not re-generate the 'dependencies' file in this directory.
DO_DEPEND=no

override:  compile@WITH_GTK@
	@:

@dynamic_module_makefile@

docs:  doc@WITH_GTK@

doc0:

doc1: options
	$(RUNPIKE) $(SRCDIR)/build_pgtk.pike --source='$(SRCDIR)/source/'\
		   --destination="$(SRCDIR)/refdoc/" \
		   $(SRCDIR)/output/doc-pikeref.pike

doc2: doc1

compile0:
#	@echo "Pike-GTK2 disabled."
	@$(MAKE) all

compile1: options
	@$(RUNPIKE) $(SRCDIR)/build_pgtk.pike --source='$(SRCDIR)/source/' \
		   $(SRCDIR)/output/few.pike
#	if $(RUNPIKE) $(SRCDIR)/build_pgtk.pike --source='$(SRCDIR)/source/' \
#	              $(SRCDIR)/output/few.pike; then :; else \
#	  (echo; echo "Failure. Rerunning with trace."; echo) >&2; \
#	  $(RUNPIKE) -t2 $(SRCDIR)/build_pgtk.pike \
#		     --source='$(SRCDIR)/source/' $(SRCDIR)/output/few.pike; \
#	  exit $$?; \
#	fi
	@if [ "x@VPATH_KLUDGE@" = "xyes" ]; then \
	  for f in `cat files_to_compile | sed -e 's/\.o/\.c/g'`; do \
	    test -f "$$f" || ln -s "$(srcdir)/$$f" "$$f"; \
	  done; \
	else :; fi
#	@echo "Original CFLAGS:$(CFLAGS)"
#	@echo "Modified CFLAGS:`echo ' $(CFLAGS) ' | sed -e 's/ -g[^ ]*//g' -e 's/ -W[^ ]*//g'` `echo ' $(CFLAGS) ' | sed -ne 's/.*\( -gcc-version[^ ]*\).*/\1/p'`"
	@$(MAKE) OBJS="`cat files_to_compile`" \
		 CFLAGS="`echo ' $(CFLAGS) ' | sed -e 's/ -g[^ ]*/ /g' -e 's/ -W[^ ]*/ /g'` `echo ' $(CFLAGS) ' | sed -ne 's/.*\( -gcc-version[^ ]*\).*/\1/p'`" \
		 MAKE_FLAGS='-e $(MAKE_FLAGS)' \
		 all

compile2: compile1

options: config.status
	./config.status

#pre_install: GDK2.pmod Gnome2.pmod Pango.pmod
#	$(TMP_BINDIR)/install_module GDK2.pmod $(SYSTEM_MODULE_PATH)/$(MODDIR)GDK2.pmod
#	$(TMP_BINDIR)/install_module Gnome2.pmod $(SYSTEM_MODULE_PATH)/$(MODDIR)Gnome2.pmod
#	$(TMP_BINDIR)/install_module Pango.pmod $(SYSTEM_MODULE_PATH)/$(MODDIR)Pango.pmod

# Some hand-made dependencies:

$(OBJS) : $(SRCDIR)/pgtk.h pgtk_config.h \
	$(PIKE_SRC_DIR)/global.h \
	$(PIKE_SRC_DIR)/svalue.h \
	$(PIKE_SRC_DIR)/program.h \
	$(PIKE_SRC_DIR)/pike_types.h \
	$(PIKE_SRC_DIR)/interpret.h \
	$(PIKE_SRC_DIR)/module_support.h \
	$(PIKE_SRC_DIR)/pike_error.h \
	$(PIKE_SRC_DIR)/array.h \
	$(PIKE_SRC_DIR)/backend.h \
	$(PIKE_SRC_DIR)/stralloc.h \
	$(PIKE_SRC_DIR)/mapping.h \
	$(PIKE_SRC_DIR)/object.h \
	$(PIKE_SRC_DIR)/threads.h \
	$(PIKE_SRC_DIR)/operators.h
