/* -*- C -*- */
require gtksourceview;

class GTK2.SourceStyleScheme;
//!

%{
#include "gtksourceview/gtksourceview.h"
%}

not gtksourceview20;
mapping(string:mixed) get_tag_style(string name)
//! Gets the tag associated with the given name in this style.
{
  pgtk2_verify_inited();
  {
    GtkSourceTagStyle *gs;
    char *name;
    GdkColor *fg,*bg;
    get_all_args(NULL,args,"%c",&name);
    gs=gtk_source_style_scheme_get_tag_style((GtkSourceStyleScheme *)THIS->obj,
			name);
    pgtk2_pop_n_elems(args);
    if (gs) {
      ref_push_string(_STR("default")); push_int(gs->is_default);
      ref_push_string(_STR("mask")); push_int(gs->mask);
      fg=(GdkColor *)g_malloc(sizeof(GdkColor));
      if (fg==NULL)
	SIMPLE_OUT_OF_MEMORY_ERROR("get_tag_style",sizeof(GdkColor));
      bg=(GdkColor *)g_malloc(sizeof(GdkColor));
      if (bg==NULL)
	SIMPLE_OUT_OF_MEMORY_ERROR("get_tag_style",sizeof(GdkColor));
      *fg=gs->foreground;
      *bg=gs->background;
      ref_push_string(_STR("foreground")); push_gdkobject(fg,color,1);
      ref_push_string(_STR("background")); push_gdkobject(bg,color,1);
      ref_push_string(_STR("italic")); push_int(gs->italic);
      ref_push_string(_STR("bold")); push_int(gs->bold);
      ref_push_string(_STR("underline")); push_int(gs->underline);
      ref_push_string(_STR("strikethrough")); push_int(gs->strikethrough);
      f_aggregate_mapping(16);
    } else
      push_int(0);
  }
}
endnot;

string get_name()
//! Gets the name of this scheme.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_GCHAR(gtk_source_style_scheme_get_name((GtkSourceStyleScheme *)THIS->obj));
}
