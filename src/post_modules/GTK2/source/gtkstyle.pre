/* -*- C -*- */
class GTK2.Style;
inherit G.Object;

//! Style settings.

signal realize;
signal unrealize;

void create();
//! Creates a new style.

GTK2.Style copy();
//! Copy a style.

%{
#undef TWIN
#define TWIN(X) GTK_WIDGET(X)->window
%}

GTK2.Style attach(GTK2.Widget window)
//! Attaches a style to a window; this process allocates the colors and creates
//! the GC's for the style - it specializes it to a particular visual and
//! colormap.  The process may involve the creation of a new style if the style
//! has already been attached to a window with a different style and colormap.
{
  pgtk2_verify_inited();
  {
    GtkStyle *gs;
    struct object *o1;
    get_all_args(NULL,args,"%o",&o1);
    gs=gtk_style_attach(GTK_STYLE(THIS->obj),
			TWIN(get_gobject(o1)));
    THIS->obj=G_OBJECT(gs);
  }
  RETURN_THIS();
}

void detach();
//! Detach a style.

void set_background(GTK2.Widget window, int state)
//! Sets the background of window to the background color or pixmap specified
//! by style for the given state.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    INT_TYPE state;
    get_all_args(NULL,args,"%o%i",&o1,&state);
    gtk_style_set_background(GTK_STYLE(THIS->obj),
			TWIN(get_gobject(o1)),state);
  }
  RETURN_THIS();
}

GTK2.IconSet lookup_icon_set(string stock_id)
//! Lookup the icon set.
{
  pgtk2_verify_inited();
  {
    char *stock_id;
    GtkIconSet *gi;
    get_all_args(NULL,args,"%c",&stock_id);
    gi=gtk_style_lookup_icon_set(GTK_STYLE(THIS->obj),stock_id);
    pgtk2_pop_n_elems(args);
    push_gobjectclass(gi,pgtk2_icon_set_program);
  }
}

GDK2.Pixbuf render_icon(GTK2.IconSource source, int direction, int state,
		       int size, GTK2.Widget widget, string detail)
//! Renders the icon specified by source at the given size according to the
//! given parameters and returns the result in a pixbuf.
{
  pgtk2_verify_inited();
  {
    GdkPixbuf *pixbuf;
    struct object *o1,*o2;
    INT_TYPE dir,state,size;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%i%o%c",&o1,&dir,&state,&size,
				&o2,&detail);
    pixbuf=gtk_style_render_icon(GTK_STYLE(THIS->obj),
			(GtkIconSource *)get_gobject(o1),dir,state,size,
			GTK_WIDGET(get_gobject(o2)),detail);
    pgtk2_pop_n_elems(args);
    push_gobject(pixbuf);
  }
}

void paint_arrow(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
		 GTK2.Widget widget, string detail, int arrow, int fill,
		 int x, int y, int width, int height)
//! Draws an arrow in the given rectangle on window using the given parameters.
//! arrow determines the direction of the arrow.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,arrow,fill,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i%i",
		 &o1,&state,&shadow,&o2,&o3,&detail,&arrow,&fill,
		 &x,&y,&width,&height);
    gtk_paint_arrow(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,shadow,
		    (GdkRectangle *)get_gdkobject(o2,rectangle),
		    GTK_WIDGET(get_gobject(o3)),detail,arrow,fill,
		    x,y,width,height);
  }
  RETURN_THIS();
}

void paint_box(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
	       GTK2.Widget widget, string detail, int x, int y,
	       int width, int height)
//! Draws a box on window with the given parameters.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,&shadow,
		 &o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_box(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,shadow,
		  (GdkRectangle *)get_gdkobject(o2,rectangle),
		  GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_box_gap(GTK2.Widget window, int state, int shadow,
		   GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		   int x, int y, int width, int height, int gap_side,
		   int gap_x, int gap_width)
//! Draws a box in window using the given style and state and shadow type,
//! leaving a gap in one side.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height,gap_side,gap_x,gap_width;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i%i%i",
		 &o1,&state,&shadow,&o2,&o3,&detail,&x,&y,&width,&height,
		 &gap_side,&gap_x,&gap_width);
    gtk_paint_box_gap(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,shadow,
		      (GdkRectangle *)get_gdkobject(o2,rectangle),
		      GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height,
		      gap_side,gap_x,gap_width);
  }
  RETURN_THIS();
}

void paint_check(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
		 GTK2.Widget widget, string detail, int x, int y,
		 int width, int height)
//! Draws a check button indicator in the given rectangle on window.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_check(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,shadow,
		    (GdkRectangle *)get_gdkobject(o2,rectangle),
		    GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_diamond(GTK2.Widget window, int state, int shadow,
		   GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		   int x, int y, int width, int height)
//! Draws a diamond in the given rectangle on window.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_diamond(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		      shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		      GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_extension(GTK2.Widget window, int state, int shadow,
		     GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		     int x, int y, int width, int height, int gap_side)
//! Draws an extension, i.e. a notebook tab.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height,gap_side;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i",&o1,
		 &state,&shadow,&o2,&o3,&detail,&x,&y,&width,&height,
		 &gap_side);
    gtk_paint_extension(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
			shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
			GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height,
			gap_side);
  }
  RETURN_THIS();
}

void paint_flat_box(GTK2.Widget window, int state, int shadow,
		    GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		    int x, int y, int width, int height)
//! Draws a flat box on window.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_flat_box(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		       shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		       GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_focus(GTK2.Widget window, int state, GDK2.Rectangle rect,
		 GTK2.Widget widget, string detail, int x, int y,
		 int width, int height) 
//! Draws a focus indicator around the given rectangle.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%o%o%c%i%i%i%i",&o1,&state,&o2,
		 &o3,&detail,&x,&y,&width,&height);
    gtk_paint_focus(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		    (GdkRectangle *)get_gdkobject(o2,rectangle),
		    GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_handle(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
		  GTK2.Widget widget, string detail, int x, int y, int width,
		  int height, int orientation)
//! Draws a handle as used in GTK2.HandleBox and GTK2.Paned.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height,orient;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height,&orient);
    gtk_paint_handle(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		     shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		     GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height,
		     orient);
  }
  RETURN_THIS();
}

void paint_hline(GTK2.Widget window, int state, GDK2.Rectangle rect,
		 GTK2.Widget widget, string detail, int x1, int x2, int y)
//! Draws a horizontal line from (x1,y) to (x2,y).
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,x1,x2,y;
    char *detail;
    get_all_args(NULL,args,"%o%i%o%o%c%i%i%i",&o1,&state,&o2,&o3,
		 &detail,&x1,&x2,&y);
    gtk_paint_hline(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		    (GdkRectangle *)get_gdkobject(o2,rectangle),
		    GTK_WIDGET(get_gobject(o3)),detail,x1,x2,y);
  }
  RETURN_THIS();
}

void paint_option(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
		  GTK2.Widget widget, string detail, int x, int y, int width,
		  int height)
//! Draws a radio button indicator in the given rectangle.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_option(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		     shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		     GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

/*
void paint_polygon()
*/

void paint_shadow(GTK2.Widget window, int state, int shadow,
		  GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		  int x, int y, int width, int height)
//! Draws a shadow around the given rectangle.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_shadow(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		     shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		     GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_shadow_gap(GTK2.Widget window, int state, int shadow,
		      GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		      int x, int y, int width, int height, int gap_side,
		      int gap_x, int gap_width)
//! Draws a shadow around the given rectangle in window, leaving a gap in one
//! side.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height,gap_side,gap_x,gap_width;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i%i%i",&o1,
		 &state,&shadow,&o2,&o3,&detail,&x,&y,&width,&height,
		 &gap_side,&gap_x,&gap_width);
    gtk_paint_shadow_gap(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
			 shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
			 GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height,
			 gap_side,gap_x,gap_width);
  }
  RETURN_THIS();
}

void paint_slider(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
		  GTK2.Widget widget, string detail, int x, int y, int width,
		  int height, int orientation)
//! Paint a slider.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height,orient;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i%i",&o1,&state,
		 &shadow,&o2,&o3,&detail,&x,&y,&width,&height,&orient);
    gtk_paint_slider(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		     shadow,(GdkRectangle *)get_gdkobject(o2,rectangle),
		     GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height,
		     orient);
  }
  RETURN_THIS();
}

void paint_tab(GTK2.Widget window, int state, int shadow, GDK2.Rectangle rect,
	       GTK2.Widget widget, string detail, int x, int y, int width,
	       int height)
//! Draws an option menu tab (i.e. the up and down pointing arrows).
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,shadow,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%i%i",&o1,&state,&shadow,
		 &o2,&o3,&detail,&x,&y,&width,&height);
    gtk_paint_tab(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,shadow,
		  (GdkRectangle *)get_gdkobject(o2,rectangle),
		  GTK_WIDGET(get_gobject(o3)),detail,x,y,width,height);
  }
  RETURN_THIS();
}

void paint_vline(GTK2.Widget window, int state, GDK2.Rectangle rect,
		 GTK2.Widget widget, string detail, int y1, int y2, int x)
//! Draws a vertical line from (x,y1) to (x,y2).
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,y1,y2,x;
    char *detail;
    get_all_args(NULL,args,"%o%i%o%o%c%i%i%i",&o1,&state,&o2,&o3,
		 &detail,&y1,&y2,&x);
    gtk_paint_vline(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		    (GdkRectangle *)get_gdkobject(o2,rectangle),
		    GTK_WIDGET(get_gobject(o3)),detail,y1,y2,x);
  }
  RETURN_THIS();
}

void paint_expander(GTK2.Widget window, int state, GDK2.Rectangle rect,
		    GTK2.Widget widget, string detail, int x, int y,
		    int style)
//! Draws an expander as used in GTK2.TreeView.  x and y specify the center of
//! the expander.  The size of the expander is determined by the
//! "expander-size" style property of widget.  (If widget is 0 or doesn't have
//! an "expander-size" property, an unspecified default size will be used,
//! since the caller doesn't have sufficient information to position the
//! expander, this is likely not useful.)  The expander is expander_size pixels
//! tall in the collapsed position and expander_size pixels wide in the
//! expanded position.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,x,y,style;
    char *detail;
    get_all_args(NULL,args,"%o%i%o%o%c%i%i%i",&o1,&state,&o2,&o3,
		 &detail,&x,&y,&style);
    gtk_paint_expander(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
		       (GdkRectangle *)get_gdkobject(o2,rectangle),
		       GTK_WIDGET(get_gobject(o3)),detail,x,y,style);
  }
  RETURN_THIS();
}

require pango;
void paint_layout(GTK2.Widget window, int state, int use_text,
		  GDK2.Rectangle rect, GTK2.Widget widget, string detail,
		  int x, int y, Pango.Layout layout)
//! Draw a pango layout.  Use widget->create_pango_layout() to get a
//! Pango.Layout.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3,*o4;
    INT_TYPE state,use_text,x,y;
    char *detail;
    get_all_args(NULL,args,"%o%i%i%o%o%c%i%i%o",&o1,&state,&use_text,
		 &o2,&o3,&detail,&x,&y,&o4);
    gtk_paint_layout(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,use_text,
		     (GdkRectangle *)get_gdkobject(o2,rectangle),
		     GTK_WIDGET(get_gobject(o3)),detail,x,y,
		     PANGO_LAYOUT(get_gobject(o4)));
  }
  RETURN_THIS();
}
endrequire;

void paint_resize_grip(GTK2.Widget window, int state, GDK2.Rectangle rect,
		       GTK2.Widget widget, string detail, int edge, int x,
		       int y, int width, int height)
//! Draws a resize grip in the given rectangle.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2,*o3;
    INT_TYPE state,edge,x,y,width,height;
    char *detail;
    get_all_args(NULL,args,"%o%i%o%o%c%i%i%i%i%i",&o1,&state,
		 &o2,&o3,&detail,&edge,&x,&y,&width,&height);
    gtk_paint_resize_grip(GTK_STYLE(THIS->obj),TWIN(get_gobject(o1)),state,
			  (GdkRectangle *)get_gdkobject(o2,rectangle),
			  GTK_WIDGET(get_gobject(o3)),detail,edge,x,y,
			  width,height);
  }
  RETURN_THIS();
}

