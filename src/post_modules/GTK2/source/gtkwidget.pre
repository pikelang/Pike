/* -*- C -*- */
class GTK2.Widget;
inherit GTK2.Object;

%{
#undef TWIN
#undef _GC
#define TWIN (GTK_WIDGET(THIS->obj)->window)
#define _GC(X) (GDK_GC(get_gobject(X)))
%}

//! The basic widget, inherited (directly or indirectly) by all widgets.  Thus,
//! all functions and signals defined in this widget work on all widgets.
//! <p>
//! One of the most important functions in this class is 'show', it lets GTK2
//! know that we are done setting the attributes of the widget, and it is ready
//! to be displayed.  You may also use hide to make it disappear again.  The
//! order in which you show the widgets is not important, but I suggest showing
//! the toplevel window last so the whole window pops up at once rather than
//! seeing the individual widgets come up on the screen as they're formed.  The
//! children of a widget (a window is a widget too) will not be displayed until
//! the window itself is shown using the show() function.
//! <p>

//! Properties:
//! int app-paintable
//! int can-default
//! int can-focus
//! int composite-child
//! int events (GDK2.EventMask)
//! int extension-events (CONST(GDK_EXTENSION_EVENTS_))
//! int has-default
//! int has-focus
//! int has-tooltip
//! int height-request
//! int is-focus
//! string name
//! int no-show-all
//! GTK2.Container parent
//! int receives-default
//! int sensitive
//! GTK2.Style style
//! string tooltip-markup
//! string tooltip-text
//! int visible
//! int width-request
//! <p>
//! Style properties:
//! float cursor-aspect-ratio
//! GDK2.Color cursor-color
//! int draw-border
//! string focus-line-pattern
//! int focus-line-width
//! int focus-padding
//! int interior-focus
//! GDK2.Color link-color
//! int scroll-arrow-hlength
//! int scroll-arrow-vlength
//! int separator-height
//! int separator-width
//! GDK2.Color visited-link-color
//! int wide-separators

signal accel_closures_changed;
signal button_press_event;
//! Called when a mouse button is pressed
signal button_release_event;
//! Called when a mouse button is released
signal can_activate_accel;
signal child_notify;
signal client_event;
//! An event sent by another client application
signal composited_changed;
signal configure_event;
//! The size, position or stacking order of the widget has changed
signal delete_event;
//! Called when the user has requested that the widget should be closed
signal destroy_event;
//! Called when the widget is destroyed
signal direction_changed;
signal drag_begin;
//! Called when the drag is initiated, on the sending side
signal drag_data_delete;
//! Called when the data can be safely deleted (there is no need to use this
//! function in pigtk, it's all handled automatically)
signal drag_data_get;
//! Called on the sending side when the drop is initiated
signal drag_data_received;
//! Called on the receiving side when the drop is finished
signal drag_drop;
//! Called on the receiving side when the drop is initiated
signal drag_end;
//! Called when the drag is finished, on the sending side
require gtk212;
signal drag_failed;
endrequire;
signal drag_leave;
//! Called when the mouse leaves the widget while the user is dragging something
signal drag_motion;
//! Called on the receiving side when the cursor is moved over the widget while
//! dragging something
signal enter_notify_event;
//! Calls when the mouse enters the widget
signal event;
//! Called for all events
signal event_after;
signal expose_event;
//! Called when the widget, or a part of the widget, gets an expose event
signal focus;
signal focus_in_event;
//! The keyboard focus has entered the widget
signal focus_out_event;
//! The keyboard focus has left the widget
require gtk28;
signal grab_broken_event;
endrequire;
signal grab_focus;
signal grab_notify;
signal hide;
//! Called when the widget is hidden
signal hierarchy_changed;
signal key_press_event;
//! Called when a keyboard key is pressed
signal key_release_event;
//! Called when a keyboard key is released
require gtk212;
signal keynav_failed;
endrequire;
signal leave_notify_event;
//! Called when the mouse leaves the widget
signal map;
//! Called when the window associated with the widget is mapped
signal map_event;
//! Called just before the 'map' signal
signal mnemonic_activate;
signal motion_notify_event;
//! Called when the mouse is moved inside the widget
signal no_expose_event;
signal parent_set;
//! Called when the parent widget is changed
signal popup_menu;
signal property_notify_event;
//! Called when a property of the GDK window associated with the widget is
//! changed
signal proximity_in_event;
signal proximity_out_event;
require gtk212;
signal query_tooltip;
endrequire;
signal realize;
//! Called when the widget is realized.  Some methods cannot be used until the
//! widget has been realized; if you get assertion errors related to
//! 'w->window' or similar, this is probably the cause.
signal screen_changed;
signal scroll_event;
signal selection_clear_event;
signal selection_get;
signal selection_notify_event;
signal selection_received;
signal selection_request_event;
signal show;
//! Called when the widget is shown
signal show_help;
signal size_allocate;
//! Called when the widget gets the size it should be
signal size_request;
//! Called when the widget should calculate how big it wants to be
signal state_changed;
signal style_set;
//! Called when the style is changed
signal unmap;
//! Called when the window associated with the widget is unmapped
signal unmap_event;
//! Called just before the 'unmap' signal
signal unrealize;
//! Called when the widget is unrealized;
signal visibility_notify_event;
//! The widget has been mapped, unmapped, hidden, or otherwise had it's
//! visibility modified
signal window_state_event;

void show();
//! Show the widget.  Most (almost all) widgets must be shown to be
//! visible on the screen.

void show_now();
//! Shows a widget.  If the widget is an unmapped toplevel widget (i.e. a
//! GTK2.Window that has not yet been shown), enter the main loop and wait for
//! the window to actually be mapped.  Be careful; because the main loop is
//! running, anything can happen during this function.

void hide();
//! Hide the widget.

void show_all();
//! Show this widget, and all child widgets.

void hide_all();
//! Hide this widget, and all child widgets.

void map();
//! Causes this widget to be mapped.

void unmap();
//! Causes this widget to be unmapped.

void queue_draw();
//! Equivalent to calling queue_draw_area() for the entire area of the widget.

void queue_resize();
//! This function is only for use in widget implementations.  Flags a widget
//! to have its size renegotiated; should be called when a widget for some
//! reason has a new size request.  For example, when you change the text in a
//! W(Label), GTK2.Label queues a resize to ensure there's enough space for
//! the new text.

require gtk24;
void queue_resize_no_redraw();
//! This function works like queue_resize(), except that the widget is not
//! invalidated.
endrequire;

mapping size_request()
//! Get the size allocated to a widget.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    GtkRequisition r;
    gtk_widget_size_request(GTK_WIDGET(THIS->obj),&r);
    ref_push_string(_STR("width")); push_int(r.width);
    ref_push_string(_STR("height")); push_int(r.height);
    f_aggregate_mapping(4);
  }
}

mapping(string:int) allocation()
//! Returns ([ "x": xoffset, "y":yoffset, "width":xsize, "height":ysize ])
{
  pgtk2_verify_inited();
  ref_push_string(_STR("x")); push_int(GTK_WIDGET(THIS->obj)->allocation.x);
  ref_push_string(_STR("y")); push_int(GTK_WIDGET(THIS->obj)->allocation.y);
  ref_push_string(_STR("width")); push_int(GTK_WIDGET(THIS->obj)->allocation.width);
  ref_push_string(_STR("height")); push_int(GTK_WIDGET(THIS->obj)->allocation.height);
  f_aggregate_mapping(8);
}

void add_accelerator(string accel_signal, GTK2.AccelGroup accel_group,
                int accel_key, int accel_mods, int accel_flags);
//! Installs an accelerator in accel_group that causes accel_signal to be
//! emitted if the accelerator is activated.  The signal must be of type
//! G_RUN_ACTION.

int remove_accelerator(GTK2.AccelGroup accel_group, int accel_key,
		       int accel_mods);
//! Removes an accelerator.

void set_accel_path(string accel_path, GTK2.AccelGroup accel_group);
//! Sets up an accelerator in accel_group so whenever the key binding that is
//! defined for accel_path is pressed, this widget will be activated.

require gtk24;
int can_activate_accel(int signal_id);
//! Determines whether an accelerator that activates the signal signal_id can
//! currently be activated.
endrequire;

int activate();
//! For widgets that can be "activated" (buttons, menu items, etc.) this
//! functions activates them.  Activation is what happens when you press Enter
//! on a widget during key navigation.

void reparent(GTK2.Widget new_parent);
//! Moves a widget from one W(Container) to another.

int is_focus();
//! Determines if the widget is the focus widget within its toplevel.
//! (This does not mean that the HAS_FOCUS flag is necessarily set; HAS_FOCUS
//! will only be set if the toplevel widget additionally has the input focus.

void grab_focus();
//! Causes this widget to have the keyboard focus.  This widget must be a
//! focusable widget, such as a GTK2.Entry; something like GTK2.Frame won't
//! work.

void grab_default();
//! Causes this widget to become the default widget.

void set_name(string name);
//! Widgets can be named, which allows you to refer to them from a gtkrc file.
//! You can apply a style to widgets with a particular name in the gtkrc file.

string get_name();
//! Retrieves the name.

void set_sensitive(int sensitive);
//! Sets the sensitivity.  A widget is sensitive is the user can interact with
//! it.  Insensitive widgets are "grayed out" and the user can't interact with
//! them.  Insensitive widgets are known as "inactive", "disabled", or
//! "ghosted" in some other toolkits.

void set_parent(GTK2.Widget parent);
//! Sets the container as the parent of this widget.

void set_parent_window(GDK2.Window parent);
//! Sets a non default parent window for this widget.

+GDK2.Window get_parent_window();
//! Get the parent window.

void set_events(int events);
//! Sets the event mask for a widget.  The event mask determines which events
//! a widget will receive.  Keep in mind that different widgets have different
//! default event masks, and by changing the event mask you may disrupt a
//! widget's functionality, so be careful.  This function must be called while
//! a widget is unrealized.  Consider add_events() for widgets that are already
//! realized, or if you want to preserve the existing event mask.  This
//! function can't be used with GTK2.NO_WINDOW widgets; to get events on those
//! widgets, place them inside a GTK2.EventBox and receive events on the event
//! box.

void add_events(int events);
//! Adds the events in the bitfield events to the event mask.

void set_extension_events(int mode);
//! Sets the extension events mask to mode.  One of CONST(GDK_EXTENSION_EVENTS_)

int get_extension_events();
//! Retrieves the extension events the widget will receive.

+GTK2.Widget get_toplevel();
//! This function returns the topmost widget in the container hierarchy this
//! widget is a part of.  If this widget has no parent widgets, it will be
//! returned as the topmost widget.

int get_events();
//! Returns the event mask for the widget.

mapping get_pointer()
//! Obtains the location of the mouse pointer in widget coordinates.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    gint x,y;
    gtk_widget_get_pointer(GTK_WIDGET(THIS->obj),&x,&y);
    ref_push_string(_STR("x")); push_int(x);
    ref_push_string(_STR("y")); push_int(y);
    f_aggregate_mapping(4);
  }
}

int is_ancestor(GTK2.Widget ancestor);
//! Determines whether this widget is somewhere inside ancestor.

int hide_on_delete();
//! Utility function

void set_style(GTK2.Style style);
//! Sets the style.

+GTK2.Style get_style();
//! Returns the style.

void set_direction(int dir);
//! Sets the reading direction.  This direction controls the primary direction
//! for widgets containing text, and also the direction in which the children
//! of the container are packed.  The ability to set the direction is present
//! in order so that correct localization into languages with right-to-left
//! reading directions can be done.  Generally, applications will let the
//! default reading direction present, except for containers where the
//! containers are arranged in an order that is explicitly visual rather than
//! logical (such as buttons for text justification).

int get_direction();
//! Gets the reading direction.

void shape_combine_mask(GDK2.Bitmap shape_mask, int offset_x, int offset_y)
//! Sets a shape for a widget's GDK2.Window.  This allows for transparent
//! window, etc.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    INT_TYPE x,y;
    get_all_args(NULL,args,"%o%i%i",&o1,&x,&y);
    gtk_widget_shape_combine_mask(GTK_WIDGET(THIS->obj),
                (GdkBitmap *)get_gdkobject(o1,bitmap),x,y);
  }
  RETURN_THIS();
}

require gtk210;
void input_shape_combine_mask(GDK2.Bitmap shape_mask, int offset_x, int offset_y)
//! Sets an input shape for this widget's GDK2.Window.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    INT_TYPE x,y;
    get_all_args(NULL,args,"%o%i%i",&o1,&x,&y);
    gtk_widget_input_shape_combine_mask(GTK_WIDGET(THIS->obj), 
                (GdkBitmap *)get_gdkobject(o1,bitmap),x,y);
  } 
  RETURN_THIS();
}
endrequire;

string path()
//! Obtains the full path.  The path is simply the name of a widget and all
//! its parents in the container hierarchy, separated by periods.
{
  pgtk2_verify_inited();
  {
    guint len;
    gchar *path;
    gtk_widget_path(GTK_WIDGET(THIS->obj),&len,&path,NULL);
    pgtk2_pop_n_elems(args);
    PGTK_PUSH_GCHAR(path);
  }
}

string class_path()
//! Same as path() but uses type rather than name.
{
  pgtk2_verify_inited();
  {
    guint len;
    gchar *path;
    gtk_widget_class_path(GTK_WIDGET(THIS->obj),&len,&path,NULL);
    pgtk2_pop_n_elems(args);
    PGTK_PUSH_GCHAR(path);
  }
}

string get_composite_name();
//! Get the composite name.

void modify_style(GTK2.RcStyle style);
//! Modifies style values.
/*
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args(NULL,args,"%o",&o1);
    gtk_widget_modify_style(GTK_WIDGET(THIS->obj),
                GTK_RC_STYLE(get_gobject(o1)));
  }
  RETURN_THIS();
}
*/


+GTK2.RcStyle get_modifier_style();
//! Returns the current modifier style.
/*
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  push_gobject(gtk_widget_get_modifier_style(GTK_WIDGET(THIS->obj)));
}
*/

void modify_fg(int state, ?GDK2.Color color)
//! Sets the foreground color of the widget in a particular state.
//! state is one of CONST(GTK_STATE_).
//! color can be omitted to undo the effect of a previous call.
{
  pgtk2_verify_inited();
  {
    struct object *o1=NULL;
    INT_TYPE state;
    get_all_args(NULL,args,"%i.%o",&state,&o1);
    gtk_widget_modify_fg(GTK_WIDGET(THIS->obj),
                state,(GdkColor *)get_gdkobject(o1,color));
  }
  RETURN_THIS();
}

void modify_bg(int state, ?GDK2.Color color)
//! Sets the background color of the widget in a particular state.
//! See modify_fg().
{
  pgtk2_verify_inited();
  {
    struct object *o1=NULL;
    INT_TYPE state;
    get_all_args(NULL,args,"%i.%o",&state,&o1);
    gtk_widget_modify_bg(GTK_WIDGET(THIS->obj),
                state,(GdkColor *)get_gdkobject(o1,color));
  }
  RETURN_THIS();
}

void modify_text(int state, ?GDK2.Color color)
//! Sets the text color of the widget in a particular state.
//! See modify_fg().
{
  pgtk2_verify_inited();
  {
    struct object *o1=NULL;
    INT_TYPE state;
    get_all_args(NULL,args,"%i.%o",&state,&o1);
    gtk_widget_modify_text(GTK_WIDGET(THIS->obj),
                state,(GdkColor *)get_gdkobject(o1,color));
  }
  RETURN_THIS();
}

void modify_base(int state, ?GDK2.Color color)
//! Sets the base color of the widget in a particular state.
//! See modify_fg().
{
  pgtk2_verify_inited();
  {
    struct object *o1=NULL;
    INT_TYPE state;
    get_all_args(NULL,args,"%i.%o",&state,&o1);
    gtk_widget_modify_base(GTK_WIDGET(THIS->obj),
                state,(GdkColor *)get_gdkobject(o1,color));
  }
  RETURN_THIS();
}

require gtk212;
void modify_cursor(GDK2.Color primary, GDK2.Color secondary);
//! Sets the cursor color to use in a widget.
endrequire;

require pango;
void modify_font(Pango.FontDescription font)
//! Sets the font.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args(NULL,args,"%o",&o1);
    gtk_widget_modify_font(GTK_WIDGET(THIS->obj),
                (PangoFontDescription *)get_pg2object(o1,ppango2_font_description_program));
  }
  RETURN_THIS();
}

+Pango.Context create_pango_context();
//! Creates a new Pango.Context with the appropriate colormap, font
//! description, and base direction for drawing text for this widget.
/*
{
  pgtk2_verify_inited();
  {
    PangoContext *pc=gtk_widget_create_pango_context(GTK_WIDGET(THIS->obj));
    pgtk2_pop_n_elems(args);
    push_gobject(pc);
  }
}
*/

+Pango.Context get_pango_context();
//! Gets a Pango.Context with the appropriate colormap, font description, and
//! base direction for this widget.

+Pango.Layout create_pango_layout(string text);
//! Creates a new Pango.Layout with the appropriate colormap, font
//! description, and base direction for drawing text.
/*
{
  pgtk2_verify_inited();
  {
    PangoLayout *pl;
    const gchar *str;
    get_all_args(NULL,args,"%c",&str);
    pl=gtk_widget_create_pango_layout(GTK_WIDGET(THIS->obj),str);
    pgtk2_pop_n_elems(args);
    push_gobject(pl);
  }
}
*/
endrequire;

+GDK2.Pixbuf render_icon(string stock_id, int size, string detail)
//! A convenience function that uses the theme engine and rc file settings
//! to look up stock_id and render it to a pixbuf.  stock_id should be a
//! stock icon ID such as GTK2.STOCK_OPEN or GTK2.STOCK_OK.  size should be a
//! size such as GTK2.ICON_SIZE_MENU.  detail should be a string that identifies
//! the widget or code doing the rendering, so that theme engines can
//! special-case rendering for that widget or code.
//! <p>
//! The pixels in the returned GDK2.Pixbuf are shared with the rest of the
//! application and should not be modified.
{
  pgtk2_verify_inited();
  {
    const gchar *stock_id,*detail;
    INT_TYPE size;
    GdkPixbuf *gp;
    get_all_args(NULL,args,"%c%i%c",&stock_id,&size,&detail);
    gp=gtk_widget_render_icon(GTK_WIDGET(THIS->obj),stock_id,size,detail);
    pgtk2_pop_n_elems(args);
    push_gobject(gp);
  }
}

void queue_draw_area(int x, int y, int width, int height);
//! Invalidates the rectangular area defined by x,y,width,height by calling
//! GDK2.Window->invalidate_rect() on the widget's window and all its child
//! windows.  Once the main loop becomse idle (after the current batch of
//! events has been processed, roughly), the window will receive expose events
//! for the union of all regions that have been invalidated.

void reset_shapes();
//! Recursively resets the shape on this widget and its descendants.

void set_composite_name(string name);
//! Sets a widget's composite name.

void set_scroll_adjustments(GTK2.Adjustment hadj, GTK2.Adjustment vadj);
//! For widgets that support scrolling, sets the scroll adjustments.  For
//! widgets that don't support scrolling, does nothing.  Widgets that don't
//! support scrolling can be scrolled by placing them in a W(Viewport), which
//! does support scrolling.

int mnemonic_activate(int group_cycling);
//! Not documented.

mixed style_get_property(string name)
//! Gets the value of the style property called name.
{
  pgtk2_verify_inited();
  {
    char *name;
    GValue v = {0};
    get_all_args(NULL,args,"%c",&name);
    gtk_widget_style_get_property(GTK_WIDGET(THIS->obj),name,&v);
/*  pgtk2_push_gvalue(&v); */
    pgtk2_pop_n_elems(args);
    push_gvalue_r(&v,G_VALUE_TYPE(&v));
    g_value_unset( &v );
/*    push_int(0); */
  }
}

void child_notify(string prop);
//! Emits a "child-notify" signal for the child property prop.

void freeze_child_notify();
//! Stops emission of "child-notify" signals.  The signals are queued until
//! thaw_child_notify() is called on the widget.

+GTK2.Widget get_parent();
//! Returns the parent container.

+GTK2.Settings get_settings();
//! Gets the settings object holding the settings (global property settings,
//! RC file information, etc) used for this widget.

require gtk22;
+GTK2.Clipboard get_clipboard(GDK2.Atom selection)
//! Returns the clipboard object for the given selection.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    GtkClipboard *gcl;
    get_all_args(NULL,args,"%o",&o1);
    gcl=gtk_widget_get_clipboard(GTK_WIDGET(THIS->obj),get_gdkatom(o1));
    pgtk2_pop_n_elems(args);
    push_gobject(gcl);
  }
}

+GDK2.Display get_display();
//! Get the GDK2.Display for the toplevel window associated with this widget.
//! This function can only be called after the widget has been added to a
//! widget hierarchy with a GTK2.Window at the top.

+GDK2.Window get_root_window();
//! Get the root window.

GDK2.Screen get_screen();
//! Get the GDK2.Screen from the toplevel window associated with this widget.

int has_screen();
//! Checks whether there is a GDK2.Screen associated with this widget.
endrequire;

mapping get_size_request()
//! Gets the size request that was explicityly set for the widget using
//! set_size_request().  A value of -1 for width or height indices that that
//! dimension has not been set explicityly and the natural requisition of
//! the widget will be used instead.  To get the size a widget will actually
//! use, call size_request() instead.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    gint w,h;
    gtk_widget_get_size_request(GTK_WIDGET(THIS->obj),&w,&h);
    ref_push_string(_STR("width")); push_int(w);
    ref_push_string(_STR("height")); push_int(h);
    f_aggregate_mapping(4);
  }
}

void set_size_request(int width, int height);
//! Sets the minimum size of a widget; that is, the widget's size request will
//! be width by height.  You can use this function to force a widget to be
//! either larger or smaller than it normally would be.
//! <p>
//! In most cases, set_default_size() is a better choice for toplevel windows
//! than this function; setting the default size will still allow users to
//! shrink the window.  Setting the size request will force them to leave the
//! window at least as large as the size request.  When dealing with window
//! sizes, set_geometry_hints() can be a useful function as well.
//! <p>
//! Note the inherent danger of setting any fixed size - themes, translations
//! into other languages, different fonts, and user action can all change the
//! appropriate size for a given widget.  So, it's basically impossible to
//! hardcode a size that will always be correct.
//! <p>
//! The size request of a widget is the smallest size a widget can accept while
//! still functioning well and drawing itself correctly.  However in some
//! strange cases a widget may be allocated less than its requested size, and
//! in many cases a widget may be allocated more space than it request.
//! <p>
//! If the size request in a given direction is -1 (unset), then the "natural"
//! size request of the widget will be used instead.
//! <p>
//! Widgets can't actually be allocated a size less than 1x1, but you can pass
//! 0,0 to this function to mean "as small as possible".

void thaw_child_notify();
//! Reverts the effect of a previous call to freeze_child_notify().

require gtk24;
void set_no_show_all(int no_show_all);
//! Sets the "no-show-all" property, which determines whether calls to
//! show_all() and hide_all() will affect this widget.

int get_no_show_all();
//! Returns the current value of the "no-show-all" property.

array(GTK2.Widget) list_mnemonic_lables()
//! Returns a list of the widgets, normally labels, for which this widget is
//! the target of a mnemonic.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    GList *gl,*g2;
    int i=0;
    gl=g2=gtk_widget_list_mnemonic_labels(GTK_WIDGET(THIS->obj));
    while (g2) {
      g_object_ref(g2->data);
      push_gobject(g2->data);
      i++;
      g2=g_list_next(g2);
    }
    f_aggregate(i);
    g_list_free(gl);
  }
}

void add_mnemonic_label(GTK2.Widget label);
//! Adds a widget to the list of mnemonic lables for this widget.  Note the
//! list of mnemonic labels for the widget is cleared when the widget is
//! destroyed, so the caller must make sure to update it's internal state at
//! this point as well, by using a connection to the destroy signal.

void remove_mnemonic_label(GTK2.Widget label);
//! Removes a widget from the list of mnemonic labels for this widget.
endrequire;

require gtk210;
+GTK2.Action get_action();
//! Returns the GTK2.Action that this widget is a proxy for.

int is_composited();
//! Whether this widget can rely on having its alpha channel drawn correctly.
endrequire;

require gtk212;
void error_bell();
//! Notifies the user about an input-related error on this widget. If the 
//! "gtk-error-bell" setting is TRUE, it calls gdk_window_beep(), otherwise it 
//! does nothing

int keynav_failed(int direction);
//! This function should be called whenever keyboard navigation within a 
//! single widget hits a boundary. The function emits the "keynav-changed" 
//! signal on the widget and its return value should be interpreted in a way 
//! similar to the return value of widget->child_focus():
//! <p>
//! When TRUE is returned, stay in the widget, the failed keyboard navigation 
//! is Ok and/or there is nowhere we can/should move the focus to.
//! <p>
//! When FALSE is returned, the caller should continue with keyboard 
//! navigation outside the widget, e.g. by calling widget->child_focus() 
//! on the widget's toplevel.
//! <p>
//! The default ::keynav-failed handler returns TRUE for GTK_DIR.TAB_FORWARD 
//! and GTK_DIR.TAB_BACKWARD. For the other values of GtkDirectionType, it 
//! looks at the "gtk-keynav-cursor-only"" setting and returns FALSE if the 
//! setting is TRUE. This way the entire user interface becomes 
//! cursor-navigatable on input devices such as mobile phones which only have 
//! cursor keys but no tab key.
//! <p>
//! Whenever the default handler returns TRUE, it also calls 
//! widget->error_bell() to notify the user of the failed keyboard navigation. 

string get_tooltip_markup();
//! Gets the contents of the tooltip

void set_tooltip_markup(string markup);
//! Sets markup as the contents of the tooltip

string get_tooltip_text();
//! Gets the contents of the tooltip

void set_tooltip_text(string text);
//! Sets text as the contents of the tooltip.

GTK2.Window get_tooltip_window();
//! Returns the GtkWindow of the current tooltip

void set_tooltip_window(GTK2.Window window);
//! Replaces the default, usually yellow, window used for displaying tooltips.

void trigger_tooltip_query();
//! Triggers a tooltip query
endrequire;

require gtk214;
GDK2.Pixmap get_snapshot(GDK2.Rectangle clip_rect)
//! Create a GDK2.Pixmap of the contents of the widget and its children
//!
//! Works even if the widget is obscured.  The depth and visual of the
//! resulting pixmap is dependent on the widget being snapshot and likely
//! differs from those of a target widget displaying the pixmap.  The function
//! GDK2.Pixbuf->get_from_drawable() can be used to convert the pixmap to a
//! visual independent representation.
//!
//! The snapshot are used by this function is the widget's allocation plus
//! any extra space occupied by additional windows belonging to this widget
//! (such as the arrows of a spin button).  Thus, the resulting snapshot
//! pixmap is possibly larger than the allocation.
//!
//! If clip_rect is non-null, the resulting pixmap is shrunken to match the
//! specified clip_rect. The (x,y) coordinates of clip_rect are interpreted
//! widget relative.  If width or height of clip_rect are 0 or negative,
//! the width or height of the resulting pixmap will be shurnken by the
//! respective amount.  For instance, a clip_rect (+5,+5,-10,-10) will chop
//! off 5 pixels at each side of the snapshot pixmap. If non-null, clip_rect
//! will contain the exact widget-relative snapshot coordinates upon return.
//! A clip_rect of (-1,-1,0,0) can be used to preserve the auto-grown snapshot
//! area and use clip_rect as a pure output parameter.
//!
//! The return pixmap can be 0, if the resulting clip_area was empty.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    GdkPixmap *pixmap=NULL;
    get_all_args(NULL,args,"%O",&o1);
    pixmap=gtk_widget_get_snapshot(GTK_WIDGET(THIS->obj),
			(GdkRectangle *)get_gdkobject(o1,rectangle));
    pgtk2_pop_n_elems(args);
    push_gobject(pixmap);
  }
}

GDK2.Window get_window();
//! Returns the widget's window if it is realized, other NULL.
endrequire;

not gtk214;
GDK2.Window get_window()
{
  pgtk2_verify_inited();
  /* Prior to GTK 2.14 this was retrieved straight from the struct. cf:
  http://mail.gnome.org/archives/gtk-devel-list/2004-September/msg00087.html */
  push_gobject(GTK_WIDGET(THIS->obj)->window);
}
endnot;

%{
//Helper for drag_source_set and drag_dest_set
//Returns 0 on success, 1 to raise an error
//Also used in gtktreeview.pre
int _decode_targets(struct array *targ, GtkTargetEntry *drag_targets)
{
    int i;
    for (i=0; i<targ->size; i++) {
      struct array *cur;
      struct pike_string *str;
      INT32 min, max;
      if (TYPEOF(ITEM(targ)[i]) != PIKE_T_ARRAY) return 1;
      cur = ITEM(targ)[i].u.array;
      if (cur->size != 3) return 1;
      if (TYPEOF(ITEM(cur)[0]) != PIKE_T_STRING
          || TYPEOF(ITEM(cur)[1]) != PIKE_T_INT
          || TYPEOF(ITEM(cur)[2]) != PIKE_T_INT)
        return 1;
      str = ITEM(cur)[0].u.string;
      /* The string has to be printable ASCII - it should be a MIME type.
      Quick check: ASCII strings will have size_shift of zero. */
      if (str->size_shift) return 1;
      /* But not all eight-bit strings are printable ASCII. */
      check_string_range(str, 0, &min, &max);
      if (min < ' ' || max >= 128) return 1;
      drag_targets[i].target = str->str;
      drag_targets[i].flags = ITEM(cur)[1].u.integer;
      drag_targets[i].info = ITEM(cur)[2].u.integer;
    }
    return 0;
}
%}

void drag_source_set(int buttons, array targets, int actions)
//! Set this widget up so a drag operation will start when the user clicks and
//! drags on this widget.
//! <p>
//! buttons is a bitwise 'or' of the mouse buttons that can initiate dragging,
//! eg GTK2.GDK_BUTTON1_MASK.
//! <p>
//! targets is an array of triples eg ({({"text/plain", GTK2.TARGET_SAME_APP, 0})})
//! where each triple gives an identifying MIME type, a flag specifying whether the
//! drag should be allowed to go to other applications, and an ID which will be
//! passed on to signal handlers. NOTE: For internal reasons, you are currently
//! permitted a maximum of ten targets.
//! <p>
//! actions is the set of valid actions that can be performed; use constants
//! GTK2.GDK_ACTION_COPY|GTK2.GDK_ACTION_MOVE etc.
{
  pgtk2_verify_inited();
  {
    INT_TYPE btn, act;
    struct array *targ;
    GtkTargetEntry drag_targets[10];

    get_all_args(NULL, args, "%d%a%d", &btn, &targ, &act);
    /* Once C99 is supported - check the Windows builds - replace the above
    declaration with a dynamic array, and remove the guard condition in the
    arg type check. Then you'll be able to have more than ten drag targets,
    and memory will be allocated more tightly. Do this again in three other
    places where the same thing can be found.
    GtkTargetEntry drag_targets[targ->size]; */
    if (targ->size > 10 || _decode_targets(targ, drag_targets))
      SIMPLE_ARG_TYPE_ERROR("drag_source_set", 2, "array(array(string|int))");
    gtk_drag_source_set(GTK_WIDGET(THIS->obj), btn,
      drag_targets, targ->size, act);
  }
  RETURN_THIS();
}

void drag_dest_set(int flags, array targets, int actions)
//! Set this widget up so it can accept drops. Parallel to @[drag_source_set]
//! - see there for arg info. flags allows default drop behaviour to turned on
//! and off; use GTK2.DEST_DEFAULT_ALL for normal behaviour.
{
  pgtk2_verify_inited();
  {
    INT_TYPE flags, act;
    struct array *targ;
    GtkTargetEntry drag_targets[10];

    get_all_args(NULL, args, "%d%a%d", &flags, &targ, &act);
    if (targ->size > 10 || _decode_targets(targ, drag_targets))
      SIMPLE_ARG_TYPE_ERROR("drag_dest_set", 2, "array(array(string|int))");
    gtk_drag_dest_set(GTK_WIDGET(THIS->obj), flags,
      drag_targets, targ->size, act);
  }
  RETURN_THIS();
}

void set_flags(int flags)
//! Set certain flags, such as GTK2.CAN_DEFAULT.
{
  pgtk2_verify_inited();
  {
    INT_TYPE flags;
    get_all_args(NULL,args,"%i",&flags);
    GTK_WIDGET_SET_FLAGS(GTK_WIDGET(THIS->obj),flags);
  }
  RETURN_THIS();
}

void unset_flags(int flags)
//! Unset flags.
{
  pgtk2_verify_inited();
  {
    INT_TYPE flags;
    get_all_args(NULL,args,"%i",&flags);
    GTK_WIDGET_UNSET_FLAGS(GTK_WIDGET(THIS->obj),flags);
  }
  RETURN_THIS();
}

void STATE()
//! Get the state.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_STATE(THIS->obj));
}

void SAVED_STATE()
//! Get the saved state.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_SAVED_STATE(THIS->obj));
}

void FLAGS()
//! Returns flags.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_FLAGS(THIS->obj));
}

void TOPLEVEL()
//! Returns if this is a toplevel widget.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_TOPLEVEL(THIS->obj));
}

void NO_WINDOW()
//! Returns if this widget doesn't have its own GDK2.Window.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_NO_WINDOW(THIS->obj));
}

void REALIZED()
//! Returns if this widget is realized.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_REALIZED(THIS->obj));
}

void MAPPED()
//! Returns if this widget is mapped.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_MAPPED(THIS->obj));
}

void VISIBLE()
//! Returns if this widget is visible.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_VISIBLE(THIS->obj));
}

void DRAWABLE()
//! Returns if this widget is mapped and visible.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_DRAWABLE(THIS->obj));
}

void SENSITIVE()
//! Returns if this widget is sensitive.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_SENSITIVE(THIS->obj));
}

void PARENT_SENSITIVE()
//! Returns if the GTK2.PARENT_SENSITIVE flag is set.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_PARENT_SENSITIVE(THIS->obj));
}

void IS_SENSITIVE()
//! Returns if this widget is effectively sensitive.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_IS_SENSITIVE(THIS->obj));
}

void CAN_FOCUS()
//! Returns if this widget is able to handle focus grabs.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_CAN_FOCUS(THIS->obj));
}

void HAS_FOCUS()
//! Returns if this widget has grabbed the focus and no other widget has done
//! so more recently.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_HAS_FOCUS(THIS->obj));
}

void CAN_DEFAULT()
//! Returns if this widget is allowed to receive the default action.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_CAN_DEFAULT(THIS->obj));
}

void RECEIVES_DEFAULT()
//! Returns if this widget when focused will receive the default action even
//! if there is a different widget set as default.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_RECEIVES_DEFAULT(THIS->obj));
}

void HAS_DEFAULT()
//! Returns if this widget is currently receiving the default action.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_HAS_DEFAULT(THIS->obj));
}

void HAS_GRAB()
//! Returns if this widget is in the grab_widgets stack, and will be the
//! preferred one for receiving events other than ones of cosmetic value.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_HAS_GRAB(THIS->obj));
}

void RC_STYLE()
//! Returns if the widget's style has been looked up through the rc mechanism.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_RC_STYLE(THIS->obj));
}

void COMPOSITE_CHILD()
//! Returns if this widget is a composite child of its parent.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_COMPOSITE_CHILD(THIS->obj));
}

void APP_PAINTABLE()
//! Returns if the GTK2.APP_PAINTABLE flag has been set on this widget.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_APP_PAINTABLE(THIS->obj));
}

void DOUBLE_BUFFERED()
//! Returns if the GTK2.DOUBLE_BUFFERED flag has been set on this widget.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  PGTK_PUSH_INT(GTK_WIDGET_DOUBLE_BUFFERED(THIS->obj));
}

