/* -*- C -*- */
class GTK2.Socket;
inherit GTK2.Container;

//! Together with W(Plug), GTK2.Socket provides the ability to embed
//! widgets from one process into another process in a fashion that is
//! transparent to the user. One process creates a GTK2.Socket widget
//! and, passes the XID of that widget's window to the other process,
//! which then creates a W(Plug) window with that XID. Any widgets
//! contained in the W(Plug) then will appear inside the first
//! applications window.
//! <p>
//! Note that if you pass the XID of the socket to another process
//! that will create a plug in the socket, you must make sure that the
//! socket widget is not destroyed until that plug is
//! created. Violating this rule will cause unpredictable
//! consequences, the most likely consequence being that the plug will
//! appear as a separate toplevel window.
//! </p><p>
//!  A socket can also be used to swallow arbitrary pre-existing
//!  top-level windows using steal(), though the integration when this
//!  is done will not be as close as between a W(Plug) and a
//!  GTK2.Socket.
//! </p>

signal plug_added;
signal plug_removed;

void create(?mapping(string:mixed) props)
//! Create a new GTK2.Socket.
{
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  if (args) {
    INIT_WITH_PROPS(GTK_TYPE_SOCKET);
    pgtk2_pop_n_elems(args);
  } else {
    GtkWidget *gs;
    gs=gtk_socket_new();
    THIS->obj=G_OBJECT(gs);
  }
  pgtk2__init_this_object();
}

int id()
//! Returns the window id, to be sent to the application providing the plug.
//! <br />You must realize this widget before calling this function.
{
  ptrdiff_t wid = (ptrdiff_t)gtk_socket_get_id(GTK_SOCKET(THIS->obj));
  pgtk2_pop_n_elems(args);
  push_int64 (wid);
}

void add_id(int wid)
//! Adds an XEMBED client, such as a W(Plug), to the W(Socket).
{
  /* NB: GdkNativeWindow is a pointer type on NT and MacOS X. */
  GdkNativeWindow a0;
  if( args < 1 )
    SIMPLE_WRONG_NUM_ARGS_ERROR(NULL, 1);
  a0 = (GdkNativeWindow)(ptrdiff_t)PGTK_GETINT(&Pike_sp[0-args]);
  pgtk2_verify_inited();
  gtk_socket_add_id( GTK_SOCKET(THIS->obj), a0 );
  RETURN_THIS();
}

int get_id()
//! Gets the window id of a W(Socket) widget, which can then be used
//! to create a client embedded inside the socket, for instance with
//! GTK2.Plug->create().
{
  pgtk2_verify_inited();
  {
    /* NB: GdkNativeWindow is a pointer type on NT and MacOS X. */
    GdkNativeWindow a1;
    a1 = gtk_socket_get_id( GTK_SOCKET(THIS->obj) );
    my_pop_n_elems(args);
    PGTK_PUSH_INT( (ptrdiff_t)a1 );
  }
}

/*
int has_plug()
//! Returns true if this socket is occupied
{
  pgtk2_pop_n_elems(args);
  if( GTK_SOCKET( THIS->obj )->plug_window
      || gtk_container_children( GTK_CONTAINER( THIS->obj )) )
    push_int( 1 );
  else
    push_int( 0 );
}
*/


