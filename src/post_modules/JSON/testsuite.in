START_MARKER

test_true(Val.true)
test_false(Val.false)
test_false(Val.null)

test_eq(Standards.JSON.true, Val.true)
test_eq(Standards.JSON.false, Val.false)
test_eq(Standards.JSON.null, Val.null)

test_eq(Standards.JSON.ASCII_ONLY, 1)
test_eq(Standards.JSON.HUMAN_READABLE, 2)
test_eq(Standards.JSON.PIKE_CANONICAL, 4)

define(test_enc,[[
  test_eq(Standards.JSON.encode([[$1]],
				Standards.JSON.PIKE_CANONICAL|([[$3]]-0)),
	  [[$2]])
]])
define(test_dec_enc,[[
  test_equal(Standards.JSON.decode ([[$1]]), [[$2]])
  test_eq(Standards.JSON.validate ([[$1]]), -1)
  test_equal(Standards.JSON.decode_utf8 (string_to_utf8 ([[$1]])), [[$2]])
  test_eq(Standards.JSON.validate_utf8 (string_to_utf8 ([[$1]])), -1)
  test_equal(Standards.JSON.decode (Standards.JSON.encode ([[$2]])), [[$2]])
  test_equal(Standards.JSON.decode (Standards.JSON.encode ([[$2]], Standards.JSON.ASCII_ONLY)), [[$2]])
  test_equal(Standards.JSON.decode (Standards.JSON.encode ([[$2]], Standards.JSON.HUMAN_READABLE)), [[$2]])
  test_equal(Standards.JSON.decode (Standards.JSON.encode ([[$2]], Standards.JSON.PIKE_CANONICAL)), [[$2]])
  test_equal(Standards.JSON.decode (Standards.JSON.encode ([[$2]], 7)), [[$2]])
]])

define(test_dec_enc_canon,[[
  test_dec_enc([[$1]], [[$2]])
  test_enc([[$2]], [[$1]], [[$3]])
]])

define(test_dec_enc_string,[[
  test_dec_enc_canon("\"[[$1]]\"", "[[$2]]", [[$3]])
  test_eq(Standards.JSON.escape_string ("[[$2]]", [[$3]]), "[[$1]]")
]])

define(test_dec_error,[[
  test_eq(Standards.JSON.validate ([[$1]]), [[$2]])
  test_eval_error(Standards.JSON.decode ([[$1]]))
  test_any([[
    string s;
    if (catch (s = string_to_utf8 ($1))) return 1;
    return !!Standards.JSON.validate_utf8 (s);
  ]], 1)
  test_eval_error(Standards.JSON.decode_utf8 (string_to_utf8 ([[$1]])))
]])

test_dec_enc_canon("-1", -1)
test_dec_enc_canon("0", 0)
test_dec_enc_canon("1", 1)
test_dec_enc_canon((string) (Int.NATIVE_MAX + 1), Int.NATIVE_MAX+1)
test_dec_enc_canon((string) (Int.NATIVE_MIN - 1), Int.NATIVE_MIN-1)
test_enc(UNDEFINED, "null")

test_dec_enc_canon("-1.0", -1.0)
test_dec_enc_canon("0.0", 0.0)
test_dec_enc_canon("1.0", 1.0)
test_eq(Standards.JSON.encode(Math.inf),"null")
test_eq(Standards.JSON.encode(Math.nan),"null")

test_dec_enc_canon("\"\"", "")
test_dec_enc_string(\\\"\\\\\\b\\f\\n\\r\\t, \"\\\b\f\n\r\t)
test_dec_enc_string(\u0123, \x0123)
test_dec_enc_string(\u20ac, \x20AC)
test_eval_error(Standards.JSON.encode("\x0123456"))

test_dec_enc_string(\u2027\\u2028\\u2029\u2030, \u2027\u2028\u2029\u2030)
test_dec_enc_string(foo\\ud834\\udd1ebar, foo\U0001d11ebar,
		    Standards.JSON.ASCII_ONLY)
test_dec_enc_string(\ud7ff, \ud7ff)
test_dec_enc_string(\ue000, \ue000)
test_dec_error("\"\U00110000\"", 1)
test_dec_error("\"\\ud800\"", 7)
test_dec_error("\"\\ud800\\ud834\\udd1e\"", 12)
test_dec_error("\"\\udc47\"", 6)

test_dec_enc_canon("[]", ({}))
test_dec_enc_canon([[ "[1,2.0,\"3\"]" ]], ({1,2.0,"3"}))
test_eval_error([[
array a = ({ 1, 2 });
a[1] = a;
return Standards.JSON.encode(a);
]])

test_dec_enc_canon("{}",  ([]))
test_dec_enc_canon([["{\"a\":1,\"b\":2.0,\"c\":\"3\"}"]],
		   ([ "a":1, "b":2.0, "c":"3" ]))
test_eval_error(Standards.JSON.encode( ([1:2]) ))
test_eval_error([[
mapping m = ([ "a":1 ]);
m->a = m;
return Standards.JSON.encode(m);
]])

test_dec_enc_canon([["{\"a\":[{\"b\":2}]}"]], ([ "a":({(["b":2])}) ]))

test_enc(Val.null, "null")
test_eval_error( Standards.JSON.encode(Val.Null) ) dnl FIXME?
					dnl No, we can't encode types. /mast
test_any([[
class X { string encode_json() { return "smallpox"; } };
return Standards.JSON.encode(X());
]], "smallpox")

test_true(functionp(Standards.JSON.decode))
test_true(functionp(Standards.JSON.encode))
test_true(functionp(Standards.JSON.validate))

dnl Standards.JSON.CANONICAL (RFC 8785)
dnl
dnl NB: These are only valid on platforms where PIKE_FLOAT is double.
cond(Pike.get_runtime_info()->float_size >= 64, [[
  dnl rfc8785 3.2.4
  test_eq([[
    string_to_utf8(Standards.JSON.encode(Standards.JSON.decode(#[
    {"literals":[null,true,false],"numbers":[333333333.3333333,
       1e+30,4.5,0.002,1e-27],"string":"\u20ac$\u000f\nA'B\"\\\\\"/"}
  #]), Standards.JSON.CANONICAL))
  ]], String.hex2string(#"
       7b 22 6c 69 74 65 72 61 6c 73 22 3a 5b 6e 75 6c 6c 2c 74 72
       75 65 2c 66 61 6c 73 65 5d 2c 22 6e 75 6d 62 65 72 73 22 3a
       5b 33 33 33 33 33 33 33 33 33 2e 33 33 33 33 33 33 33 2c 31
       65 2b 33 30 2c 34 2e 35 2c 30 2e 30 30 32 2c 31 65 2d 32 37
       5d 2c 22 73 74 72 69 6e 67 22 3a 22 e2 82 ac 24 5c 75 30 30
       30 66 5c 6e 41 27 42 5c 22 5c 5c 5c 5c 5c 22 2f 22 7d
  "))

  dnl rfc8785 Appendix B
  test_any_equal([[
    array(string|zero) res = ({});
    foreach(({
      "0000000000000000", "8000000000000000",
      "0000000000000001", "8000000000000001",
      "7fefffffffffffff", "ffefffffffffffff",
      "4340000000000000", "c340000000000000",
      "4430000000000000", "7fffffffffffffff",
      "7ff0000000000000", "44b52d02c7e14af5",
      "44b52d02c7e14af6", "44b52d02c7e14af7",
      "444b1ae4d6e2ef4e", "444b1ae4d6e2ef4f",
      "444b1ae4d6e2ef50", "3eb0c6f7a0b5ed8c",
      "3eb0c6f7a0b5ed8d", "41b3de4355555553",
      "41b3de4355555554", "41b3de4355555555",
      "41b3de4355555556", "41b3de4355555557",
      "becbf647612f3696", "43143ff3c1cb0959",
    }), string hex) {
      sscanf(String.hex2string(hex), "%8F", float f);
      string|zero enc;
      catch {
        enc = Standards.JSON.encode(f, Standards.JSON.CANONICAL);
      };
      res += ({ enc });
    }
    return res;
  ]], ({
    "0",
    "0",
    "5e-324",
    "-5e-324",
    "1.7976931348623157e+308",
    "-1.7976931348623157e+308",
    "9007199254740992",
    "-9007199254740992",
    "295147905179352830000",
    0,
    0,
    "9.999999999999997e+22",
    "1e+23",
    "1.0000000000000001e+23",
    "999999999999999700000",
    "999999999999999900000",
    "1e+21",
    "9.999999999999997e-7",
    "0.000001",
    "333333333.3333332",
    "333333333.33333325",
    "333333333.3333333",
    "333333333.3333334",
    "333333333.33333343",
    "-0.0000033333333333333333",
    "1424953923781206.2",
  }))
]])

cond(Pike.get_runtime_info()->float_size == 32, [[
  dnl rfc8785 3.2.4, adjusted for 32-bit floats.
  test_eq([[
    string_to_utf8(Standards.JSON.encode(Standards.JSON.decode(#[
      {"literals":[null,true,false],"numbers":[333333300,
       1e+30,4.5,0.002,1e-27],"string":"\u20ac$\u000f\nA'B\"\\\\\"/"}
  #]), Standards.JSON.CANONICAL))
  ]], String.hex2string(#"
       7b 22 6c 69 74 65 72 61 6c 73 22 3a 5b 6e 75 6c 6c 2c 74 72
       75 65 2c 66 61 6c 73 65 5d 2c 22 6e 75 6d 62 65 72 73 22 3a
       5b 33 33 33 33 33 33 33 30 30 2c 31 65 2b 33 30 2c 34 2e 35
       2c 30 2e 30 30 32 30 30 30 30 30 30 31 2c 31 65 2d 32 37 5d
       2c 22 73 74 72 69 6e 67 22 3a 22 e2 82 ac 24 5c 75 30 30 30
       66 5c 6e 41 27 42 5c 22 5c 5c 5c 5c 5c 22 2f 22 7d
  "))

  dnl rfc8785 Appendix B, adjusted for 32-bit floats.
  test_any_equal([[
    array(string|zero) res = ({});
    foreach(({
      "00000000", "80000000",	// 0.0, -0.0
      "00000001", "80000001",	// epsilon, -epsilon
      "7f7fffff", "ff7fffff",	// max, min
      "4b800000", "cb800000",	// max int, min int
      "61800000", "7fffffff",	// ~2^68, NaN
      "7ff00000", "65a96816",	// Infinity, 1e+23 - epsilon
      "65a96817", "65a96818",	// 1e+23, 1e+23 + epsilon
      "6258d725", "6258d726",	// 1e+21 - 2epsilon, 1e+21 - epsilon
      "6258d727", "358637bc",	// 1e+21, 1e-6 - epsilon
      "358637bd", "45505553",	// 1e-6, 1e+4/3 - 2epsilon
      "45505554", "45505555",	// 1e+4/3 - epsilon, 1e+4/3
      "45505556", "45505557",	// 1e+4/3 + epsilon, 1e+4/3 + 2epsilon
      "b65fb23b", "4a7ffffd",	// -1e-5/3, (max int - 3)/4 round to even
    }), string hex) {
      sscanf(String.hex2string(hex), "%4F", float f);
      string|zero enc;
      catch {
        enc = Standards.JSON.encode(f, Standards.JSON.CANONICAL);
      };
      res += ({ enc });
    }
    return res;
  ]], ({
    "0",
    "0",
    "1.4012985e-45",
    "-1.4012985e-45",
    "3.4028235e+38",
    "-3.4028235e+38",
    "16777216",
    "-16777216",
    "295147910000000000000",
    0,
    0,
    "9.9999998e+22",
    "1.0000001e+23",
    "1.0000002e+23",
    "999999880000000000000",
    "999999950000000000000",
    "1e+21",
    "9.9999988e-7",
    "0.000001",
    "3333.3328",
    "3333.333",
    "3333.3333",
    "3333.3335",
    "3333.3337",
    "-0.0000033333333",
    "4194303.2",
  }))
]])

// test the special types
test_eq(Val.true, Standards.JSON.decode("true"))
test_eq(Val.false, Standards.JSON.decode("false"))
test_eq(Val.null, Standards.JSON.decode("null"))
test_eq(1, Standards.JSON.decode("true", Standards.JSON.NO_OBJECTS))
test_eq(0, Standards.JSON.decode("false", Standards.JSON.NO_OBJECTS))
test_false(undefinedp(Standards.JSON.decode("false", Standards.JSON.NO_OBJECTS)))
test_eq(0, Standards.JSON.decode("null", Standards.JSON.NO_OBJECTS))
test_true(undefinedp(Standards.JSON.decode("null", Standards.JSON.NO_OBJECTS)))

// test numbers
test_eq(Standards.JSON.decode("0E4"), 0.0)

// test reference counter.
// not sure how stable that is among pike versions....
// It better be, or else we got garbage trouble. /mast
test_true(Debug.refs(Standards.JSON.decode("\" It says little, does less, means nothing.\"")) == 1)
test_eq(Debug.refs(Standards.JSON.decode(" { \"asd\" : 45 }  ")), 1)
test_eq(Debug.refs(Standards.JSON.decode(" [ 45, 34, 3, 4, 5 ] ")), 1)

// testing if junk at the end breaks
test_true(-1 != Standards.JSON.validate_utf8("[ 32, 23, 43  , 54   ,45]        uh"))
test_eq(-1, Standards.JSON.validate_utf8("[ 32, 23, 43  , 54   ,45]       "))

test_dec_enc_string(\\\\/\\\"\\\"\\\\, \\/\"\"\\)
test_dec_enc_string(\\\\/skjdhf\\\"sdf\\\"d\\\\, \\/skjdhf\"sdf\"d\\)

// test examples from json.org
test_dec_enc([[
"{\
    \"glossary\": {\
        \"title\": \"example glossary\",\
	\"GlossDiv\": {\
            \"title\": \"S\",\
	    \"GlossList\": {\
                \"GlossEntry\": {\
                    \"ID\": \"SGML\",\
		    \"SortAs\": \"SGML\",\
		    \"GlossTerm\": \"Standard Generalized Markup Language\",\
		    \"Acronym\": \"SGML\",\
		    \"Abbrev\": \"ISO 8879:1986\",\
		    \"GlossDef\": {\
                        \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\
			\"GlossSeeAlso\": [\"GML\", \"XML\"]\
                    },\
		    \"GlossSee\": \"markup\"\
                }\
            }\
        }\
    }\
}\
"]], [[([
    "glossary": ([
        "title": "example glossary",
	"GlossDiv": ([
            "title": "S",
	    "GlossList": ([
                "GlossEntry": ([
                    "ID": "SGML",
		    "SortAs": "SGML",
		    "GlossTerm": "Standard Generalized Markup Language",
		    "Acronym": "SGML",
		    "Abbrev": "ISO 8879:1986",
		    "GlossDef": ([
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
			"GlossSeeAlso": ({"GML", "XML"})
                    ]),
		    "GlossSee": "markup"
                ])
            ])
        ])
    ])
])]])
test_dec_enc([["    {	 \"menu\": 	{\
  \"id\": \"file\",\
  \"value\": \"File\",\
  \"popup\": {\
    \"menuitem\": [\
      {\"value\": \"New\", 	\"onclick\": \"CreateNewDoc()\"},\
      {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},\
      {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}\
    ]\
  }\
}	}\
"]], [[(["menu": ([
  "id": "file",
  "value": "File",
  "popup": ([
    "menuitem": ({
      (["value": "New", "onclick": "CreateNewDoc()"]),
      (["value": "Open", "onclick": "OpenDoc()"]),
      (["value": "Close", "onclick": "CloseDoc()"])
    })
  ])
])])]])
test_dec_enc([["{\"menu\": {\
    \"header\": \"SVG Viewer\",\
    \"items\": [\
        {\"id\": \"Open\"},\
        {\"id\": \"OpenNew\", \"label\": \"Open New\"},\
        null,\
        {\"id\": \"ZoomIn\", \"label\": \"Zoom In\"},\
        {\"id\": \"ZoomOut\", \"label\": \"Zoom Out\"},\
        {\"id\": \"OriginalView\", \"label\": \"Original View\"},\
        null,\
        {\"id\": \"Quality\"},\
        {\"id\": \"Pause\"},\
        {\"id\": \"Mute\"},\
        null,\
        {\"id\": \"Find\", \"label\": \"Find...\"},\
        {\"id\": \"FindAgain\", \"label\": \"Find Again\"},\
        {\"id\": \"Copy\"},\
        {\"id\": \"CopyAgain\", \"label\": \"Copy Again\"},\
        {\"id\": \"CopySVG\", \"label\": \"Copy SVG\"},\
        {\"id\": \"ViewSVG\", \"label\": \"View SVG\"},\
        {\"id\": \"ViewSource\", \"label\": \"View Source\"},\
        {\"id\": \"SaveAs\", \"label\": \"Save As\"},\
        null,\
        {\"id\": \"Help\"},\
        {\"id\": \"About\", \"label\": \"About Adobe CVG Viewer...\"}\
    ]\
}}\
"]], [[(["menu": ([
    "header": "SVG Viewer",
    "items": ({
        (["id": "Open"]),
        (["id": "OpenNew", "label": "Open New"]),
        Standards.JSON.null,
        (["id": "ZoomIn", "label": "Zoom In"]),
        (["id": "ZoomOut", "label": "Zoom Out"]),
        (["id": "OriginalView", "label": "Original View"]),
        Standards.JSON.null,
        (["id": "Quality"]),
        (["id": "Pause"]),
        (["id": "Mute"]),
        Standards.JSON.null,
        (["id": "Find", "label": "Find..."]),
        (["id": "FindAgain", "label": "Find Again"]),
        (["id": "Copy"]),
        (["id": "CopyAgain", "label": "Copy Again"]),
        (["id": "CopySVG", "label": "Copy SVG"]),
        (["id": "ViewSVG", "label": "View SVG"]),
        (["id": "ViewSource", "label": "View Source"]),
        (["id": "SaveAs", "label": "Save As"]),
        Standards.JSON.null,
        (["id": "Help"]),
        (["id": "About", "label": "About Adobe CVG Viewer..."])
    })
])])]])
test_dec_enc_canon([[
  "\"" + String.int2char(76) + String.int2char(2000) +
  String.int2char(10000) + String.int2char(900000) + "\""
]], [[
  "" + String.int2char(76) + String.int2char(2000) +
  String.int2char(10000) + String.int2char(900000) + ""
]])
test_eq([[Standards.JSON.validate("{\"menu\": {\
    \"header\": \"SVG Viewer\",\
    \"items\": [\
        {\"id\": \"Open\"},\
        {\"id\": \"OpenNew\", \"label\": \"Open New\"},\
        null,\
        {\"id\": \"ZoomIn\", \"label\": \"Zoom In\"},\
        {\"id\": \"ZoomOut\", \"label\": \"Zoom Out\"},\
        {\"id\": \"OriginalView\", \"label\": \"Original View\"},\
        null,\
        {\"id\": \"Quality\"},\
        {\"id\": \"Pause\"},\
        {\"id\": \"Mute\"},\
        null,\
        {\"id\": \"Find\", \"label\": \"Find...\"},\
        {\"id\": \"FindAgain\", \"label\": \"Find Again\"},\
        {\"id\": \"Copy\"},\
        {\"id\": \"CopyAgain\", \"label\": \"Copy Again\"},\
        {\"id\": \"CopySVG\", \"label\": \"Copy SVG\"},\
        {\"id\": \"ViewSVG\", \"label\": \"View SVG\"},\
        {\"id\": \"ViewSource\", \"label\": \"View Source\"},\
        {\"id\": \"SaveAs\", \"label\": \"Save As\"},\
        null,\
        {\"id\": \"Help\"},\
        {\"id\": \"About\", \"label\": \"About Adobe CVG Viewer...\"}\
    ]\
}}\
")]], -1 )

test_eval_error(Standards.JSON.decode(Standards.JSON.encode("sdfsdf \xdfff skldjf ")))
test_eval_error(Standards.JSON.decode_utf8(Standards.JSON.encode(string_to_utf8("sdfsdf \xdfff skldjf "))))
test_dec_enc_canon([["{\"key\":null}"]], (["key": Standards.JSON.null]))
test_dec_enc("\"http:\\/\\/foobar\\/\"","http://foobar/");

test_dec_enc_canon([["[\"abc\",\"r\344ksm\366rg\345s\",\"def\"]"]],
		   [[({"abc", "r\344ksm\366rg\345s", "def"})]])
test_dec_enc_canon([["[\"abc\",\"\u20acuro\",\"def\"]"]],
		   [[({"abc", "\u20acuro", "def"})]])

dnl http://testsuites.opera.com/JSON/correctness/scripts/
test_do(add_constant("parse",Standards.JSON.decode))
dnl 001
test_equal(parse("{ \"test\": [1,2,3],  \"test2\": \"value\", \"test3\": 5 }"),
  ([ "test": ({ 1, 2, 3 }), "test2": "value", "test3": 5 ]) )
dnl 003
test_eval_error(parse("{\"test\": 011}"))
dnl 004
test_equal(parse("{\"test\": [0,1,2,3]}"), ([ "test": ({ 0,1,2,3 }) ]) )
dnl 005
test_equal(parse("{\"test\": false, \"test\": true}"), (["test":Val.true]))
dnl 011
dnl 013
test_equal(parse("{\"quotes\": \"&#34; \\\\u0022  \"}"),
  ([ "quotes" : "&#34; \\u0022  " ]))
dnl 014
test_equal(parse("{	\"tab-separated\"	:	\"source text\", \r\n	\"with\"	:	\"newline\"	}"),
  ([ "tab-separated" : "source text", "with" : "newline" ]))
dnl 015
dnl test_any([[
dnl array ranges = ({ 0,8,
dnl                   14,31,
dnl                   127,127 });
dnl foreach(ranges/2, [int from, int to])
dnl   foreach(enumerate(to+1-from,1,from), int c)
dnl     if( !catch(parse( sprintf("{\"test\": \"%c\"}",c) )) )
dnl       return c;
dnl return -1;
dnl ]],-1)
dnl test_do([[
dnl array ranges = ({ 9,13,
dnl                   32,34,
dnl 		  35,126 });
dnl foreach(ranges/2, [int from, int to])
dnl   parse("\""+(string)enumerate(to+1-from,1,from)+"\"");
dnl ]])


test_equal(parse("{}"),([]))
test_equal(parse("[]"),({}))
test_eval_error(parse("{3:3}"))
test_eval_error(parse("{{}:3}"))
test_eval_error(parse("{[]:3}"))
test_eval_error(parse("{true:3}"))
test_eval_error(parse("{false:3}"))
test_eval_error(parse("{null:3}"))
test_equal(parse("{\"x\":\"x\"}"),(["x":"x"]))
test_equal(parse("{\"x\":3}"),(["x":3]))
test_equal(parse("{\"x\":{}}"),(["x":([])]))
test_equal(parse("{\"x\":[]}"),(["x":({})]))
test_equal(parse("{\"x\":true}"),(["x":Val.true]))
test_equal(parse("{\"x\":false}"),(["x":Val.false]))
test_equal(parse("{\"x\":null}"),(["x":Val.null]))
test_eq(Standards.JSON.encode(class {}(), 0, "foo"),"foo")
test_eq(Standards.JSON.encode(class {}(), 0, lambda(mixed ... a) { return "bar"; }),"bar")
test_do(add_constant("parse"))

END_MARKER
