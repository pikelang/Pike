AC_INIT(image_tiff.c)
AC_CONFIG_HEADER(config.h)
AC_ARG_WITH(tifflib,     [  --with(out)-tifflib       Support TIFF (Image.TIFF)],[],[with_tifflib=yes])

AC_MODULE_INIT()

PIKE_FEATURE_WITHOUT(Image.TIFF)

if test x$with_tifflib = xyes ; then
  PIKE_FEATURE_NODEP(Image.TIFF)

  AC_CHECK_HEADERS(tiff.h tiffvers.h tiffio.h tiffiop.h)
  if test $ac_cv_header_tiff_h = yes ; then
    AC_CHECK_LIB(m, floor)
    AC_CHECK_LIB(jpeg, jpeg_CreateCompress)
    AC_SEARCH_LIBS(inflate, z gz zlib)
    AC_SEARCH_LIBS(TIFFOpen, tiff libtiff)
    AC_CHECK_SIZEOF(tsize_t, 4, [#include <tiffio.h>])

    AC_MSG_CHECKING([if this tifflib is working])
    AC_CACHE_VAL(pike_cv_working_tiff, [
      # Some tiff libraries are broken, and will thrash memory.
      # eg the one on RedHat 7.1/ia64.

      # Copy the test image to the build directory, so that our
      # test program can find it.
      if cmp "$srcdir/test_image.tiff" "test_image.tiff" 2>/dev/null; then
	:
      else
        if test -f "test_image.tiff"; then
	  rm -f "test_image.tiff"
	fi
	cp "$srcdir/test_image.tiff" "test_image.tiff"
      fi
      AC_TRY_RUN([
#ifdef INLINE
#undef INLINE
#endif
#include <tiff.h>
#ifdef HAVE_TIFFIOP_H
#include <tiffiop.h>
#endif
#include <tiffio.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
int main(int argc, char **argv)
{
  TIFF *tif = TIFFOpen("test_image.tiff", "r");
  uint32 w, h, *raster;

  if (!tif) {
    fprintf(stderr, "Failed to open image. errno:%d\n", errno);
    return 1;
  }

  TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &w);
  TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h);

  if (!(raster = (void *)malloc(w*h*sizeof(uint32)))) {
    fprintf(stderr, "Failed to allocate memory for image (%d * %d).\n", w, h);
    return 1;
  }

  if (!TIFFReadRGBAImage(tif, w, h, raster, 0)) {
    fprintf(stderr, "Failed to decode image.\n");
    return 1;
  }
  return 0;
}
      ], [ pike_cv_working_tiff=yes ], [ pike_cv_working_tiff=no ], [
         AC_TRY_COMPILE([
#ifdef INLINE
#undef INLINE
#endif
#include <tiff.h>
#ifdef HAVE_TIFFIOP_H
#include <tiffiop.h>
#endif
#include <tiffio.h>
#include <stdio.h>
#include <errno.h>
         ], [
{
  TIFF *tif = TIFFOpen("test_image.tiff", "r");
  uint32 w, h, *raster;

  if (!tif) {
    fprintf(stderr, "Failed to open image. errno:%d\n", errno);
    return 1;
  }

  TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &w);
  TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h);

  if (!(raster = (void *)malloc(w*h*sizeof(uint32)))) {
    fprintf(stderr, "Failed to allocate memory for image (%d * %d).\n", w, h);
    return 1;
  }

  if (!TIFFReadRGBAImage(tif, w, h, raster, 0)) {
    fprintf(stderr, "Failed to decode image.\n");
    return 1;
  }
  return 0;
}
         ], [ pike_cv_working_tiff=yes ], [ pike_cv_working_tiff=no ])
      ])
    ])
    if test "x$pike_cv_working_tiff" = "xno"; then
      AC_MSG_RESULT([no])
      PIKE_FEATURE([Image.TIFF],[no (tifflib version 42)])
    else
      AC_MSG_RESULT([yes])
      AC_DEFINE(HAVE_WORKING_LIBTIFF)
      PIKE_FEATURE_OK(Image.TIFF)
      AC_MSG_CHECKING(for version of tifflib)
      if test "x$ac_cv_header_tiffvers_h" = "xyes"; then
        cat >conftest.$ac_ext <<EOF
#include <tiffvers.h>
VERSION:TIFFLIB_VERSION
EOF
        vers=`eval "$ac_cpp conftest.$ac_ext" 2>&5 | sed -e '/VERSION:/s/VERSION://p' -ed`
	if test "x$vers" = "x"; then
          AC_MSG_RESULT([Unknown (failed to parse tiffvers.h)])
	else
	  AC_MSG_RESULT([$vers])
        fi
	rm -f conftest*
      else
        AC_MSG_RESULT([Unknown (no tiffvers.h)])
      fi
    fi
  fi
fi

AC_OUTPUT(Makefile,echo FOO >stamp-h )
