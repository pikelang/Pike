START_MARKER

define(exarg,[[test_any([[
  function x=$1;
  return x(0.5);
]], $1(0.5)) ]])

define(exarg2,[[test_any([[
  function x=$1;
  return x(0.5, 0.4);
]], $1(0.5, 0.4)) ]])

define(test_nan,[[test_true(Float.isnan($1))]])


dnl - tan
test_true(floatp(tan(0.5)))
test_true(floatp(tan(1)))
test_approx(tan(atan(0.5)), 0.5)
test_approx(atan(tan(0.5)), 0.5)
exarg(tan)
test_eval_error( return tan(Math.inf) )
test_nan(tan(Math.nan))

dnl - asin
test_true(floatp(asin(0.7)))
test_true(floatp(asin(1)))
test_approx(asin(0.0), 0.0)
exarg(asin)
test_nan(asin(Math.inf))
test_nan(asin(Math.nan))

dnl - atan
test_true(floatp(atan(0.7)))
test_true(floatp(atan(1)))
test_approx(4.0 * atan(1.0), Math.pi)
exarg(atan)
test_nan(atan(Math.nan))

dnl - atan2
test_eq(atan(7.0/10.0), atan2(7.0, 10.0))
exarg2(atan2)


dnl - sin
test_true(floatp(sin(1.2)))
test_true(floatp(sin(1)))
test_appox(sin(atan(1.0)), sqrt(0.5))
exarg(sin)
test_nan(sin(Math.inf))
test_nan(sin(Math.nan))

dnl - acos
test_true(floatp(acos(1)))
test_approx(4.0 * acos(sqrt(0.5)), Math.pi)
exarg(acos)
test_nan(acos(Math.inf))
test_nan(acos(Math.nan))

dnl - cos
test_true(floatp(cos(1.2)))
test_true(floatp(cos(1)))
test_approx(cos(atan(1.0)), sqrt(0.5))
exarg(cos)
test_nan(cos(Math.inf))
test_nan(cos(Math.nan))

dnl - hyperbolic functions

test_true(floatp(sinh(1)))
test_true(floatp(asinh(1)))
test_true(floatp(cosh(1)))
test_true(floatp(acosh(1)))
test_true(floatp(tanh(1)))
test_true(floatp(atanh(1)))

define(test_hyper,[[dnl
ifelse([[$2]],,,[[test_approx([[sinh($1)]],[[$2]])]])dnl
ifelse([[$3]],,,[[test_approx([[cosh($1)]],[[$3]])]])dnl
ifelse([[$4]],,,[[test_approx([[tanh($1)]],[[$4]])]])dnl
ifelse([[$5]],,,[[test_approx([[asinh($1)]],[[$5]])]])dnl
ifelse([[$6]],,,[[test_approx([[acosh($1)]],[[$6]])]])dnl
ifelse([[$7]],,,[[test_approx([[atanh($1)]],[[$7]])]])dnl
]])

test_hyper(-42.0,-869637470760250523.69734065180561761,869637470760250523.69734065180561761,-1.0,-4.4309584920805433188108853236369357,,)
test_hyper(-13.7,-445455.58298901924957399137915078733,445455.58299014169593922572252746873,-0.99999999999748022831434759668929259,-3.311872343563386948149029696750666,,)
test_hyper(-1.4,-1.9043015014515340551421238276974263,2.1508984653931405320819850675311939,-0.88535164820226250758341765202557393,-1.1379820462933673973875479107020657,,)
test_hyper(-0.65,-0.69674752612644001112604502773659979,1.2187933028874560590206531649454535,-0.57166996608511722520417694451685434,-0.6112243137627636719969315805893453,,-0.77529870620558346517591803572223764)
test_hyper(-0.01,-0.010000166667500001984129739861411738,1.0000500004166680555580357170414483,-0.0099996666799994603393289197088394975,-0.009999833340832886935141612163953796,,-0.010000333353334762015882107551404224)
test_hyper(0.0,0.0,1.0,0.0,0.0,,0.0)
test_hyper(0.01,0.010000166667500001984129739861411738,1.0000500004166680555580357170414483,0.0099996666799994603393289197088394975,0.009999833340832886935141612163953796,,0.010000333353334762015882107551404224)
test_hyper(0.65,0.69674752612644001112604502773659979,1.2187933028874560590206531649454535,0.57166996608511722520417694451685434,0.6112243137627636719969315805893453,,0.77529870620558346517591803572223764)
test_hyper(1.4,1.9043015014515340551421238276974263,2.1508984653931405320819850675311939,0.88535164820226250758341765202557393,1.1379820462933673973875479107020657,0.86701472649056510395052026950146738,)
test_hyper(13.7,445455.58298901924957399137915078733,445455.58299014169593922572252746873,0.99999999999748022831434759668929259,3.311872343563386948149029696750666,3.3092083606287244632912754464749901,)
test_hyper(42.0,869637470760250523.69734065180561761,869637470760250523.69734065180561761,1.0,4.4309584920805433188108853236369357,4.4306750453495479364522424005637439,)

test_eq(sinh(Math.inf),Math.inf)
test_eq(sinh(-Math.inf),-Math.inf)
test_eq(cosh(Math.inf),Math.inf)
test_eq(cosh(-Math.inf),Math.inf)
dnl test_eq(tanh(Math.inf),1)
dnl test_eq(tanh(-Math.inf),-1)


dnl - sqrt
test_eq(4,sqrt(16))
test_eq(4,sqrt(17))
test_eq(4,sqrt(24))
test_eq(sqrt(0x7fffffff),46340)
test_eq(4.0,sqrt(16.0))
test_any([[
  int e,i;
  for(e=0;e<100000;e++) {
    i=sqrt(e);
    if(i*i>e || (i+1)*(i+1)<e)
      return e;
  }
  return -1;
]],-1)
test_any([[
  class A { protected int _sqrt() { return 17; } };
  return sqrt(A());
]], 17)
exarg(sqrt)
test_eq(sqrt(Math.inf),Math.inf)
test_eval_error(return sqrt(-Math.inf))

dnl - floor
test_eq(2.0,floor(2))
test_eq(17.0,floor(17.0))
test_eq(17.0,floor(17.1))
test_eq(17.0,floor(17.7))
exarg(floor)
test_eq(floor(Math.inf),Math.inf)
test_eq(floor(-Math.inf),-Math.inf)

dnl - ceil
test_eq(2.0,ceil(2))
test_eq(17.0,ceil(17.0))
test_eq(18.0,ceil(17.1))
test_eq(18.0,ceil(17.7))
exqrg(ceil)
test_eq(ceil(Math.inf),Math.inf)
test_eq(ceil(-Math.inf),-Math.inf)

dnl - round
test_eq(round(17),17.0)
test_eq(round(17.0),17.0)
test_eq(round(17.4),17.0)
test_eq(round(17.5),18.0)
exarg(round)
test_eq(round(Math.inf),Math.inf)
test_eq(round(-Math.inf),-Math.inf)

dnl - exp
dnl - log
test_true(floatp(log(2)))
test_true(floatp(exp(2)))
test_approx(exp(log(2.7)), 2.7)
test_approx(log(exp(2.7)), 2.7)
exarg(log)
exarg(exp)
test_eq(exp(Math.inf),Math.inf)
test_eq(exp(-Math.inf),0.0)
test_eq(log(Math.inf),Math.inf)
test_eval_error(return log(-Math.inf))

dnl - pow
test_eq(pow(10.0,10.0),10000000000.0)
test_eq(pow(9,9),387420489)
test_eq(pow(20,20),104857600000000000000000000)

test_eq(pow(0, 100000000000000), 0)
test_eq(pow(0, 100000000000001), 0)
test_eq(pow(1, 100000000000000), 1)
test_eq(pow(1, 100000000000001), 1)
test_eq(pow(-1, 100000000000000), 1)
test_eq(pow(-1, 100000000000001), -1)
test_eval_error(return sizeof(pow(2, 100000000000000)->digits(256)))

test_eq(1->pow(100000000000000), 1)
test_eq(1->pow(100000000000001), 1)
test_eq((-1)->pow(100000000000000), 1)
test_eq((-1)->pow(100000000000001), -1)
test_eval_error(return sizeof(2->pow(100000000000000)->digits(256)))

test_true(floatp(pow(2.0,2.0)))
test_true(floatp(pow(2,2.0)))
test_true(floatp(pow(2.0,2)))
test_true(intp(pow(2,2)))
test_eq(pow(Gmp.mpz(2),2),4)
test_eq(pow(Gmp.mpz(2),Gmp.mpz(2)),4)
exarg2(pow)
test_eq(pow(Math.inf,2),Math.inf)
test_eq(pow(2,Math.inf),Math.inf)
test_eq(pow(-Math.inf,2),Math.inf)
test_eq(pow(2,-Math.inf),0.0)

dnl - max
test_eq(max(5),5)
test_eq(max(5,6,7,8,9,4,5,5),9)
test_eq(max(5.0,6.0,5.9),6.0)
test_eq(max("foo","bar","gazonk"),"gazonk")
test_eq(max(1,2.0,3),3)
test_eq(max(),0)
test_eq(max(Math.inf,0.0,-Math.inf),Math.inf)
test_eq(typeof(max(0,0)), typeof(0))

dnl - min
test_eq(min(5),5)
test_eq(min(5,6,7,8,9,4,5,5),4)
test_eq(min(5.0,6.0,5.9),5.0)
test_eq(min("foo","bar","gazonk"),"bar")
test_eq(min(1,2.0,3),1)
test_eq(min(),0)
test_eq(min(Math.inf,0.0,-Math.inf),-Math.inf)
test_eq(typeof(min(0,0)), typeof(0))

dnl - abs
test_eq(abs(5),5)
test_eq(abs(-5),5)
test_eq(abs(1.0),1.0)
test_eq(abs(-1.0),1.0)
test_any([[
  object a=class { protected int `<() { return 0; } }();
  return a==abs(a);
]],1)
test_any([[
  object a = class {
      protected int `<() { return 1; }
      protected int `-() { return 7; }
    }();
  return abs(a);
]],7)
dnl exarg(abs)
test_eq(abs(Math.inf),Math.inf)
test_eq(abs(-Math.inf),Math.inf)

dnl - sgn
test_eq(sgn(1),1)
test_eq(sgn(0),0)
test_eq(sgn(-1),-1)
test_eq(sgn(1.0),1)
test_eq(sgn(0.0),0)
test_eq(sgn(-1.0),-1)
test_eq(sgn(8,7),1)
test_eq(sgn(7,7),0)
test_eq(sgn(6,7),-1)
test_eq(sgn("bar","foo"),-1)
test_eq(sgn("foo","foo"),0)
test_eq(sgn("gazonk","foo"),1)
exarg(sgn)
test_eq(sgn(Math.inf),1)
test_eq(sgn(-Math.inf),-1)
END_MARKER
