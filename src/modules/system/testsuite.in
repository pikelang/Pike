START_MARKER


// nt.c:

cond_begin([[(cpp("__NT__")/"\n")[-1] != "__NT__"]])

// AllocConsole		__NT__
// AttachConsole	__NT__
// FreeConsole		__NT__
// GetComputerName	__NT__
test_true(stringp(System.GetComputerName()))
// GetFileAttributes	__NT__
// GetNamedSecurityInfo	__NT__
// GetUserName		__NT__
test_true(stringp(System.GetUserName()))
// LogonUser		__NT__
// LookupAccountName	__NT__
test_equal(System.LookupAccountName(UNDEFINED, "LocalService")[1..],
  ({ "NT AUTHORITY", 5 }))
test_equal(System.LookupAccountName(UNDEFINED, "LocalService")[0]->account(),
  ({ "LOCAL SERVICE", "NT AUTHORITY", 5 }))
// NetGetAnyDCName	__NT__
// NetGetDCName		__NT__
// NetGroupEnum		__NT__
// NetGroupGetUsers	__NT__
// NetLocalGroupEnum	__NT__
// NetLocalGroupGetMembers __NT__
// NetSessionEnum	__NT__
// NetUserEnum		__NT__
// NetUserGetGroups	__NT__
// NetUserGetInfo	__NT__
// NetUserGetLocalGroups __NT__
// NetWkstaUserEnum	__NT__
// RegGetKeyNames	__NT__
// RegGetValue		__NT__
// RegGetValues		__NT__
// SetFileAttributes	__NT__
// SetNamedSecurityInfo	__NT__
// cp			__NT__

cond_end // __NT__

// system.c:

// umask
// chmod
// chown		HAVE_CHOWN
// chroot		HAVE_CHROOT
// cleargroups		HAVE_SETGROUPS
// getegid		HAVE_GETEUID
ifefun(getegid, [[ test_true(intp(getegid())) ]])
// geteuid		HAVE_GETEUID
ifefun(geteuid, [[ test_true(intp(geteuid())) ]])
// getgid		HAVE_GETGID
ifefun(getgid, [[ test_true(intp(getgid())) ]])
// getgroups		HAVE_GETGROUPS
ifefun(getgroups, [[ test_true(arrayp(getgroups())) ]])
// gethostbyaddr	GETHOST_DECLARE
// gethostbyname	GETHOST_DECLARE
// gethostname		HAVE_GETHOSTNAME || HAVE_UNAME
ifefun(gethostname, [[ test_true(stringp(gethostname())) ]])
// getpgrp		HAVE_GETPGRP
ifefun(getpgrp, [[ test_true(intp(getpgrp())) ]])
// getpid
test_true(intp(getpid()))
// getppid		HAVE_GETPPID
ifefun(getppid, [[ test_true(intp(getppid())) ]])
// getuid		HAVE_GETUID
ifefun(getuid, [[ test_true(intp(getuid())) ]])
// hardlink		HAVE_LINK
// initgroups		HAVE_INITGROUPS
// readlink		HAVE_READLINK
// resolvepath		HAVE_RESOLVEPATH (|| HAVE_READLINK)
// setegid		HAVE_SETEGID || HAVE_SETRESGID
// seteuid		HAVE_SETEUID || HAVE_SETRESUID
// setgid		HAVE_SETGID
// setgroups		HAVE_SETGROUPS
// setuid		HAVE_SETUID
// symlink		HAVE_SYMLINK
// uname		HAVE_UNAME
ifefun(uname, [[ test_true(mappingp(uname())) ]])


// passwords.c:

// endgrent		HAVE_ENDGRENT
// endpwent		HAVE_ENDPWENT
// get_all_groups	HAVE_GETGRENT
ifefun(get_all_groups, [[
  test_any([[
    array a = get_all_groups();
    if (!arrayp(a)) {
      return(sprintf("a is %t", a));
    }
    foreach(a, array b) {
      if (!arrayp(b)) {
	return(sprintf("b is %t", b));
      }
      if (sizeof(b) != 4) {
	return(sprintf("b has bad size %d", sizeof(b)));
      }
      if (!stringp(b[0]) || !stringp(b[1]) || !intp(b[2]) || !arrayp(b[3])) {
	return(sprintf("b has bad contents: %O", b));
      }
    }
    return 0;
  ]], 0)
]])
// get_all_users	HAVE_GETPWENT
ifefun(get_all_users, [[
  test_any([[
    array a = get_all_users();
    if (!arrayp(a)) {
      return(sprintf("a is %t", a));
    }
    foreach(a, array b) {
      if (!arrayp(b)) {
	return(sprintf("b is %t", b));
      }
      if (sizeof(b) != 7) {
	return(sprintf("b has bad size %d", sizeof(b)));
      }
      if (!stringp(b[0]) || !stringp(b[1]) || !intp(b[2]) || !intp(b[3]) ||
	  !stringp(b[4]) || !stringp(b[5]) || !stringp(b[6])) {
	return(sprintf("b has bad contents: %O", b));
      }
    }
    return 0;
  ]], 0)
]])
// get_groups_for_user	HAVE_GETPWENT
ifefun(get_groups_for_user, [[
  test_true(arrayp(get_groups_for_user(0)||({})))
]])
// getgrent		HAVE_GETGRENT
// getgrgid		HAVE_GETGRGID
ifefun(getgrgid, [[
  test_any([[
    array b = getgrgid(0);
    if (b) {
      if (!arrayp(b)) {
	return(sprintf("b is %t", b));
      }
      if (!stringp(b[0]) || !stringp(b[1]) || !intp(b[2]) || !arrayp(b[3])) {
	return(sprintf("b has bad contents: %O", b));
      }
    }
    return 0;
  ]], 0)
]])
// getgrnam		HAVE_GETGRNAM
cond([[ all_constants()->getgrgid && all_constants()->getgrnam ]], [[
  test_equal([[ getgrgid(0) && getgrnam(getgrgid(0)[0]) ]], [[ getgrgid(0) ]])
]])
// getpwent		HAVE_GETPWENT
// getpwnam		HAVE_GETPWNAM
// getpwuid		HAVE_GETPWUID
ifefun(getpwuid, [[
  test_any([[
    array b = getpwuid(0);
    if (b) {
      if (!arrayp(b)) {
	return(sprintf("b is %t", b));
      }
      if (!stringp(b[0]) || !stringp(b[1]) || !intp(b[2]) || !intp(b[3]) ||
	  !stringp(b[4]) || !stringp(b[5]) || !stringp(b[6])) {
	return(sprintf("b has bad contents: %O", b));
      }
    }
    return 0;
  ]], 0)
]])
cond([[ all_constants()->getpwuid && all_constants()->getpwnam ]], [[
  test_equal([[ getpwuid(0) && getpwnam(getpwuid(0)[0]) ]], [[ getpwuid(0) ]])
]])
// setgrent		HAVE_SETGRENT
// setpwent		HAVE_SETPWENT


// syslog.c:

// closelog		HAVE_SYSLOG
// openlog		HAVE_SYSLOG
// syslog		HAVE_SYSLOG

cond([[ System->NetSessionEnum ]],
[[
  test_true( System.NetSessionEnum(0,0,0,0) )
]])

cond([[System->normalize_path]],
[[
  test_any([[
    Stdio.recursive_rm ("testsuite_test");
    mkdir ("testsuite_test");

    int test_normalize_path (string f)
    {
      string ff = "testsuite_test/" + f;
      Stdio.write_file (ff, "foo");
      string n = System.normalize_path (ff);
      if (!n) {
	werror ("System.normalize_path (%O) produced 0\n", ff);
	return 0;
      }
      if (catch(utf8_to_string(f))) {
        f = string_to_utf8(f);
      }
#ifdef __NT__
      if (!has_suffix (n, "\\testsuite_test\\" + f)) {
	werror ("System.normalize_path (%O) produced %O\n", ff, n);
	return 0;
      }
#endif
      return 1;
    };

    if (!test_normalize_path ("foo")) return 0;
    if (!test_normalize_path ("\345\344\366")) return 0;
    if (!test_normalize_path ("\303\245\303\244\303\266")) return 0;
    return 1;
  ]], 1)
]])


// memory.c: system.Memory

test_true( System.Memory() )
test_true( System.Memory(17) )
test_true( System.Memory(8192) )
test_any( [[
  object mem=System.Memory();
  mem->allocate(42);
  return (string)mem;
]], "\0"*42 )
test_any( [[
  object mem=System.Memory();
  mem->allocate(42);
  mem->pwrite(38,"hopp");
  return (string)mem;
]], "\0"*38+"hopp" )
test_any( [[
  object mem=System.Memory();
  mem->allocate(42);
  mem->pwrite(14,"hopp");
  return mem->pread(13,6);
]], "\0hopp\0" )

cond_begin([[ System["__MMAP__"] ]])

  test_any( [[
    object f=Stdio.File();
    f->open("testsuite1.mmap.tmp","wtc");
    f->write("testing testing");
    f->close();
    object mem=System.Memory();
    mem->mmap("testsuite1.mmap.tmp");
    string s=(string)mem;
    rm("testsuite1.mmap.tmp");
    return s;
  ]], "testing testing" )
  test_equal( [[ lambda() {
    object f=Stdio.File();
    f->open("testsuite2.mmap.tmp","wtc");
    f->write("testing testing");
    f->close();
    object mem=System.Memory();
    mem->mmap("testsuite2.mmap.tmp");
    array a=(array)mem;
    rm("testsuite2.mmap.tmp");
    return a; }()
  ]], (array)("testing testing") )
  test_any( [[
    object f=Stdio.File();
    f->open("testsuite3.mmap.tmp","wtc");
    f->write("testing testing");
    f->close();
    object mem=System.Memory();
    mem->mmap("testsuite3.mmap.tmp");
    string s=mem->pread(4,6);
    rm("testsuite3.mmap.tmp");
    return s;
  ]], "ing te" )
  test_any( [[
    object f=Stdio.File();
    f->open("testsuite4.mmap.tmp","wtc");
    f->write("testing testing");
    f->close();
    object mem=System.Memory();
// private is always writeable
    mem->mmap_private("testsuite4.mmap.tmp");
    mem->pwrite(4,"nazota");
    string s=mem->pread(4,6);
    rm("testsuite4.mmap.tmp");
    return s;
  ]], "nazota" )

  test_any( [[
    object f=Stdio.File();
    f->open("testsuite5.mmap.tmp","wtc");
    f->write("testing testing");
    f->close();
    object mem=System.Memory();
    mem->mmap("testsuite5.mmap.tmp");
    if (mem->writeable())
    {
      mem->pwrite(4,"prosit");
      mem->free();
      f->open("testsuite5.mmap.tmp","r");
      string s=f->read();
      f->close();
      rm("testsuite5.mmap.tmp");
      return s;
    }
    rm("testsuite5.mmap.tmp");
    werror("warning: failed to mmap writeable file writeable\n");
    return "testprositsting";
  ]], "testprositsting" )

cond_end // System["__MMAP__"]

test_equal(sort(indices(System.Time())), ({ "sec","usec","usec_full" }))
test_eq(abs(time()-System.Time()->sec)<2, 1)
test_eq(System.Time()->usec-System.Time()->usec<=0, 1)

test_do(System.TM())
test_do((int)System.TM(0), 0)
test_do((int)System.TM((1<<31)-1), (1<<31)-1)
cond_begin([[ Pike.get_runtime_info()->time_size > 32 ]])
test_do((int)System.TM(1<<31), 1<<31)
test_do((int)System.TM(1<<32), 1<<32)
test_do((int)System.TM(1<<33), 1<<33)
cond_end // time_size > 32
test_do(System.TM(2017,11,21,16,15,01,"UTC"))
test_do(System.TM(2017,6,21,16,15,01,"UTC"))
test_do(System.TM(2017,6,21,16,15,01))

test_eq(System.TM(1513871300)->year, 2017)
test_eq(System.TM(1513871300)->mon, 11)
test_eq(System.TM(1513871300)->mday, 21)
test_eq(System.TM(1513871300)->wday, 4)
test_eq(System.TM(1513871300)->yday, 354)
test_eq(System.TM(1513871300)->hour, 15)
test_eq(System.TM(1513871300)->min, 48)
test_eq(System.TM(1513871300)->sec, 20)
test_eq(System.TM(1513871300)->isdst, 0)
test_eq(intp(System.TM(1513871300)->gmtoff), 1)
test_eq(stringp(System.TM(1513871300)->zone), 1)
test_eq(stringp(System.TM(1513871300)->asctime()), 1)
test_eq(System.TM(1513871300)->unix_time(), 1513871300)
test_equal(map("%d%D%e%G%g%H%I%M%m%p%r%R%T%u%U%V%w"/2,
               System.TM(1513871300)->strftime),
  ({ "21", "12/21/17", "21", "2017", "17",
     "15", "03", "48", "12", "PM",
     "03:48:20 PM", "15:48", "15:48:20", "4", "51", "51", "4" }))

test_eq(stringp((string)System.TM(1513871300)), 1)
test_eq((int)System.TM(1513871300), 1513871300)

END_MARKER
