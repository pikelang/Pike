/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

/* All this code is pretty useless if we don't have a msql library...*/
#include "msql_config.h"

#ifdef HAVE_MSQL

#include <msql.h>

/* Avoid a redefinition */
#ifdef INT_TYPE
#undef INT_TYPE
#define MSQL_INT_TYPE	1
#endif /* INT_TYPE */

/* #define MSQL_DEBUG 1 */

#endif /*HAVE_MSQL*/

#include "module.h"
#include "pike_compiler.h"
#include "module_support.h"

#ifdef HAVE_MSQL

#include "pike_threads.h"
#include "interpret.h"
#include "builtin_functions.h"
#include "operators.h"
#include "pike_types.h"

#ifdef _REENTRANT
PIKE_MUTEX_T pike_msql_mutex STATIC_MUTEX_INIT;
#define MSQL_LOCK() mt_lock(&pike_msql_mutex)
#define MSQL_UNLOCK() mt_unlock(&pike_msql_mutex)
#else
#define MSQL_LOCK() /**/
#define MSQL_UNLOCK() /**/
#endif

#define sp Pike_sp

/*! @module Msql
 *! This is an interface to the mSQL database server.
 *! This module may or may not be available on your Pike, depending
 *! whether the appropriate include and library files (msql.h and libmsql.a
 *! respectively) could be found at compile-time. Note that you @b{do not@}
 *! need to have a mSQL server running on your host to use this module:
 *! you can connect to the database over a TCP/IP socket
 *!
 *! Please notice that unless you wish to specifically connect to a mSQL
 *! server, you'd better use the @[Sql.Sql] program instead. Using @[Sql.Sql]
 *! ensures that your Pike applications will run with any supported SQL
 *! server without changing a single line of code.
 *!
 *! Also notice that some functions may be mSQL/2.0-specific, and thus missing
 *! on hosts running mSQL/1.0.*
 *!
 *! @note
 *!  The mSQL C API has some extermal dependencies.
 *!  They take the form of certain environment variables
 *!  which, if defined in the environment of the pike interpreter, influence
 *!  the interface's behavior. Those are "MSQL_TCP_PORT" which forces the
 *!  server to connect to a port other than the default, "MSQL_UNIX_PORT", same
 *!  as above, only referring to the UNIX domain sockets. If you built your
 *!  mSQL server with the default setttings, you shouldn't worry about these.
 *!  The variable MINERVA_DEBUG can be used to debug the mSQL API (you
 *!  shouldn't worry about this either). Refer to the mSQL documentation
 *!  for further details.
 *!
 *!  Also note that THIS MODULE USES BLOCKING I/O to connect to the server.
 *!  mSQL should be reasonably fast, but you might want to consider this
 *!  particular aspect. It is thread-safe, and so it can be used
 *!  in a multithread environment.
 *!
 *! @fixme
 *! Although it seems that mSQL/2.0 has some support for server statistics,
 *! it's really VERY VERY primitive, so it won't be added for now.
 *!
 *! @seealso
 *!   @[Sql.Sql]
 */

/*! @class msql
 */

DECLARATIONS;

PIKECLASS msql
{

static char * decode_msql_type (int msql_type)
{
	switch (msql_type) {
                case MSQL_INT_TYPE: return "int";
		case CHAR_TYPE: return "char";
		case REAL_TYPE: return "real";
		case IDENT_TYPE: return "ident";
		case NULL_TYPE: return "null";
#ifdef MSQL_VERSION_2
		case TEXT_TYPE: return "text";
		case UINT_TYPE: return "unsigned int";
		case IDX_TYPE: return "index";
		case SYSVAR_TYPE: return "sysvar";
		case ANY_TYPE: return "any";
#endif
		default: return "unknown";
	}
}

	CVAR int socket; /* the communication socket between us and the database engine. */
	CVAR unsigned int db_selected:1; /*flag: if we selected a database*/
	CVAR unsigned int connected:1; /*flag: we connected to a server*/
	CVAR struct pike_string *error_msg;
#ifdef MSQL_VERSION_2
	CVAR int affected;
#endif

	DECLARE_STORAGE;

	/*! @decl inherit __builtin.Sql.Connection
	 */
	INHERIT "__builtin.Sql.Connection";

INIT
{
	THIS->connected=0;
	THIS->db_selected=0;
	THIS->error_msg=NULL;
}

EXIT
{
	if (THIS->connected) {
		int socket=THIS->socket;
		THREADS_ALLOW();
		MSQL_LOCK();
		msqlClose(socket);
		MSQL_UNLOCK();
		THREADS_DISALLOW();
	}
	if (THIS->error_msg)
		free_string(THIS->error_msg);
}

static void report_error (void)
{
	if (THIS->error_msg)
		free_string(THIS->error_msg);
	THIS->error_msg=make_shared_string(msqlErrMsg);
	/* msqlErrMsg is really a char[160] in mSQL/2.0, but I don't want
		 to take any chances, even if I'm wasting some time here. */
}

static void do_select_db(char * dbname)
{
	/* NOTICE: We're assuming we're connected. CHECK before calling! */
	int status,socket=THIS->socket;

	THREADS_ALLOW();
	MSQL_LOCK();
	status=msqlSelectDB(socket,dbname);
	MSQL_UNLOCK();
	THREADS_DISALLOW();

	if (status==-1)
	{
		THIS->db_selected=0;
		report_error();
		Pike_error("Could not select database.\n");
	}
	THIS->db_selected=1;
}

/*! @decl void shutdown()
 *!
 *! This function shuts a SQL-server down.
 */

PIKEFUN void shutdown()
/* Notice: the msqlShutdown() function is undocumented. I'll have to go
	 through the source to find how to report errors.*/
{
	int status=0,socket=THIS->socket;

	if (!THIS->connected)
		Pike_error ("Not connected to any server.\n");

	THREADS_ALLOW();
	MSQL_LOCK();
	status=msqlShutdown(socket);
	if (status>=0)
		msqlClose(socket); /*DBserver is shut down, might as well close */
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	if (status<0) {
		report_error();
		Pike_error ("Error while shutting down the DBserver, connection not closed.\n");
	}
	THIS->connected=0;
	THIS->db_selected=0;
}

/*! @decl void reload_acl()
 *!
 *! This function forces a server to reload its ACLs.
 *!
 *! @note
 *!  This function is @b{not@} part of the standard interface, so it is
 *!  @b{not@} available through the @[Sql.Sql] interface, but only through
 *!  @[Sql.msql] and @[Msql.msql] programs.
 *!
 *! @seealso
 *!   @[create]
 */

PIKEFUN void reload_acl()
/* Undocumented mSQL function. */
{
	int socket,status=0;
        if (!THIS->connected)
		Pike_error ("Not connected to any server.\n");

	socket=THIS->socket;
	THREADS_ALLOW();
	MSQL_LOCK();
	status=msqlReloadAcls(socket);
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	if (status<0) {
		report_error();
		Pike_error ("Could not reload ACLs.\n");
	}
}

/*! @decl void create (void|string dbserver, void|string dbname,@
 *!                    void|string username, void|string passwd)
 *! With one argument, this function
 *! tries to connect to the specified (use hostname or IP address) database
 *! server. To connect to a server running on the local host via UNIX domain
 *! sockets use @expr{"localhost"@}. To connect to the local host via TCP/IP
 *! sockets
 *! you have to use the IP address @expr{"127.0.0.1"@}.
 *! With two arguments it also selects a database to use on the server.
 *! With no arguments it tries to connect to the server on localhost, using
 *! UNIX sockets.
 *!
 *! @throws
 *! You need to have a database selected before using the sql-object,
 *! otherwise you'll get exceptions when you try to query it.
 *! Also notice that this function @b{can@} raise exceptions if the db
 *! server doesn't respond, if the database doesn't exist or is not accessible
 *! by you.
 *!
 *! @note
 *! You don't need bothering about syncronizing the connection to the database:
 *! it is automatically closed (and the database is sync-ed) when the msql
 *! object is destroyed.
 *!
 *! @seealso
 *!   @[select_db]
 */

  /* 1st arg: hostname or "localhost", 2nd arg: dbname or nothing
   * CAN raise exception if there is no server listening, or no database
   * To connect using the UNIX socket instead of a localfunction use the
   * hostname "localhost", or use no argument. It will use UNIX sockets.
   * Third and fourth argument are currently ignored, since mSQL doesn't
   * support user/passwd authorization. The user will be the owner of
   * the current process.
   * The first argument can have the format "hostname:port". Since mSQL
   * doesn't support nonstandard ports, that portion is silently ignored,
   * and is provided only for generic-interface compliancy
   */

PIKEFUN void create(void|string(1..255) dbserver, void|string(1..255) dbname,
		    void|string(1..255) username, void|string(1..255) passwd,
		    mapping|int|void options)
{
	struct pike_string * arg1=NULL, *arg2=NULL;
	int sock, status;
	char *colon;

	if (dbserver)
	  if (dbserver->len)
	    arg1 = dbserver;
	if (dbname)
	  if (dbname->len)
	    arg2 = dbname;

	/*Okay. We had one or two arguments, and we must connect to a server
	and if needed select a database.
	First off let's check whether we are already connected. In this case,
	disconnect.*/
	if (THIS->connected)
	{
		msqlClose (THIS->socket);
		THIS->connected=0;
		THIS->db_selected=0;
	}

	/* msql won' support specifying a port number to connect to.
	 * As far as I know, ':' is not a legal character in an hostname,
	 * so we'll silently ignore it.
	 */
	if (arg1) {
		colon=strchr(arg1->str,':');
		if (colon) {
		  arg1 = make_shared_binary_string(arg1->str,
						   colon - arg1->str);
		  free_string(sp[-args].u.string);
		  sp[-args].u.string = arg1;
		}
	}

	THREADS_ALLOW();
	MSQL_LOCK();
	/* Warning! If there were no args, we're deferencing a NULL pointer!*/
	if (!arg1 || !strcmp (arg1->str,"localhost"))
		sock=msqlConnect(NULL);
	else
		sock=msqlConnect(arg1->str);
	MSQL_UNLOCK();
	THREADS_DISALLOW();

	if (sock==-1) {
		THIS->db_selected=0;
		THIS->connected=0;
		report_error();
		Pike_error("Error while connecting to mSQL server.\n");
	}
	THIS->socket=sock;
	THIS->connected=1;
	if (arg2)
	  do_select_db(arg2->str);
}

/*! @decl array(string) list_dbs(void|string wild)
 *!
 *! Returns an array containing the names of all databases available on
 *! the system. Will throw an exception if there is no server connected.
 *! If an argument is specified, it will return only those databases
 *! whose name matches the given glob.
 */

PIKEFUN array(string) list_dbs(string(1..255)|void wild)
{
	m_result * result;
	m_row row;
	int fields,numrows=0,socket=THIS->socket;

        if (!THIS->connected)
		Pike_error ("Not connected.\n");
	if (wild && !wild->len)
	  wild = NULL;
	else {
		/* We have a glob. We should pop the arg and push it again for a later
		 * call to glob() */
		pop_n_elems(args-1);	/* Paranoia. */
		args = 1;
	}

	THREADS_ALLOW();
	MSQL_LOCK();
	result=msqlListDBs(socket);
	MSQL_UNLOCK();
	THREADS_DISALLOW();

	if (!result) {
		f_aggregate(0); /*empty array if no databases*/
		return;
	}
	while ((row=msqlFetchRow(result))) /*it's fast, we're in RAM*/
	{
		numrows++;
		push_text((char *)row[0]);
	}
	f_aggregate(numrows);
	msqlFreeResult(result);
	if (wild)
		f_glob(2);
}

/*! @decl array(string) list_tables(void|string wild)
 *!
 *! Returns an array containing the names of all the tables in the currently
 *! selected database. Will throw an exception if we aren't connected to
 *! a database.
 *! If an argument is specified, it will return only those tables
 *! whose name matches the given glob.
 */

PIKEFUN array(string) list_tables(void|string(1..255) wild)
	/* ARGH! There's much code duplication here... but the subtle differences
	 * between the various functions make it impervious to try to generalize..*/
{
	m_result * result;
	m_row row;
	int fields,numrows=0,socket=THIS->socket;

        if (!THIS->db_selected)
		Pike_error ("No database selected.\n");

	if (wild && !wild->len)
	  wild = NULL;
	else {
		/* We have a glob. We should pop the arg and push it again for a later
		 * call to glob() */
		pop_n_elems(args-1);	/* Paranoia. */
		args = 1;
	}

	THREADS_ALLOW();
	MSQL_LOCK();
	result=msqlListTables(socket);
	MSQL_UNLOCK();
	THREADS_DISALLOW();

	if (!result) {
		f_aggregate(0); /*empty array if no databases*/
		return;
	}
	while ((row=msqlFetchRow(result)))
	{
		numrows++;
		push_text((char *)row[0]);
	}
	f_aggregate(numrows);
	msqlFreeResult(result);
	if (wild)
		f_glob(2);
}

/*! @decl void select_db(string dbname)
 *!
 *! Before querying a database you have to select it. This can be accomplished
 *! in two ways: the first is calling the @[create] function with two arguments,
 *! another is calling it with one or no argument and then calling @[select_db].
 *! You can also use this function to change the database you're querying,
 *! as long as it is on the same server you are connected to.
 *!
 *! @throws
 *! This function CAN raise exceptions in case something goes wrong
 *! (for example: unexistant database, insufficient permissions, whatever).
 *!
 *! @seealso
 *!  @[create], @[error]
 */

/* if no db was selected by connect, does it now.
 * CAN raise an exception if there's no such database or we haven't selected
 * an host.
 */

PIKEFUN void select_db(string(1..255) dbname)
{
        if (!THIS->connected)
		Pike_error ("Not connected.\n");
        do_select_db(dbname->str);
}

  /*! @class Result
   */
  PIKECLASS Result
  {
    CVAR m_result *result;

    /*! @decl inherit __builtin.Sql.Result
     */
    INHERIT "__builtin.Sql.Result";

    EXIT
    {
      if (THIS->result) {
	msqlFreeResult(THIS->result);
      }
    }

    PIKEFUN int num_rows()
    {
      RETURN msqlNumRows(THIS->result);
    }

    PIKEFUN int num_fields()
    {
      RETURN msqlNumFields(THIS->result);
    }

    PIKEFUN array(mapping(string:mixed)) fetch_fields()
    {
      int i;
      int num_fields = msqlNumFields(THIS->result);

      msqlFieldSeek(THIS->result, 0);

      BEGIN_AGGREGATE_ARRAY(num_fields);
      for (i = 0; i < num_fields; i++) {
	m_field *field = msqlFetchField(THIS->result);
	push_text("name");
	push_text(field->name);
	push_text("table");
	push_text(field->table);
	f_aggregate_mapping(4);
	DO_AGGREGATE_ARRAY(100);
      }
      END_AGGREGATE_ARRAY;
    }

    PIKEFUN array(string|int(0..0)) fetch_row()
    {
      int num_fields = msqlNumFields(THIS->result);
      m_row row = msqlFetchRow(THIS->result);
      int i;
      BEGIN_AGGREGATE_ARRAY(num_fields);
      for (i = 0; i < num_fields; i++) {
	if (row[i]) {
	  push_text(row[i]);
	} else {
	  push_undefined();
	}
	DO_AGGREGATE_ARRAY(100);
      }
      END_AGGREGATE_ARRAY;
    }
  }
  /*! @endclass Result
   */

/*! @decl variant Result big_query(string(8bit) sqlquery)
 *!
 *! This is all you need to query the database. It takes as argument an SQL
 *! query string (e.g.: "SELECT foo,bar FROM baz WHERE name like '%kinkie%'"
 *! or "INSERT INTO baz VALUES ('kinkie','made','this')")
 *! and returns an object containing the returned values.
 *!
 *! @throws
 *! Errors (both from the interface and the SQL server) are reported via
 *! exceptions, and you definitely want to catch them. Error messages are
 *! not particularly verbose, since they account only for errors inside the
 *! driver. To get server-related error messages, you have to use the
 *! @[error] function.
 *!
 *! @note
 *! Note that if the query is NOT a of SELECT type, but UPDATE or
 *! MODIFY, the returned value is a @expr{0@} (zero).
 *! @b{This is not an error@}. Errors are reported @b{only@} via exceptions.
 *!
 *! @seealso
 *!   @[error]
 */
  PIKEFUN object big_query(string(1..255) sqlquery)
    flags ID_VARIANT;
  {
	int status, socket;
	m_result *result = NULL;
	struct object *o;
	struct Msql_msql_Result_struct *res;

        if (!THIS->connected)
		Pike_error("Must connect to database server before querying it.\n");
	if (!THIS->db_selected)
		Pike_error("Must select database before querying it.\n");

	socket = THIS->socket;

#ifdef MSQL_DEBUG
	fprintf(stderr, "MSQLMod: Query is\"%s\"\n", sqlquery->str);
#endif

	THREADS_ALLOW();
	MSQL_LOCK();
	status = msqlQuery(socket, sqlquery->str);

	if (status != -1) {
	  /*We have what we want. We need to construct the returned structure*/
	  result=msqlStoreResult();
	}
	MSQL_UNLOCK();
	THREADS_DISALLOW();

	if (status==-1) {
		report_error();
		Pike_error("Error in SQL query.\n");
	}

#ifdef MSQL_VERSION_2
	THIS->affected=status;
#endif
	if (!result) {
	  push_int(0);
	  return;
	}

	apply_current(Msql_msql_Result_program_fun_num, 0);

	if ((TYPEOF(Pike_sp[-1]) != PIKE_T_OBJECT) ||
	    !(res = get_storage(Pike_sp[-1].u.object,
				Msql_msql_Result_program)) ||
	    res->result) {
	  msqlFreeResult(result);
	  Pike_error("Bad msql result object!\n");
	}

	res->result = result;
  }

/*! @decl string server_info()
 *!
 *! This function returns a string describing the server we are talking
 *! to. It has the form "servername/serverversion" (like the HTTP protocol
 *! description) and is most useful in conjunction with the generic SQL-server
 *! module.
 *!
 */

PIKEFUN string server_info()
{
	char * info;

        pop_n_elems(args);
	if (!THIS->connected)
		Pike_error ("Not connected.\n");
	push_static_text("msql/");
	THREADS_ALLOW();
	MSQL_LOCK();
	info=msqlGetServerInfo();
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	push_text(info);
	f_add(2);
}

/*! @decl string host_info()
 *!
 *! This function returns a string describing what host are we talking to,
 *! and how (TCP/IP or UNIX sockets).
 */

PIKEFUN string host_info()
{
        if (!THIS->connected)
		Pike_error ("Not connected.\n");
	/*it's local to the client library. Not even worth allowing
	 context switches*/
	push_text(msqlGetHostInfo());
}

/*! @decl string error(void|int clear)
 *!
 *! This function returns the textual description of the last server-related
 *! error. Returns 0 if no error has occurred yet. It is not cleared upon
 *! reading (can be invoked multiple times, will return the same result
 *! until a new error occurs).
 *!
 *! @seealso
 *!   @[query]
 */

PIKEFUN string error(void|int clear)
{
	int clearit = clear && clear->u.integer;

	pop_n_elems(args);

        if (THIS->error_msg) {
		ref_push_string(THIS->error_msg);
		if (clearit) {
			free_string(THIS->error_msg);
        		THIS->error_msg = 0;
		}
	} else
	        push_int(0);
}

/*! @decl void create_db(string dbname)
 *!
 *! This function creates a new database with the given name (assuming we
 *! have enough permissions to do this).
 *!
 *! @seealso
 *!   @[drop_db]
 */

PIKEFUN void create_db(string(1..255) dbname)
{
	int dbresult;
        int socket;

        if (!THIS->connected)
		Pike_error("Not connected.\n");
        socket=THIS->socket;
	THREADS_ALLOW();
	MSQL_LOCK();
        dbresult=msqlCreateDB(socket,dbname->str);
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	if (dbresult==-1) {
		report_error();
		Pike_error ("Could not create database.\n");
	}
}

/*! @decl void drop_db(string dbname)
 *!
 *! This function destroys a database and all the data it contains (assuming
 *! we have enough permissions to do so). USE WITH CAUTION!
 *!
 *! @seealso
 *!   @[create_db]
 */

PIKEFUN void drop_db(string(1..255) dbname)
{
	int dbresult;
        int socket;

        if (!THIS->connected)
		Pike_error("Not connected.\n");
        socket=THIS->socket;
	THREADS_ALLOW();
	MSQL_LOCK();
        dbresult=msqlDropDB(socket,dbname->str);
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	if (dbresult==-1) {
		report_error();
		Pike_error ("Could not drop database.\n");
	}
}

/*! @decl mapping(string:mapping(string:mixed)) list_fields(string table)
 *!
 *! Returns a mapping describing the fields of a table in the database.
 *! The returned value is a mapping, indexed on the column name,
 *! of mappings. These contain currently the fields:
 *!
 *! @mapping
 *!   @member string "type"
 *!      Describes the field's mSQL data type ("char","integer",...)
 *!   @member int "length"
 *!      It describes the field's length. It is only interesting for
 *!      char() fields, in fact.  Also
 *!      notice that the strings returned by msql->query() have the correct length.
 *!      This field only specifies the _maximum_ length a "char()" field can have.
 *!   @member string "table"
 *!      The table this field is in. Added only for interface compliancy.
 *!   @member multiset(string) "flags"
 *!      It's a multiset containing textual
 *!      descriptions of the server's flags associated with the current field.
 *!      Currently it can be empty, or contain "unique" or "not null".
 *! @endmapping
 *!
 *! @note
 *!   The version of this function in the Msql.msql() program is @b{not@}
 *!   sql-interface compliant (this is the main reason why using that program
 *!   directly is deprecated). Use @[Sql.Sql] instead.
 *!
 *! @seealso
 *!   @[query]
 */

PIKEFUN mapping(string:mapping(string:mixed)) list_fields(string(1..255) table,
							  void|string glob)
{
	m_result * result;
	m_field * field;
        int fields, j, socket=THIS->socket;

        if (!THIS->connected)
		Pike_error ("Not connected.\n");
	if (!THIS->db_selected)
		Pike_error ("Must select a db first.\n");
#ifdef MSQL_DEBUG
	printf("list_fields: table=%s(%d)\n", table->str, table->len);
#endif

	THREADS_ALLOW();
	MSQL_LOCK();
        result=msqlListFields(socket,table->str);
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	pop_n_elems(args);

	if (!result) {
		report_error();
		Pike_error ("No fields information.\n");
	}

	fields = msqlNumFields(result);
	if (!fields)
		Pike_error ("No such table.\n");

	for (j=0;j<fields;j++)
	{
		int flagsnum=0;
		field=msqlFetchField(result);

                push_static_text("name");
		push_text(field->name);
		ref_push_string(literal_type_string);
		push_static_text(decode_msql_type(field->type));
		push_static_text("length");
		push_int(field->length);
		push_static_text("table");
		push_text(field->table);
		push_static_text("flags");
#ifdef IS_UNIQUE
		if (IS_UNIQUE(field->flags)) {
			push_static_text("unique");
			flagsnum++;
		}
#endif
#ifdef IS_NOT_NULL
		if (IS_NOT_NULL(field->flags)) {
			push_static_text("not_null");
			flagsnum++;
		}
#endif
#ifdef IS_PRI_KEY
		if (IS_PRI_KEY(field->flags)) {
			push_static_text("primary_key");
			flagsnum++;
		}
#endif
		f_aggregate_multiset(flagsnum);
		f_aggregate_mapping(10);
	}
        f_aggregate(fields);
        msqlFreeResult(result);
}

#ifdef MSQL_VERSION_2

/*! @decl int affected_rows()
 *!
 *! This function returns how many rows in the database were affected by
 *! our last SQL query.
 *!
 *! @note
 *!  This function is available only if you're using mSQL version 2
 *!  or later. (That means: if the includes and library of version 2 of mSQL
 *!  were available when the module was compiled).
 *!
 *!  This function is @b{not@} part of the standard interface, so it is @b{not@}
 *!  available through the @[Sql.Sql] interface, but only through @[Sql.msql] and
 *!  @[Msql.msql] programs
 */

PIKEFUN int affected_rows()
{
        pop_n_elems(args);
	push_int(THIS->affected);
}

/*! @decl array list_index(string tablename, string indexname)
 *!
 *! This function returns an array describing the index structure for the
 *! given table and index name, as defined by the non-standard SQL query
 *! 'create index' (see the mSQL documentation for further informations).
 *! More than one index can be created for a table. There's currently NO way
 *! to have a listing of the indexes defined for a table (blame it on
 *! the mSQL API).
 *!
 *! @note
 *!  This function is available if you're using mSQL version 2
 *!  or later.
 *!
 *!  This function is @b{not@} part of the standard interface, so it is @b{not@}
 *!  available through the @[Sql.Sql] interface, but only through @[Sql.msql] and
 *!  @[Msql.msql] programs.
 */

PIKEFUN array list_index(string(1..255) tablename, string(1..255) indexname)
{
        m_result * result;
	m_row row;
	int sock, rows, j;

        if (!THIS->db_selected)
		Pike_error ("No database selected.\n");
        sock=THIS->socket;
	THREADS_ALLOW();
	MSQL_LOCK();
        result=msqlListIndex(sock,tablename->str,indexname->str);
	MSQL_UNLOCK();
	THREADS_DISALLOW();
	pop_n_elems(args);
	if (!result || !(rows=msqlNumRows(result)) ) {
		f_aggregate(0);
		return;
	}
	msqlFetchRow(result); /*The first one is the internal type, useless*/
	rows--;
	for (j=0; j<rows; j++)
	{
		row=msqlFetchRow(result);
		push_text(row[0]);
	}
	f_aggregate(rows);
}
#endif

}
/*! @endclass
 */

/*! @decl constant version
 *!
 *! Should you need to report a bug to the author, please submit along with
 *! the report the driver version number, as returned by this call.
 */

/*! @endmodule
 */

PIKE_MODULE_INIT
{
  INIT;

  /* Deprecated */
  add_string_constant("version","mSQL/1.1.1",0);
}

PIKE_MODULE_EXIT
{
  EXIT;
}

#else /*HAVE_MSQL*/
PIKE_MODULE_INIT {
  HIDE_MODULE();
}

PIKE_MODULE_EXIT { }
#endif /*HAVE_MSQL*/
