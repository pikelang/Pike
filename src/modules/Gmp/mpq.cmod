/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "module.h"
#include "gmp_machine.h"
#include "my_gmp.h"

#include "interpret.h"
#include "pike_macros.h"
#include "pike_types.h"
#include "pike_error.h"
#include "builtin_functions.h"
#include "module_support.h"
#include "bignum.h"
#include "operators.h"
#include "gc.h"

#include <math.h>


#define sp Pike_sp
#define fp Pike_fp

#define DEFAULT_CMOD_STORAGE

DECLARATIONS

#define THISMPQ (&(THIS->n))

/*! @module Gmp
 */

/*! @class mpq
 *! Rational number stored in canonical form. The canonical from means
 *! that the denominator and the numerator have no common factors, and
 *! that the denominator is positive. Zero has the unique
 *! representation 0/1. All functions canonicalize their result.
 */

/*  id PROG_GMP_MPQ_ID; */
PIKECLASS mpq
{
  CVAR MP_RAT n;

  static void get_mpq_from_digits(MP_RAT *tmp,
				  struct pike_string *digits,
				  int base)
  {
    p_wchar0 *str;

    if(digits->size_shift)
      Pike_error("Illegal characters, cannot convert to mpq.\n");
    str=STR0(digits);

    /* Huh, wot? /mast
       get_mpz_from_digits(mpq_numref(tmp), digits, base);
    */

    if(!base || ((base >= 2) && (base <= 36)))
    {
      int offset = 0;
      int neg = 0;
      int dotfound = 0;

      if(digits->len > 1)
      {
        if(str[0] == '+')
          offset ++;
        else if(str[0] == '-')
        {
          offset ++;
          neg = 1;
        }

        /* We need to fix the case with binary
           0b101... and -0b101... numbers. */
        if(!base && digits->len > 2)
        {
          if(str[offset] == '0')
          {
            switch(str[offset+1])
            {
              case 'b':
              case 'B':
                offset+=2;
                base=2;
                break;

              case '0':
                offset+=2;
                base=8;
                break;

              case 'x':
                offset+=2;
                base=16;
                break;
            }
          }
        }
      }

      if(!base) base=10;

      mpq_set_ui(tmp, 0, 1);
      while(str[offset])
      {
        int x=255;
        if(str[offset] == '.')
        {
          offset++;
          if(dotfound)
            Pike_error("Invalid digits, cannot convert to mpq.\n");
          dotfound++;
          continue;
        }

        if(str[offset] >= '0' && str[offset] <= '9')
          x=str[offset]-'0';
        else if(str[offset] >='a' && str[offset] <= 'z')
          x=str[offset]-'a';
        else if(str[offset] >='A' && str[offset] <= 'Z')
          x=str[offset]-'A';

        if(x > base)
          Pike_error("Invalid digits, cannot convert to mpq.\n");

        mpz_mul_ui(mpq_numref(tmp),
                   mpq_numref(tmp),
                   base);
        if(dotfound)
        {
          mpz_mul_ui(mpq_denref(tmp),
                     mpq_denref(tmp),
                     base);
        }
        mpz_add_ui(mpq_numref(tmp),
                   mpq_numref(tmp),
                   x);
        offset++;
      }

      if(dotfound)
        mpq_canonicalize(tmp);

      if(neg)
        mpz_neg(mpq_numref(tmp), mpq_numref(tmp));
    }
    else if(base == 256)
    {
      mpq_set_ui(tmp, 1, 1);
      get_mpz_from_digits(mpq_numref(tmp), digits, base);
    }
    else
    {
      Pike_error("invalid base.\n");
    }
  }

  int get_new_mpq(MP_RAT *tmp, struct svalue *s,
		  int throw_error, const char *arg_func, int arg, int args)
  {
    switch(TYPEOF(*s))
    {
      case T_FLOAT:
	{
	  double t;
	  int y;
	  t=frexp((double) s->u.float_number, &y);

	  t*=pow(2.0,48.0);
	  y-=48;

	  mpz_set_d(mpq_numref(tmp), t);
	  mpz_set_ui(mpq_denref(tmp), 1);
	  if(y>0)
	    mpz_mul_2exp(mpq_numref(tmp),mpq_numref(tmp),y);
	  else if(y<0)
	    mpz_mul_2exp(mpq_denref(tmp),mpq_denref(tmp),-y);

	  mpq_canonicalize(tmp);
	  break;
	}

      case T_INT:
        get_new_mpz(mpq_numref(tmp), s, 1, arg_func, arg, args);
        mpz_set_si(mpq_denref(tmp),1);
        break;

      case T_OBJECT:
        if(IS_MPZ_OBJ (s->u.object))
        {
          mpq_set_z(tmp, OBTOMPZ(s->u.object));
          break;
        }

        if(s->u.object->prog == mpq_program)
        {
          mpq_set(tmp, OBTOMPQ(s->u.object));
          break;
        }

        if(s->u.object->prog == mpf_program)
        {
          MP_INT z;
          long exponent;
#ifndef USE_MPFR
          // Acces mpf internals directly.
          // NOTE: Hacky! Must not free z "correctly"
          exponent = OBTOMPF(s->u.object)->_mp_exp*sizeof(mp_limb_t)*8;
          z._mp_size = OBTOMPF(s->u.object)->_mp_size;
          z._mp_d = OBTOMPF(s->u.object)->_mp_d;

	  /* NB: For simplicity we assume that we won't have values with more
	   *     than GMP_NUMB_BITS * 0x7ffffff (typically 8 or 16 GB) bits.
	   *
	   * Further: As we don't perform any destructive operations on
	   *          the z below, the field will probably not be used.
	   */
	  z._mp_alloc = abs((INT32)z._mp_size);
#else
          mpz_init(&z);
          exponent = mpfr_get_z_2exp(&z, OBTOMPF(s->u.object) );
#endif
          mpz_set( mpq_numref(tmp), &z);
          mpz_set_ui(mpq_denref(tmp),1);
          if( exponent < 0 )
              mpz_mul_2exp(mpq_denref(tmp),mpq_denref(tmp),-exponent);
          else if( exponent > 0 )
              mpz_mul_2exp(mpq_numref(tmp),mpq_numref(tmp),exponent);
	  mpq_canonicalize(tmp);

#ifdef USE_MPFR
          mpz_clear(&z);
#endif
          break;
        }

        if (s->u.object->prog) {
          if (throw_error)
            SIMPLE_ARG_TYPE_ERROR (arg_func, arg, "int|float|Gmp.mpq|Gmp.mpz|Gmp.mpf");
          else
            return 0;
        } else {
          /* Destructed object. Use as zero. */
          mpq_set_si(tmp, 0, 1);
        }
        break;

      default:
        if (throw_error)
          SIMPLE_ARG_TYPE_ERROR (arg_func, arg, "int|float|Gmp.mpq|Gmp.mpz|Gmp.mpf");
        else
          return 0;
    }
    return 1;
  }

/* Converts an svalue, located on the stack, to an mpq object */
  static MP_RAT *debug_get_mpq(struct svalue *s,
			       int throw_error, const char *arg_func, int arg, int args)
  {
    struct object *o = fast_clone_object (mpq_program);
    ONERROR uwp;
    SET_ONERROR (uwp, do_free_object, o);
    if (get_new_mpq (OBTOMPQ (o), s, throw_error, arg_func, arg, args)) {
      UNSET_ONERROR (uwp);
      free_svalue(s);
      SET_SVAL(*s, T_OBJECT, 0, object, o);
      return OBTOMPQ (o);
    }
    else {
      UNSET_ONERROR (uwp);
      free_object (o);
      return NULL;
    }
  }

#ifdef DEBUG_MALLOC
#define get_mpq(S, THROW_ERROR, ARG_FUNC, ARG, ARGS)			\
  (REFCOUNTED_TYPE(TYPEOF(*(S))) ? debug_malloc_touch((S)->u.object) : 0, \
   debug_get_mpq((S), (THROW_ERROR), (ARG_FUNC), (ARG), (ARGS)))
#else
#define get_mpq debug_get_mpq
#endif

  PIKEFUN float|mpq|int ``**(int|float exponent)
  {
      double x;
      /* does not support expoent being object,
         `** should have been used in that case. */
      if( TYPEOF(*exponent) == PIKE_T_FLOAT )
      {
          if( (double)(long)exponent->u.float_number == exponent->u.float_number )
          {
              TYPEOF(*exponent)=PIKE_T_INT;
              exponent->u.integer = (long)exponent->u.float_number;
          }
      }

      if( TYPEOF(*exponent) == PIKE_T_INT )
      {
          // int ** mpq counted as int ** float not int ** int.
          // promote to mpq or float.
          get_mpq( Pike_sp-1, 1, "``**", 1, 1 );
          ref_push_object( Pike_fp->current_object );
          apply_lfun( Pike_sp[-2].u.object, LFUN_POW, 1 );
          return;
      }

      x = mpq_get_d(THISMPQ);
      Pike_sp[-1].u.float_number = pow( Pike_sp[-1].u.float_number, x);
  }


  PIKEFUN mpq `**(int exponent)
  {
      struct object *o = fast_clone_object( mpq_program );
      push_object(o);
      if( exponent >= 0 )
      {
          mpz_pow_ui( mpq_numref(OBTOMPQ(o)), mpq_numref(THISMPQ), exponent );
          mpz_pow_ui( mpq_denref(OBTOMPQ(o)), mpq_denref(THISMPQ), exponent );
      }
      else
      {
          mpz_pow_ui( mpq_numref(OBTOMPQ(o)), mpq_denref(THISMPQ), -exponent );
          mpz_pow_ui( mpq_denref(OBTOMPQ(o)), mpq_numref(THISMPQ), -exponent );
      }
      mpq_canonicalize(OBTOMPQ(o));
  }

  PIKEFUN float|mpq `**(float exponent)
  {
    double x;
    if( (double)(int)exponent == exponent )
    {
      Pike_sp[-1].u.integer = (INT_TYPE)Pike_sp[-1].u.float_number;
      TYPEOF(Pike_sp[-1]) = PIKE_T_INT;
      f_mpq_cq__backtick_2A_2A_1(1);
      return;
    }
    x = mpq_get_d(THISMPQ);
    x = pow(x, exponent);
    if( (double)(long)x == x )
    {
      struct object *o = fast_clone_object( mpq_program );
      push_object(o);
      mpq_set_si( OBTOMPQ(o), (long)x, 1 );
    }
    else
    {
      push_float( x );
    }
  }


  PIKEFUN mpq `**(object _exponent)
  {
    signed long tmpi;
    MP_INT tmp;
    struct object *o;
    MP_RAT *exponent;

    mpz_init( &tmp );
    if(_exponent->prog != mpq_program)
    {
      _exponent = fast_clone_object(mpq_program);
      get_new_mpq(OBTOMPQ(_exponent), Pike_sp-1, 1, "`**", 1, 1);
    }
    exponent = OBTOMPQ(_exponent);


    // x ^ (exponent/divisor)
    tmpi = mpz_get_si(mpq_numref(exponent));
    if( !mpz_fits_slong_p(mpq_numref(exponent)) ||
        !mpz_fits_slong_p(mpq_denref(exponent)) ||
        labs(tmpi)*
        MAXIMUM(mpz_size(mpq_numref(exponent)),
                mpz_size(mpq_denref(exponent))) >
        (0x40000000/sizeof(mp_limb_t)))
    {
      // Well, bother that (more than 1Gb temporary).
      // Fall back to float version.
      goto float_fallback;
    }

    push_int( tmpi );
    f_mpq_cq__backtick_2A_2A_1(1);

    // now in o (and on stack): Exponented number.
    o = Pike_sp[-1].u.object;

    // now do x:th root part.
    tmpi = mpz_get_si(mpq_denref(exponent));

    if( tmpi != 1 )
    {
      mpz_rootrem(mpq_numref(OBTOMPQ(o)),&tmp,mpq_numref(OBTOMPQ(o)),tmpi);
      if( mpz_sgn( &tmp ) ) goto float_fallback;
      mpz_rootrem(mpq_denref(OBTOMPQ(o)),&tmp,mpq_denref(OBTOMPQ(o)),tmpi);
      if( mpz_sgn( &tmp ) ) goto float_fallback;
      /* o already on stack, all done. */
      mpz_clear(&tmp);
      mpq_canonicalize(OBTOMPQ(o));
    }
    return;
float_fallback:
      // the result can not be represented exactly, or is just too huge.
    push_float( pow(mpq_get_d(THISMPQ),mpq_get_d(exponent)) ); 
  }

  /*! @decl protected void create(void|string|int|float|Gmp.mpz|Gmp.mpq x)
   *! @decl protected void create(int|Gmp.mpz numerator, @
   *!                             int|Gmp.mpz denominator)
   *! @decl protected void create(string x, int base)
   */
  PIKEFUN void create(void|string|int|float|object x, void|int|object base)
    type function(void|string|int|float|object:void)|function(string,int:void)|function(int,int:void);
    flags ID_PROTECTED;
  {
    switch(args)
    {
      case 2:
	/* Args are string of digits and integer base */
	/* or int num / den */

	if (base && x) {

	  switch(TYPEOF(*x))
	  {
	  case T_STRING:
	    if (TYPEOF(*base) != T_INT)
	      SIMPLE_ARG_TYPE_ERROR ("create", 2, "int");
	    get_mpq_from_digits(THISMPQ, x->u.string, base->u.integer);
	    break;

	  default:
	    SIMPLE_ARG_TYPE_ERROR ("create", 1, "int|string");
	    break;

	  case T_OBJECT:
	    if(x->u.object->prog != bignum_program &&
	       x->u.object->prog != mpzmod_program)
	      SIMPLE_ARG_TYPE_ERROR ("create", 1, "int|string");

	    /* FALLTHRU */

	  case T_INT:
	    if (TYPEOF(*base) != T_INT &&
		!(TYPEOF(*base) == T_OBJECT &&
		  (base->u.object->prog == bignum_program ||
		   base->u.object->prog == mpzmod_program)))
	      SIMPLE_ARG_TYPE_ERROR ("create", 2, "int");
	    mpq_set_num(THISMPQ,get_mpz(x, 1, "create", 1, args));
	    mpq_set_den(THISMPQ,get_mpz(base, 1, "create", 2, args));
	    mpq_canonicalize(THISMPQ);
	    break;
	  }
	  break;
	}
	/* FALLTHRU */

      case 1:
	if (x) {
	  if(TYPEOF(*x) == T_STRING)
	    get_mpq_from_digits(THISMPQ, x->u.string, 0);
	  else
	    get_new_mpq(THISMPQ, x, 1, "create", 1, args);
	  break;
	}
	/* FALLTHRU */

      case 0:
	break;

      default:
	SIMPLE_WRONG_NUM_ARGS_ERROR ("create", 2);
    }
    pop_n_elems(args);
  }

  /*! @decl int get_int()
   */
  PIKEFUN int get_int()
  {
    struct object *res = fast_clone_object(mpzmod_program);
    mpz_tdiv_q(OBTOMPZ(res), mpq_numref(THISMPQ), mpq_denref(THISMPQ));
    /* FIXME */
    mpzmod_reduce(res);
  }

  /*! @decl protected int __hash()
   */
  PIKEFUN int __hash()
    flags ID_PROTECTED;
  {
    RETURN
      mpz_get_si(mpq_numref(THISMPQ)) * 1000003 +
      mpz_get_si(mpq_denref(THISMPQ));
  }

  /*! @decl float get_float()
   */
  PIKEFUN float get_float()
  {
    RETURN (FLOAT_TYPE) mpq_get_d(THISMPQ);
  }

  static void format_dec_frac (mpz_t num, int prec)
  {
    struct pike_string *s;
    ptrdiff_t len = mpz_sizeinbase (num, 10);

    assert (prec);

    if (len > prec) {
      /* one for the dot... */
      prec++;
      /* present 'num' and insert dot */
      len += 3;
      s = begin_shared_string(len + 1);	  /* +1 to cater for a leading 0 */
      if(len/2 > prec)
      {
	/* Shift the integer part forward to make room for the dot. */
	mpz_get_str(s->str+1, 10, num);
	/* Find NULL character */
	len-=4;
	if (len < 1) len = 1;
	while(s->str[len]) len++;
	memmove(s->str, s->str+1, len-prec);
      }else{
	/* Shift the fractional part backward to make room for the dot. */
	mpz_get_str(s->str, 10, num);
	/* Find NULL character */
	len-=5;
	if (len < 0) len = 0;
	while(s->str[len]) len++;
	memmove(s->str+len-prec+2,
		s->str+len-prec+1,
		prec);
	len++;
      }
      /* Make sure numbers start with a digit */
      if ((len == prec) || ((unsigned)(s->str[len-prec-1] - '0') > 9)) {
        memmove(s->str+len-prec+1, s->str+len-prec, prec);
        s->str[len++ -prec] = '0';
      }
      s->str[len-prec]='.';
      push_string (end_and_resize_shared_string (s, len));
    }

    else {
      /* The precision is greater than the length, so start out
       * with a string of zeroes. */
      char *p;
      s = begin_shared_string (prec + 4);
      p = s->str;
      if (mpz_sgn (num) < 0) {
	*p++ = '-';
	mpz_neg (num, num);
      }
      *p++ = '0';
      *p++ = '.';
      for (; prec > len; prec--) *p++ = '0';
      mpz_get_str (p, 10, num);
      if (!p[len - 1]) {
	memmove (p + 1, p, len - 1);
	*p = '0';
      }
      push_string (end_and_resize_shared_string (s, p - s->str + len));
    }
  }

  static void format_string (mpq_t mpq, int dec_fract)
  {
    if (dec_fract >= 1) {
      mpz_t den, f;
      size_t strings = 0, twos, fives, prec;

      /* Remove from the denominator all factors 2 and 5, which are
       * the only ones we can compensate for with a decimal
       * fraction. */
      mpz_init_set (den, mpq_denref (mpq));
      mpz_init_set_ui (f, 2u);
      twos = mpz_remove (den, den, f);
      mpz_set_ui (f, 5u);
      fives = mpz_remove (den, den, f);

      /* The necessary number of decimals is the same as the number of
       * times we have to multiply by 10 to get an integer (if the
       * denominator only contains factors 2 and 5). Since we
       * "consume" one factor 2 and one factor 5 every time, that
       * means we need the same number of 10's as the max of the 2's
       * and 5's. */
      prec = MAXIMUM (twos, fives);

      if (prec) {
	mpz_t num;
	mpz_init (num);
	mpz_ui_pow_ui (num, 10, prec);
	mpz_mul (num, num, mpq_numref (mpq));
	if (twos)
	  mpz_tdiv_q_2exp (num, num, twos);
	if (fives) {
	  mpz_pow_ui (f, f, fives);
#ifdef PIKE_DEBUG
	  assert (mpz_divisible_p (num, f));
#endif
	  mpz_tdiv_q (num, num, f);
	}
	format_dec_frac (num, prec);
	strings++;
	mpz_clear (num);
      }
      else {
	push_string (low_get_mpz_digits (mpq_numref (mpq), 10));
	strings++;
	if (dec_fract >= 2) {
	  push_constant_text (".0");
	  strings++;
	}
      }

      /* If the denominator contains other factors we still need to
       * display it. */
      if (mpz_cmp_ui (den, 1u)) {
	push_static_text ("/");
	push_string (low_get_mpz_digits (den, 10));
	strings += 2;
      }

      mpz_clear (den);
      mpz_clear (f);
      if (strings > 1) f_add (strings);
    }

    else {
      push_string(low_get_mpz_digits(mpq_numref(mpq),10));
      push_static_text("/");
      push_string(low_get_mpz_digits(mpq_denref(mpq),10));
      f_add(3);
    }
  }

  /*! @decl string get_string (void|int decimal_fraction)
   *!
   *! If @[decimal_fraction] is zero or left out, the number is
   *! returned as a string on the form @expr{"numerator/denominator"@},
   *! where both parts are decimal integers. The numerator may be
   *! negative, but the denominator is always positive.
   *!
   *! If @[decimal_fraction] is set, then the number is returned as a
   *! (possibly negative) decimal fraction, i.e. a decimal number with
   *! a decimal point somewhere inside. There is always at least one
   *! digit before and after the decimal point.
   *!
   *! If the number can be accurately described that way, i.e. without
   *! an infinite number of decimals, then no denominator is included.
   *! Otherwise the remaining denominator is added to the decimal
   *! fraction after a "/". For example, 4711/100 is returned as
   *! @expr{"47.11"@}, 4711/200 as @expr{"23.555"@}, and 4711/300 as
   *! @expr{"47.11/3"@}.
   *!
   *! If @[decimal_fraction] is 1 then the decimal fraction contains a
   *! '.' only if there are decimals in it. If it is 2 or higher then
   *! the decimal fraction always contains a '.' with at least one
   *! digit before and after it.
   *!
   *! @note
   *! In any case, there are no unnecessary padding zeroes at the
   *! beginning or end of any decimal number.
   */
  PIKEFUN string get_string (void|zero|int decimal_fraction)
  {
    format_string (THISMPQ, decimal_fraction);
  }

  /*! @decl int num()
   *!
   *! Returns the numerator.
   */
  PIKEFUN int num()
  {
    push_object (fast_clone_object (bignum_program));
    mpz_set (OBTOMPZ (sp[-1].u.object), mpq_numref (THISMPQ));
    reduce_stack_top_bignum();
  }

  /*! @decl int den()
   *!
   *! Returns the denominator. It is always positive.
   */
  PIKEFUN int den()
  {
    push_object (fast_clone_object (bignum_program));
    mpz_set (OBTOMPZ (sp[-1].u.object), mpq_denref (THISMPQ));
    reduce_stack_top_bignum();
  }

  static int lookup(const char *name,
		    struct mapping *m,
		    char *ind,
		    int def,
		    int arg, int args)
  {
    struct svalue *sv;
    if((sv=simple_mapping_string_lookup(m,ind)))
    {
      if(TYPEOF(*sv) == T_INT)
      {
        return sv->u.integer;
      }else{
        bad_arg_error (name, args, arg, NULL, Pike_sp + arg - 1 - args,
                       "Bad argument %d to %s(). "
                       "The field \"%s\" doesn't hold an integer.\n",
                       arg, name, ind);
      }
    }
    return def;
  }

  /*! @decl protected string _sprintf(int c, mapping flags)
   */
  PIKEFUN string _sprintf(int c, mapping flags)
    flags ID_PROTECTED;
  {
    INT_TYPE precision;

    precision=lookup("Gmp.Mpq->_sprintf",flags,"precision",7, 2, args);
    pop_n_elems(args);
    if(precision<0) precision=0;

    switch(c)
    {
      default:
        push_undefined();
        return;

      case 'O':
        push_static_text ("Gmp.mpq(");
        format_string (THISMPQ, 0);
        push_static_text (")");
        f_add (3);
        return;

        /* Fixme: Support g/e/E */
      case 'g':
      case 'e':
      case 'E':
      case 'f':
	{
	  mpz_t tmp;

	  mpz_init(tmp);
	  mpz_ui_pow_ui(tmp, 10, precision);
	  mpz_mul(tmp, tmp, mpq_numref(THISMPQ));
	  mpz_tdiv_q(tmp, tmp, mpq_denref(THISMPQ));

	  if (!precision)
	    /* No dot if the precision is zero. This is consistent
	     * with normal printf behavior. */
	    push_string (low_get_mpz_digits (tmp, 10));
	  else
	    format_dec_frac (tmp, precision);

	  mpz_clear(tmp);
	}
    }
  }

  /*! @decl protected int(0..1) _is_type(string arg)
   */
  PIKEFUN int(0..1) _is_type(string str)
    flags ID_PROTECTED;
  {
    if( str == literal_float_string )
      RETURN 1;
    RETURN 0;
  }

  /*! @decl protected int|string|float cast(string s)
   *!
   *! Casting to a string returns the number in the decimal fraction
   *! format, where both decimal point and quotient is included only
   *! if required. I.e. it is the same as calling @[get_string] with 1
   *! as argument.
   */
  PIKEFUN int|string|float cast(string s)
    flags ID_PROTECTED;
  {
    pop_stack(); /* s have at least one more reference. */
    if( s == literal_int_string )
      f_mpq_get_int(0);
    else if( s == literal_string_string )
      format_string (THISMPQ, 1);
    else if( s == literal_float_string )
      f_mpq_get_float(0);
    else
      push_undefined();
  }

  /*! @decl protected Gmp.mpq `+(int|float|object ... a)
   */
  PIKEFUN mpq `+(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    struct object *res;
    for(e=0; e<args; e++)
      get_mpq(sp+e-args, 1, "`+", e + 1, args);
    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);
    for(e=0;e<args;e++)
      mpq_add(OBTOMPQ(res), OBTOMPQ(res), OBTOMPQ(sp[e-args].u.object));

    RETURN res;
  }

  /*! @decl protected Gmp.mpq ``+(int|float|object ... a)
   */
  PIKEFUN mpq ``+(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    struct object *res;
    for(e=0; e<args; e++)
      get_mpq(sp+e-args, 1, "``+", e + 1, args);
    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);
    for(e=0;e<args;e++)
      mpq_add(OBTOMPQ(res), OBTOMPQ(res), OBTOMPQ(sp[e-args].u.object));

    RETURN res;
  }

  /*! @decl protected Gmp.mpq `+=(int|float|object ... a)
   */
  PIKEFUN mpq `+=(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    for(e=0; e<args; e++)
      get_mpq(sp+e-args, 1, "`+=", e + 1, args);
    for(e=0;e<args;e++)
      mpq_add(THISMPQ, THISMPQ, OBTOMPQ(sp[e-args].u.object));

    REF_RETURN fp->current_object;
  }


#ifdef BIG_PIKE_INT
#define TOOBIGTEST || sp[e-args].u.integer>MAX_INT32
#else
#define TOOBIGTEST
#endif

  static void mult_convert_args(INT32 args, const char *arg_func)
  {
    INT32 e;
    for(e=0; e<args; e++)
    {
      if(TYPEOF(sp[e-args]) == T_OBJECT)
      {
        if(sp[e-args].u.object->prog == mpzmod_program)
          continue;

        if(sp[e-args].u.object->prog == bignum_program)
          continue;
      }

      if(TYPEOF(sp[e-args]) != T_INT || sp[e-args].u.integer<=0 TOOBIGTEST)
        get_mpq(sp+e-args, 1, arg_func, e + 1, args);
    }
  }

  static void mult_args(MP_RAT *res,
			INT32 e,
			INT32 args)
  {
    int norm=0;
    for(;e<args;e++)
    {
      if(TYPEOF(sp[e-args]) == T_INT)
      {
        mpz_mul_ui(mpq_numref(res),
                   mpq_numref(res),
                   sp[e-args].u.integer);
        norm++;
      }
      else if(sp[e-args].u.object->prog == mpq_program)
      {
        mpq_mul(res, res, OBTOMPQ(sp[e-args].u.object));
      }else{
        norm++;
        mpz_mul(mpq_numref(res),
                mpq_numref(res),
                OBTOMPZ(sp[e-args].u.object));
      }
    }

    if(norm) mpq_canonicalize(res);
  }

  /*! @decl protected Gmp.mpq `*(int|float|object ... a)
   */
  PIKEFUN mpq `*(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    struct object *res;
    mult_convert_args(args, "Gmp.mpq->`*");

    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);
    mult_args(OBTOMPQ(res), 0,args);

    RETURN res;
  }

  /*! @decl protected Gmp.mpq ``*(int|float|object ... a)
   */
  PIKEFUN mpq ``*(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    struct object *res;
    mult_convert_args(args, "Gmp.mpq->``*");

    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);
    mult_args(OBTOMPQ(res), 0,args);

    RETURN res;
  }

  /*! @decl protected Gmp.mpq `-(int|float|object ... a)
   */
  PIKEFUN mpq `-(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    struct object *res;

    if (args)
      for (e = 0; e<args; e++)
        get_mpq(sp + e - args, 1, "`-", e + 1, args);

    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);

    if(args)
    {
      for(e=0;e<args;e++)
        mpq_sub(OBTOMPQ(res), OBTOMPQ(res), OBTOMPQ(sp[e-args].u.object));
    }else{
      mpq_neg(OBTOMPQ(res), OBTOMPQ(res));
    }

    RETURN res;
  }

  /*! @decl protected Gmp.mpq ``-(int|float|object sv)
   */
  PIKEFUN mpq ``-(int|float|object sv)
    flags ID_PROTECTED;
  {
    struct object *res;
    MP_RAT *a=get_mpq(sv, 1, "``-", 1, args);
    res = fast_clone_object(mpq_program);
    mpq_sub(OBTOMPQ(res), a, THISMPQ);
    RETURN res;
  }

  /*! @decl protected Gmp.mpq `/(int|float|object ... a)
   */
  PIKEFUN mpq `/(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    struct object *res;

    for(e=0;e<args;e++)
      if (!mpq_sgn(get_mpq(sp+e-args, 1, "`/", e + 1, args)))
        SIMPLE_DIVISION_BY_ZERO_ERROR ("`/");

    res = fast_clone_object(mpq_program);
    mpq_set(OBTOMPQ(res), THISMPQ);
    for(e=0;e<args;e++)
      mpq_div(OBTOMPQ(res), OBTOMPQ(res), OBTOMPQ(sp[e-args].u.object));

    RETURN res;
  }

  /*! @decl protected Gmp.mpq ``/(int|float|object sv)
   */
  PIKEFUN mpq ``/(int|float|object sv)
    flags ID_PROTECTED;
  {
    MP_RAT *a;
    struct object *res = NULL;
    if(!mpq_sgn(THISMPQ))
      SIMPLE_DIVISION_BY_ZERO_ERROR ("``/");

    a=get_mpq(sv, 1, "``/", 1, args);

    res=fast_clone_object(mpq_program);
    mpq_div(OBTOMPQ(res), a, THISMPQ);

    RETURN res;
  }

  /*! @decl protected Gmp.mpq `%(int|float|object ... a)
   *! @expr{a%b =  a -  floor(a/b)*b @}
   */
  PIKEFUN mpq `%(int|float|object ... UNUSED)
    flags ID_PROTECTED;
  {
    INT32 e;
    struct object *_res;
    MP_INT tmp_int;
    MP_RAT *res;
    for(e=0;e<args;e++)
      if (!mpq_sgn(get_mpq(sp+e-args, 1, "`%", e, args)))
        SIMPLE_DIVISION_BY_ZERO_ERROR ("`%");

    _res = fast_clone_object(mpq_program);

    mpz_init(&tmp_int);
    mpq_set((res=OBTOMPQ(_res)), THISMPQ);

    for(e=0;e<args;e++)
    {
      // save A denom
      mpz_set( &tmp_int, mpq_denref(res));

      // mult A sides with B denom
      mpz_mul( mpq_denref(res),mpq_denref(res),
               mpq_denref(OBTOMPQ(sp[e-args].u.object)));
      mpz_mul( mpq_numref(res),mpq_numref(res),
               mpq_denref(OBTOMPQ(sp[e-args].u.object)));
      // tmp_int = B num * old A denom
      // (B denom would be same as A:s after multiplication, but there
      // is no need to do the calculation..)
      mpz_mul( &tmp_int, mpq_numref(OBTOMPQ(sp[e-args].u.object)),
               &tmp_int );

      // a.num = (A.num % B.num) (since denom is common)
      mpz_tdiv_r( mpq_numref(res), mpq_numref(res), &tmp_int);
      /* This could be done after the loop, but the
         denominators might get out of hand. */
      mpq_canonicalize(res);
    }
    mpz_clear(&tmp_int);

    RETURN _res;
  }

  /*! @decl protected Gmp.mpq ``%(int|float|object a)
   */
  PIKEFUN mpq ``%(int|float|object UNUSED)
    flags ID_PROTECTED;
  {
    get_mpq(sp-1, 1, "``%", 1, 1);
    ref_push_object(Pike_fp->current_object);
    apply_lfun( Pike_sp[-2].u.object, LFUN_MOD, 1 );
  }

  /*! @decl Gmp.mpq invert()
   */
  PIKEFUN mpq invert()
  {
    struct object *res;
    if (!mpq_sgn(THISMPQ))
      SIMPLE_DIVISION_BY_ZERO_ERROR ("invert");
    res = fast_clone_object(mpq_program);
    mpq_inv(OBTOMPQ(res), THISMPQ);
    RETURN res;
  }

  /*! @decl protected Gmp.mpq `~()
   *! Defined as @expr{-1-x@}.
   */
  PIKEFUN mpq `~()
    flags ID_PROTECTED;
  {
    struct object *o;
    o=fast_clone_object(mpq_program);
    mpq_set_si(OBTOMPQ(o), -1, 1);
    mpq_sub(OBTOMPQ(o),OBTOMPQ(o), THISMPQ);

    RETURN o;
  }

  /*! @decl protected int(0..1) `>(mixed q)
   */
  PIKEFUN int(0..1) `>(mixed q)
    flags ID_PROTECTED;
  {
    RETURN mpq_cmp(THISMPQ, get_mpq(q, 1, "`>", 1, args)) > 0;
  }

  /*! @decl protected int(0..1) `<(mixed q)
   */
  PIKEFUN int(0..1) `<(mixed q)
    flags ID_PROTECTED;
  {
    RETURN mpq_cmp(THISMPQ, get_mpq(q, 1, "`<", 1, args)) < 0;
  }


  /*! @decl protected int(0..1) `==(mixed q)
   */
  PIKEFUN int(0..1) `==(mixed q)
    flags ID_PROTECTED;
  {
    MP_RAT *arg=get_mpq(q, 0, NULL, 0, 0);
    RETURN arg && !mpq_cmp(THISMPQ, arg);
  }

  /*! @decl int(-1..1) sgn()
   */
  PIKEFUN int(-1..1) sgn()
    {
      RETURN mpq_sgn(THISMPQ);
    }

  /*! @decl protected int(0..1) `!(mixed q)
   */
  PIKEFUN int(0..1) `!()
    flags ID_PROTECTED;
  {
    RETURN !mpq_sgn(THISMPQ);
  }

  INIT
  {
#ifdef PIKE_DEBUG
    if(!fp) Pike_fatal("ZERO FP\n");
    if(!fp->current_storage) Pike_fatal("ZERO storage\n");
#endif
    mpq_init(THISMPQ);
  }

  EXIT
    gc_trivial;
  {
#ifdef PIKE_DEBUG
    if(!fp) Pike_fatal("ZERO FP\n");
    if(!fp->current_storage) Pike_fatal("ZERO storage\n");
#endif
    mpq_clear(THISMPQ);
  }

  GC_RECURSE
  {
    if (mc_count_bytes (Pike_fp->current_object))
      mc_counted_bytes +=
	mpq_numref (THISMPQ)[0]._mp_alloc * sizeof (mp_limb_t) +
	mpq_denref (THISMPQ)[0]._mp_alloc * sizeof (mp_limb_t) +
	sizeof (mpq_t);
  }
}

/*! @endclass
 */

/*! @endmodule
 */

void pike_init_mpq_module(void)
{
  INIT
}

void pike_exit_mpq_module(void)
{
  EXIT
}
